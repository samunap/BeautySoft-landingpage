/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mailchimp";
exports.ids = ["vendor-chunks/@mailchimp"];
exports.modules = {

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.7\n *\n * Do not edit the class manually.\n *\n */\n\nvar superagent = __webpack_require__(/*! superagent */ \"(rsc)/./node_modules/superagent/lib/node/index.js\");\nvar querystring = __webpack_require__(/*! querystring */ \"querystring\");\n\nvar AccountExport = __webpack_require__(/*! ./api/AccountExportApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js\");\nvar AccountExports = __webpack_require__(/*! ./api/AccountExportsApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js\");\nvar ActivityFeed = __webpack_require__(/*! ./api/ActivityFeedApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js\");\nvar AuthorizedApps = __webpack_require__(/*! ./api/AuthorizedAppsApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js\");\nvar Automations = __webpack_require__(/*! ./api/AutomationsApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js\");\nvar BatchWebhooks = __webpack_require__(/*! ./api/BatchWebhooksApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js\");\nvar Batches = __webpack_require__(/*! ./api/BatchesApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js\");\nvar CampaignFolders = __webpack_require__(/*! ./api/CampaignFoldersApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js\");\nvar Campaigns = __webpack_require__(/*! ./api/CampaignsApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js\");\nvar ConnectedSites = __webpack_require__(/*! ./api/ConnectedSitesApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js\");\nvar Conversations = __webpack_require__(/*! ./api/ConversationsApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js\");\nvar CustomerJourneys = __webpack_require__(/*! ./api/CustomerJourneysApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js\");\nvar Ecommerce = __webpack_require__(/*! ./api/EcommerceApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js\");\nvar FacebookAds = __webpack_require__(/*! ./api/FacebookAdsApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js\");\nvar FileManager = __webpack_require__(/*! ./api/FileManagerApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js\");\nvar LandingPages = __webpack_require__(/*! ./api/LandingPagesApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js\");\nvar Lists = __webpack_require__(/*! ./api/ListsApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js\");\nvar Ping = __webpack_require__(/*! ./api/PingApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js\");\nvar Reporting = __webpack_require__(/*! ./api/ReportingApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js\");\nvar Reports = __webpack_require__(/*! ./api/ReportsApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js\");\nvar Root = __webpack_require__(/*! ./api/RootApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js\");\nvar SearchCampaigns = __webpack_require__(/*! ./api/SearchCampaignsApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js\");\nvar SearchMembers = __webpack_require__(/*! ./api/SearchMembersApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js\");\nvar Surveys = __webpack_require__(/*! ./api/SurveysApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/SurveysApi.js\");\nvar TemplateFolders = __webpack_require__(/*! ./api/TemplateFoldersApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js\");\nvar Templates = __webpack_require__(/*! ./api/TemplatesApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js\");\nvar VerifiedDomains = __webpack_require__(/*! ./api/VerifiedDomainsApi */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js\");\n\n/**\n * @module ApiClient\n * @version 3.0.80\n */\n\n/**\n * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n * application to use this class directly - the *Api and model classes provide the public API for the service. The\n * contents of this file should be regarded as internal but are documented for completeness.\n * @alias module:ApiClient\n * @class\n */\nvar exports = function() {\n\n  /**\n   * The base URL against which to resolve every API call's (relative) path.\n   * @type {String}\n   * @default https://server.api.mailchimp.com/3.0\n   */\n  this.basePath = 'https://server.api.mailchimp.com/3.0'.replace(/\\/+$/, '');\n\n  /**\n   * The API configuration settings object\n   * @type {Object}\n   * @default {}\n   */\n  this.config = {\n    apiKey: '',\n    accessToken: '',\n    server: 'invalid-server'\n  };\n\n  /**\n   * The default HTTP headers to be included for all API calls.\n   * @type {Array.<String>}\n   * @default {}\n   */\n  this.defaultHeaders = {};\n  /**\n   * The default HTTP timeout for all API calls.\n   * @type {Number}\n   * @default 60000\n   */\n  this.timeout = 120000;\n\n  /**\n   * If set to false an additional timestamp parameter is added to all API GET calls to\n   * prevent browser caching\n   * @type {Boolean}\n   * @default true\n   */\n  this.cache = true;\n\n  /**\n   * If set to true, the client will save the cookies from each server\n   * response, and return them in the next request.\n   * @default false\n   */\n  this.enableCookies = false;\n\n  /*\n   * Used to save and return cookies in a node.js (non-browser) setting,\n   * if this.enableCookies is set to true.\n   */\n  if (typeof window === 'undefined') {\n    this.agent = new superagent.agent();\n  }\n\n  // API Routes\n  this.accountExport = new AccountExport(this);\n  this.accountExports = new AccountExports(this);\n  this.activityFeed = new ActivityFeed(this);\n  this.authorizedApps = new AuthorizedApps(this);\n  this.automations = new Automations(this);\n  this.batchWebhooks = new BatchWebhooks(this);\n  this.batches = new Batches(this);\n  this.campaignFolders = new CampaignFolders(this);\n  this.campaigns = new Campaigns(this);\n  this.connectedSites = new ConnectedSites(this);\n  this.conversations = new Conversations(this);\n  this.customerJourneys = new CustomerJourneys(this);\n  this.ecommerce = new Ecommerce(this);\n  this.facebookAds = new FacebookAds(this);\n  this.fileManager = new FileManager(this);\n  this.landingPages = new LandingPages(this);\n  this.lists = new Lists(this);\n  this.ping = new Ping(this);\n  this.reporting = new Reporting(this);\n  this.reports = new Reports(this);\n  this.root = new Root(this);\n  this.searchCampaigns = new SearchCampaigns(this);\n  this.searchMembers = new SearchMembers(this);\n  this.Surveys = new Surveys(this);\n  this.templateFolders = new TemplateFolders(this);\n  this.templates = new Templates(this);\n  this.verifiedDomains = new VerifiedDomains(this);\n};\n\n/**\n * Sets the API configuration settings object.\n * @param config {Object} The configuration object\n */\nexports.prototype.setConfig = function(config = {}) {\n  var _this = this;\n  this.config = config;\n};\n\n/**\n * Returns a string representation for an actual parameter.\n * @param param The actual parameter.\n * @returns {String} The string representation of <code>param</code>.\n */\nexports.prototype.paramToString = function(param) {\n  if (param == undefined || param == null) {\n    return '';\n  }\n  if (param instanceof Date) {\n    return param.toJSON();\n  }\n  return param.toString();\n};\n\n/**\n * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n * NOTE: query parameters are not handled here.\n * @param {String} path The path to append to the base URL.\n * @param {Object} pathParams The parameter values to append.\n * @returns {String} The encoded path with parameter values substituted.\n */\nexports.prototype.buildUrl = function(path, pathParams) {\n  if (!path.match(/^\\//)) {\n    path = '/' + path;\n  }\n  var url = this.basePath + path;\n  var _this = this;\n  url = url.replace(/\\{([\\w-]+)\\}/g, function(fullMatch, key) {\n    var value;\n    if (pathParams.hasOwnProperty(key)) {\n      value = _this.paramToString(pathParams[key]);\n    } else {\n      value = fullMatch;\n    }\n    return encodeURIComponent(value);\n  });\n\n  // Define the server\n  if (typeof this.config.server !== 'undefined') {\n    url = url.replace('server', this.config.server);\n  }\n\n  return url;\n};\n\n/**\n * Checks whether the given content type represents JSON.<br>\n * JSON content type examples:<br>\n * <ul>\n * <li>application/json</li>\n * <li>application/json; charset=UTF8</li>\n * <li>APPLICATION/JSON</li>\n * </ul>\n * @param {String} contentType The MIME content type to check.\n * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n */\nexports.prototype.isJsonMime = function(contentType) {\n  return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n};\n\n/**\n * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n * @param {Array.<String>} contentTypes\n * @returns {String} The chosen content type, preferring JSON.\n */\nexports.prototype.jsonPreferredMime = function(contentTypes) {\n  for (var i = 0; i < contentTypes.length; i++) {\n    if (this.isJsonMime(contentTypes[i])) {\n      return contentTypes[i];\n    }\n  }\n  return contentTypes[0];\n};\n\n/**\n * Checks whether the given parameter value represents file-like content.\n * @param param The parameter to check.\n * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n */\nexports.prototype.isFileParam = function(param) {\n  // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n  if (true) {\n    var fs;\n    try {\n      fs = __webpack_require__(/*! fs */ \"fs\");\n    } catch (err) {}\n    if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n      return true;\n    }\n  }\n  // Buffer in Node.js\n  if (typeof Buffer === 'function' && param instanceof Buffer) {\n    return true;\n  }\n  // Blob in browser\n  if (typeof Blob === 'function' && param instanceof Blob) {\n    return true;\n  }\n  // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n  if (typeof File === 'function' && param instanceof File) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Normalizes parameter values:\n * <ul>\n * <li>remove nils</li>\n * <li>keep files and arrays</li>\n * <li>format to string with `paramToString` for other cases</li>\n * </ul>\n * @param {Object.<String, Object>} params The parameters as object properties.\n * @returns {Object.<String, Object>} normalized parameters.\n */\nexports.prototype.normalizeParams = function(params) {\n  var newParams = {};\n  for (var key in params) {\n    if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n      var value = params[key];\n      if (this.isFileParam(value) || Array.isArray(value)) {\n        newParams[key] = value;\n      } else {\n        newParams[key] = this.paramToString(value);\n      }\n    }\n  }\n  return newParams;\n};\n\n/**\n * Enumeration of collection format separator strategies.\n * @enum {String}\n * @readonly\n */\nexports.CollectionFormatEnum = {\n  /**\n   * Comma-separated values. Value: <code>csv</code>\n   * @const\n   */\n  CSV: ',',\n  /**\n   * Space-separated values. Value: <code>ssv</code>\n   * @const\n   */\n  SSV: ' ',\n  /**\n   * Tab-separated values. Value: <code>tsv</code>\n   * @const\n   */\n  TSV: '\\t',\n  /**\n   * Pipe(|)-separated values. Value: <code>pipes</code>\n   * @const\n   */\n  PIPES: '|',\n  /**\n   * Native array. Value: <code>multi</code>\n   * @const\n   */\n  MULTI: 'multi'\n};\n\n/**\n * Builds a string representation of an array-type actual parameter, according to the given collection format.\n * @param {Array} param An array parameter.\n * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n */\nexports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n  if (param == null) {\n    return null;\n  }\n  switch (collectionFormat) {\n    case 'csv':\n      return param.map(this.paramToString).join(',');\n    case 'ssv':\n      return param.map(this.paramToString).join(' ');\n    case 'tsv':\n      return param.map(this.paramToString).join('\\t');\n    case 'pipes':\n      return param.map(this.paramToString).join('|');\n    case 'multi':\n      // return the array directly as SuperAgent will handle it as expected\n      return param.map(this.paramToString);\n    default:\n      throw new Error('Unknown collection format: ' + collectionFormat);\n  }\n};\n\n/**\n * Deserializes an HTTP response body into a value of the specified type.\n * @param {Object} response A SuperAgent response object.\n * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n * all properties on <code>data<code> will be converted to this type.\n * @returns A value of the specified type.\n */\nexports.prototype.deserialize = function deserialize(response, returnType) {\n  if (response == null || returnType == null || response.status == 204) {\n    return null;\n  }\n  // Rely on SuperAgent for parsing response body.\n  // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n  var data = response.body;\n  if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n    // SuperAgent does not always produce a body; use the unparsed response as a fallback\n    data = response.text;\n  }\n  return exports.convertToType(data, returnType);\n};\n\n/**\n * Invokes the REST service using the supplied settings and parameters.\n * @param {String} path The base URL to invoke.\n * @param {String} httpMethod The HTTP method to use.\n * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n * @param {Object} bodyParam The value to pass as the request body.\n * @param {Array.<String>} authNames An array of authentication type names.\n * @param {Array.<String>} contentTypes An array of request MIME types.\n * @param {Array.<String>} accepts An array of acceptable response MIME types.\n * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n * constructor for a complex type.\n * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n */\nexports.prototype.callApi = function callApi(path, httpMethod, pathParams,\n    queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n    returnType) {\n\n  var _this = this;\n  var url = this.buildUrl(path, pathParams);\n  var request = superagent(httpMethod, url);\n\n  // Basic Authentication\n  if (this.config.apiKey !== undefined && this.config.apiKey !== '') {\n    request.auth('user', this.config.apiKey);\n  }\n\n  // OAuth Authentication\n  else if (this.config.accessToken !== undefined && this.config.accessToken !== '') {\n    request.set({'Authorization': 'Bearer ' + this.config.accessToken});\n  }\n\n  // set query parameters\n  if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n    queryParams['_'] = new Date().getTime();\n  }\n  request.query(this.normalizeParams(queryParams));\n\n  // set header parameters\n  request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n  // set request timeout\n  request.timeout(this.timeout);\n\n  var contentType = this.jsonPreferredMime(contentTypes);\n  if (contentType) {\n    // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n    if(contentType != 'multipart/form-data') {\n      request.type(contentType);\n    }\n  } else if (!HeaderUtils.caseInsensitiveGet(request.header, 'content-type')) {\n    request.type('application/json');\n  }\n\n  if (contentType === 'application/x-www-form-urlencoded') {\n    request.send(querystring.stringify(this.normalizeParams(formParams)));\n  } else if (contentType == 'multipart/form-data') {\n    var _formParams = this.normalizeParams(formParams);\n    for (var key in _formParams) {\n      if (_formParams.hasOwnProperty(key)) {\n        if (this.isFileParam(_formParams[key])) {\n          // file field\n          request.attach(key, _formParams[key]);\n        } else {\n          request.field(key, _formParams[key]);\n        }\n      }\n    }\n  } else if (bodyParam) {\n    request.send(bodyParam);\n  }\n\n  var accept = this.jsonPreferredMime(accepts);\n  if (accept) {\n    request.accept(accept);\n  }\n\n  if (returnType === 'Blob') {\n    request.responseType('blob');\n  } else if (returnType === 'String') {\n    request.responseType('string');\n  }\n\n  // Attach previously saved cookies, if enabled\n  if (this.enableCookies){\n    if (typeof window === 'undefined') {\n      this.agent.attachCookies(request);\n    }\n    else {\n      request.withCredentials();\n    }\n  }\n\n  return new Promise(function(resolve, reject) {\n    request.end(function(error, response) {\n      if (error) {\n        reject(error);\n      } else {\n        try {\n          var data = _this.deserialize(response, returnType);\n          if (_this.enableCookies && typeof window === 'undefined'){\n            _this.agent.saveCookies(response);\n          }\n          resolve({data: data, response: response});\n        } catch (err) {\n          reject(err);\n        }\n      }\n    });\n  });\n  };\n\n/**\n * Parses an ISO-8601 string representation of a date value.\n * @param {String} str The date value as a string.\n * @returns {Date} The parsed date object.\n */\nexports.parseDate = function(str) {\n  return new Date(str.replace(/T/i, ' '));\n};\n\n/**\n * Converts a value to the specified type.\n * @param {(String|Object)} data The data to convert, as a string or object.\n * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n * all properties on <code>data<code> will be converted to this type.\n * @returns An instance of the specified type or null or undefined if data is null or undefined.\n */\nexports.convertToType = function(data, type) {\n  if (data === null || data === undefined)\n    return data\n\n  switch (type) {\n    case 'Boolean':\n      return Boolean(data);\n    case 'Integer':\n      return parseInt(data, 10);\n    case 'Number':\n      return parseFloat(data);\n    case 'String':\n      return String(data);\n    case 'Date':\n      return this.parseDate(String(data));\n    case 'Blob':\n      return data;\n    default:\n      if (type === Object) {\n        // generic object, return directly\n        return data;\n      } else if (typeof type === 'function') {\n        // for model type like: User\n        return type.constructFromObject(data);\n      } else if (Array.isArray(type)) {\n        // for array type like: ['String']\n        var itemType = type[0];\n        return data.map(function(item) {\n          return exports.convertToType(item, itemType);\n        });\n      } else if (typeof type === 'object') {\n        // for plain object type like: {'String': 'Integer'}\n        var keyType, valueType;\n        for (var k in type) {\n          if (type.hasOwnProperty(k)) {\n            keyType = k;\n            valueType = type[k];\n            break;\n          }\n        }\n        var result = {};\n        for (var k in data) {\n          if (data.hasOwnProperty(k)) {\n            var key = exports.convertToType(k, keyType);\n            var value = exports.convertToType(data[k], valueType);\n            result[key] = value;\n          }\n        }\n        return result;\n      } else {\n        // for unknown type, return the data directly\n        return data;\n      }\n  }\n};\n\n/**\n * Constructs a new map or array model from REST data.\n * @param data {Object|Array} The REST data.\n * @param obj {Object|Array} The target object or array.\n */\nexports.constructFromObject = function(data, obj, itemType) {\n  if (Array.isArray(data)) {\n    for (var i = 0; i < data.length; i++) {\n      if (data.hasOwnProperty(i))\n        obj[i] = exports.convertToType(data[i], itemType);\n    }\n  } else {\n    for (var k in data) {\n      if (data.hasOwnProperty(k))\n        obj[k] = exports.convertToType(data[k], itemType);\n    }\n  }\n};\n\n  /**\n * The default API client implementation.\n * @type {module:ApiClient}\n */\nexports.instance = new exports();\n\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * AccountExport service.\n * @module api/AccountExportApi\n */\n\n/**\n * Constructs a new AccountExportApi. \n * @alias module:api/AccountExportApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Get account export info\n   * Get information about a specific account export.\n   * @param {String} exportId The unique id for the account export.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001Exports} and HTTP response\n   */\n  this.getAccountExportsWithHttpInfo = function(exportId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'exportId' is set\n    if (exportId === undefined || exportId === null) {\n      throw new Error(\"Missing the required parameter 'exportId' when calling \");\n    }\n\n    var pathParams = {\n      'export_id': exportId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/account-exports/{export_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get account export info\n   * Get information about a specific account export.\n   * @param {String} exportId The unique id for the account export.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001Exports}\n   */\n  this.getAccountExports = function(exportId, opts) {\n    return this.getAccountExportsWithHttpInfo(exportId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9hcGkvQWNjb3VudEV4cG9ydEFwaS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQSxnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBYzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QixlQUFlLGlDQUFpQztBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixjQUFjLFNBQVMsR0FBRyx5Q0FBeUMsMENBQTBDLDhDQUE4QztBQUMzSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QixVQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixjQUFjLFNBQVMsR0FBRyx5Q0FBeUMscUJBQXFCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzYW11ZVxcRGVza3RvcFxcQmVhdXR5U29mdC1sYW5kaW5ncGFnZVxcbm9kZV9tb2R1bGVzXFxAbWFpbGNoaW1wXFxtYWlsY2hpbXBfbWFya2V0aW5nXFxzcmNcXGFwaVxcQWNjb3VudEV4cG9ydEFwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWFpbGNoaW1wIE1hcmtldGluZyBBUElcbiAqIE5vIGRlc2NyaXB0aW9uIHByb3ZpZGVkIChnZW5lcmF0ZWQgYnkgU3dhZ2dlciBDb2RlZ2VuIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4pXG4gKlxuICogT3BlbkFQSSBzcGVjIHZlcnNpb246IDMuMC44MFxuICogQ29udGFjdDogYXBpaGVscEBtYWlsY2hpbXAuY29tXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSB0aGUgc3dhZ2dlciBjb2RlIGdlbmVyYXRvciBwcm9ncmFtLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbi5naXRcbiAqXG4gKiBTd2FnZ2VyIENvZGVnZW4gdmVyc2lvbjogMi40LjEyXG4gKlxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICpcbiAqL1xuXG5cblxudmFyIEFwaUNsaWVudCA9IHJlcXVpcmUoJy4uL0FwaUNsaWVudCcpO1xuXG4vKipcbiAqIEFjY291bnRFeHBvcnQgc2VydmljZS5cbiAqIEBtb2R1bGUgYXBpL0FjY291bnRFeHBvcnRBcGlcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgQWNjb3VudEV4cG9ydEFwaS4gXG4gKiBAYWxpYXMgbW9kdWxlOmFwaS9BY2NvdW50RXhwb3J0QXBpXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7bW9kdWxlOkFwaUNsaWVudH0gYXBpQ2xpZW50IE9wdGlvbmFsIEFQSSBjbGllbnQgaW1wbGVtZW50YXRpb24gdG8gdXNlLFxuICogZGVmYXVsdCB0byB7QGxpbmsgbW9kdWxlOkFwaUNsaWVudCNpbnN0YW5jZX0gaWYgdW5zcGVjaWZpZWQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXBpQ2xpZW50KSB7XG4gIHRoaXMuYXBpQ2xpZW50ID0gYXBpQ2xpZW50IHx8IEFwaUNsaWVudC5pbnN0YW5jZTtcblxuICAvKipcbiAgICogR2V0IGFjY291bnQgZXhwb3J0IGluZm9cbiAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgYWNjb3VudCBleHBvcnQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBleHBvcnRJZCBUaGUgdW5pcXVlIGlkIGZvciB0aGUgYWNjb3VudCBleHBvcnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHtAbGluayBodHRwczovL3d3dy5wcm9taXNlanMub3JnL3xQcm9taXNlfSwgd2l0aCBhbiBvYmplY3QgY29udGFpbmluZyBkYXRhIG9mIHR5cGUge0BsaW5rIG1vZHVsZTptb2RlbC9JbmxpbmVSZXNwb25zZTIwMDFFeHBvcnRzfSBhbmQgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy5nZXRBY2NvdW50RXhwb3J0c1dpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKGV4cG9ydElkLCBvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdmFyIHBvc3RCb2R5ID0gbnVsbDtcblxuICAgIC8vIHZlcmlmeSB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdleHBvcnRJZCcgaXMgc2V0XG4gICAgaWYgKGV4cG9ydElkID09PSB1bmRlZmluZWQgfHwgZXhwb3J0SWQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnZXhwb3J0SWQnIHdoZW4gY2FsbGluZyBcIik7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhQYXJhbXMgPSB7XG4gICAgICAnZXhwb3J0X2lkJzogZXhwb3J0SWRcbiAgICB9O1xuICAgIFxuICAgIC8qXG4gICAgIFRoZSBmb2xsb3dpbmcgYmxvY2sgYnVpbGRpbmcgcXVlcnlQYXJhbXMgaXMgZ29pbmcgdG8gbG9vayBhIGxpdHRsZSBvZGQsIHdlJ3JlIGdvaW5nIGxvb2sgZm9yIHZhbHVlcyBpbiAkb3B0cyB3aXRoIGJvdGhcbiAgICAgY2FtZWxDYXNlIGFuZCBzbmFrZV9jYXNlIGZvcm1hdCAod2hpY2ggd2lsbCBiZSB0aGUgc2FtZSBpZiBzaW5ndWxhciB3b3JkKS4gVGhpcyBpcyBiZWNhdXNlIHRoZSBBUEkgZG9jcyB1c2Ugc25ha2VfY2FzZVxuICAgICBidXQgZWFybHkgdmVyc2lvbnMgb2YgdGhlc2UgU0RLcyB1c2VkIGNhbWVsQ2FzZS4gU28gdG8gYmUgYmFja3dhcmQgY29tcGF0aWJsZSB3ZSdsbCB1c2UgYm90aC4gXG4gICAgKi9cbiAgICB2YXIgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAnZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZmllbGRzJ10gPyBvcHRzWydmaWVsZHMnXSA6IG9wdHNbJ2ZpZWxkcyddLCAnY3N2JyksXG4gICAgICAnZXhjbHVkZV9maWVsZHMnOiB0aGlzLmFwaUNsaWVudC5idWlsZENvbGxlY3Rpb25QYXJhbShvcHRzWydleGNsdWRlRmllbGRzJ10gPyBvcHRzWydleGNsdWRlRmllbGRzJ10gOiBvcHRzWydleGNsdWRlX2ZpZWxkcyddLCAnY3N2JylcbiAgICB9O1xuICAgIHZhciBoZWFkZXJQYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBmb3JtUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgYXV0aE5hbWVzID0gWydiYXNpY0F1dGgnXTtcbiAgICB2YXIgY29udGVudFR5cGVzID0gWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgdmFyIGFjY2VwdHMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJ107XG4gICAgdmFyIHJldHVyblR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQuY2FsbEFwaShcbiAgICAgICcvYWNjb3VudC1leHBvcnRzL3tleHBvcnRfaWR9JywgJ0dFVCcsXG4gICAgICBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcywgaGVhZGVyUGFyYW1zLCBmb3JtUGFyYW1zLCBwb3N0Qm9keSxcbiAgICAgIGF1dGhOYW1lcywgY29udGVudFR5cGVzLCBhY2NlcHRzLCByZXR1cm5UeXBlXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFjY291bnQgZXhwb3J0IGluZm9cbiAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgYWNjb3VudCBleHBvcnQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBleHBvcnRJZCBUaGUgdW5pcXVlIGlkIGZvciB0aGUgYWNjb3VudCBleHBvcnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHtAbGluayBodHRwczovL3d3dy5wcm9taXNlanMub3JnL3xQcm9taXNlfSwgd2l0aCBkYXRhIG9mIHR5cGUge0BsaW5rIG1vZHVsZTptb2RlbC9JbmxpbmVSZXNwb25zZTIwMDFFeHBvcnRzfVxuICAgKi9cbiAgdGhpcy5nZXRBY2NvdW50RXhwb3J0cyA9IGZ1bmN0aW9uKGV4cG9ydElkLCBvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWNjb3VudEV4cG9ydHNXaXRoSHR0cEluZm8oZXhwb3J0SWQsIG9wdHMpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZV9hbmRfZGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2VfYW5kX2RhdGEuZGF0YTtcbiAgICAgIH0pO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * AccountExports service.\n * @module api/AccountExportsApi\n */\n\n/**\n * Constructs a new AccountExportsApi. \n * @alias module:api/AccountExportsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List account exports\n   * Get a list of account exports for a given account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response\n   */\n  this.listAccountExportsWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/account-exports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List account exports\n   * Get a list of account exports for a given account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}\n   */\n  this.listAccountExports = function(opts) {\n    return this.listAccountExportsWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add export\n   * Create a new account export in your Mailchimp account.\n   * @param {module:model/CreateAnAccountExport} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001Exports} and HTTP response\n   */\n  this.createAccountExportWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/account-exports', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add export\n   * Create a new account export in your Mailchimp account.\n   * @param {module:model/CreateAnAccountExport} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001Exports}\n   */\n  this.createAccountExport = function(body) {\n    return this.createAccountExportWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AccountExportsApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * ActivityFeed service.\n * @module api/ActivityFeedApi\n */\n\n/**\n * Constructs a new ActivityFeedApi. \n * @alias module:api/ActivityFeedApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Get latest chimp chatter\n   * Return the Chimp Chatter for this account ordered by most recent.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response\n   */\n  this.getChimpChatterWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/activity-feed/chimp-chatter', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get latest chimp chatter\n   * Return the Chimp Chatter for this account ordered by most recent.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}\n   */\n  this.getChimpChatter = function(opts) {\n    return this.getChimpChatterWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9hcGkvQWN0aXZpdHlGZWVkQXBpLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBLGdCQUFnQixtQkFBTyxDQUFDLDBGQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCLGVBQWUsaUNBQWlDO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjLFNBQVMsR0FBRyx5Q0FBeUMsMENBQTBDLHNDQUFzQztBQUNuSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxTQUFTLEdBQUcseUNBQXlDLHFCQUFxQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FtdWVcXERlc2t0b3BcXEJlYXV0eVNvZnQtbGFuZGluZ3BhZ2VcXG5vZGVfbW9kdWxlc1xcQG1haWxjaGltcFxcbWFpbGNoaW1wX21hcmtldGluZ1xcc3JjXFxhcGlcXEFjdGl2aXR5RmVlZEFwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWFpbGNoaW1wIE1hcmtldGluZyBBUElcbiAqIE5vIGRlc2NyaXB0aW9uIHByb3ZpZGVkIChnZW5lcmF0ZWQgYnkgU3dhZ2dlciBDb2RlZ2VuIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4pXG4gKlxuICogT3BlbkFQSSBzcGVjIHZlcnNpb246IDMuMC44MFxuICogQ29udGFjdDogYXBpaGVscEBtYWlsY2hpbXAuY29tXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSB0aGUgc3dhZ2dlciBjb2RlIGdlbmVyYXRvciBwcm9ncmFtLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbi5naXRcbiAqXG4gKiBTd2FnZ2VyIENvZGVnZW4gdmVyc2lvbjogMi40LjEyXG4gKlxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICpcbiAqL1xuXG5cblxudmFyIEFwaUNsaWVudCA9IHJlcXVpcmUoJy4uL0FwaUNsaWVudCcpO1xuXG4vKipcbiAqIEFjdGl2aXR5RmVlZCBzZXJ2aWNlLlxuICogQG1vZHVsZSBhcGkvQWN0aXZpdHlGZWVkQXBpXG4gKi9cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IEFjdGl2aXR5RmVlZEFwaS4gXG4gKiBAYWxpYXMgbW9kdWxlOmFwaS9BY3Rpdml0eUZlZWRBcGlcbiAqIEBjbGFzc1xuICogQHBhcmFtIHttb2R1bGU6QXBpQ2xpZW50fSBhcGlDbGllbnQgT3B0aW9uYWwgQVBJIGNsaWVudCBpbXBsZW1lbnRhdGlvbiB0byB1c2UsXG4gKiBkZWZhdWx0IHRvIHtAbGluayBtb2R1bGU6QXBpQ2xpZW50I2luc3RhbmNlfSBpZiB1bnNwZWNpZmllZC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcGlDbGllbnQpIHtcbiAgdGhpcy5hcGlDbGllbnQgPSBhcGlDbGllbnQgfHwgQXBpQ2xpZW50Lmluc3RhbmNlO1xuXG4gIC8qKlxuICAgKiBHZXQgbGF0ZXN0IGNoaW1wIGNoYXR0ZXJcbiAgICogUmV0dXJuIHRoZSBDaGltcCBDaGF0dGVyIGZvciB0aGlzIGFjY291bnQgb3JkZXJlZCBieSBtb3N0IHJlY2VudC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5jb3VudCBUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gcmV0dXJuLiBEZWZhdWx0IHZhbHVlIGlzIDEwLiBNYXhpbXVtIHZhbHVlIGlzIDEwMDAgKGRlZmF1bHQgdG8gMTApXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLm9mZnNldCBVc2VkIGZvciBbcGFnaW5hdGlvbl0oaHR0cHM6Ly9tYWlsY2hpbXAuY29tL2RldmVsb3Blci9tYXJrZXRpbmcvZG9jcy9tZXRob2RzLXBhcmFtZXRlcnMvI3BhZ2luYXRpb24pLCB0aGlzIGl0IHRoZSBudW1iZXIgb2YgcmVjb3JkcyBmcm9tIGEgY29sbGVjdGlvbiB0byBza2lwLiBEZWZhdWx0IHZhbHVlIGlzIDAuIChkZWZhdWx0IHRvIDApXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL0lubGluZVJlc3BvbnNlMjAwfSBhbmQgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy5nZXRDaGltcENoYXR0ZXJXaXRoSHR0cEluZm8gPSBmdW5jdGlvbihvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdmFyIHBvc3RCb2R5ID0gbnVsbDtcblxuICAgIHZhciBwYXRoUGFyYW1zID0ge1xuICAgIH07XG4gICAgXG4gICAgLypcbiAgICAgVGhlIGZvbGxvd2luZyBibG9jayBidWlsZGluZyBxdWVyeVBhcmFtcyBpcyBnb2luZyB0byBsb29rIGEgbGl0dGxlIG9kZCwgd2UncmUgZ29pbmcgbG9vayBmb3IgdmFsdWVzIGluICRvcHRzIHdpdGggYm90aFxuICAgICBjYW1lbENhc2UgYW5kIHNuYWtlX2Nhc2UgZm9ybWF0ICh3aGljaCB3aWxsIGJlIHRoZSBzYW1lIGlmIHNpbmd1bGFyIHdvcmQpLiBUaGlzIGlzIGJlY2F1c2UgdGhlIEFQSSBkb2NzIHVzZSBzbmFrZV9jYXNlXG4gICAgIGJ1dCBlYXJseSB2ZXJzaW9ucyBvZiB0aGVzZSBTREtzIHVzZWQgY2FtZWxDYXNlLiBTbyB0byBiZSBiYWNrd2FyZCBjb21wYXRpYmxlIHdlJ2xsIHVzZSBib3RoLiBcbiAgICAqL1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICdjb3VudCc6ICggb3B0c1snY291bnQnXSA/IG9wdHNbJ2NvdW50J10gOiBvcHRzWydjb3VudCddKSxcbiAgICAgICdvZmZzZXQnOiAoIG9wdHNbJ29mZnNldCddID8gb3B0c1snb2Zmc2V0J10gOiBvcHRzWydvZmZzZXQnXSlcbiAgICB9O1xuICAgIHZhciBoZWFkZXJQYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBmb3JtUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgYXV0aE5hbWVzID0gWydiYXNpY0F1dGgnXTtcbiAgICB2YXIgY29udGVudFR5cGVzID0gWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgdmFyIGFjY2VwdHMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJ107XG4gICAgdmFyIHJldHVyblR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQuY2FsbEFwaShcbiAgICAgICcvYWN0aXZpdHktZmVlZC9jaGltcC1jaGF0dGVyJywgJ0dFVCcsXG4gICAgICBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcywgaGVhZGVyUGFyYW1zLCBmb3JtUGFyYW1zLCBwb3N0Qm9keSxcbiAgICAgIGF1dGhOYW1lcywgY29udGVudFR5cGVzLCBhY2NlcHRzLCByZXR1cm5UeXBlXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGxhdGVzdCBjaGltcCBjaGF0dGVyXG4gICAqIFJldHVybiB0aGUgQ2hpbXAgQ2hhdHRlciBmb3IgdGhpcyBhY2NvdW50IG9yZGVyZWQgYnkgbW9zdCByZWNlbnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdHMuY291bnQgVGhlIG51bWJlciBvZiByZWNvcmRzIHRvIHJldHVybi4gRGVmYXVsdCB2YWx1ZSBpcyAxMC4gTWF4aW11bSB2YWx1ZSBpcyAxMDAwIChkZWZhdWx0IHRvIDEwKVxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5vZmZzZXQgVXNlZCBmb3IgW3BhZ2luYXRpb25dKGh0dHBzOi8vbWFpbGNoaW1wLmNvbS9kZXZlbG9wZXIvbWFya2V0aW5nL2RvY3MvbWV0aG9kcy1wYXJhbWV0ZXJzLyNwYWdpbmF0aW9uKSwgdGhpcyBpdCB0aGUgbnVtYmVyIG9mIHJlY29yZHMgZnJvbSBhIGNvbGxlY3Rpb24gdG8gc2tpcC4gRGVmYXVsdCB2YWx1ZSBpcyAwLiAoZGVmYXVsdCB0byAwKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHtAbGluayBodHRwczovL3d3dy5wcm9taXNlanMub3JnL3xQcm9taXNlfSwgd2l0aCBkYXRhIG9mIHR5cGUge0BsaW5rIG1vZHVsZTptb2RlbC9JbmxpbmVSZXNwb25zZTIwMH1cbiAgICovXG4gIHRoaXMuZ2V0Q2hpbXBDaGF0dGVyID0gZnVuY3Rpb24ob3B0cykge1xuICAgIHJldHVybiB0aGlzLmdldENoaW1wQ2hhdHRlcldpdGhIdHRwSW5mbyhvcHRzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VfYW5kX2RhdGEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlX2FuZF9kYXRhLmRhdGE7XG4gICAgICB9KTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ActivityFeedApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * AuthorizedApps service.\n * @module api/AuthorizedAppsApi\n */\n\n/**\n * Constructs a new AuthorizedAppsApi. \n * @alias module:api/AuthorizedAppsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List authorized apps\n   * Get a list of an account's registered, connected applications.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/authorized-apps', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List authorized apps\n   * Get a list of an account's registered, connected applications.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get authorized app info\n   * Get information about a specific authorized application.\n   * @param {String} appId The unique id for the connected authorized application.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002Apps} and HTTP response\n   */\n  this.getWithHttpInfo = function(appId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'appId' is set\n    if (appId === undefined || appId === null) {\n      throw new Error(\"Missing the required parameter 'appId' when calling \");\n    }\n\n    var pathParams = {\n      'app_id': appId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/authorized-apps/{app_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get authorized app info\n   * Get information about a specific authorized application.\n   * @param {String} appId The unique id for the connected authorized application.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002Apps}\n   */\n  this.get = function(appId, opts) {\n    return this.getWithHttpInfo(appId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AuthorizedAppsApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Automations service.\n * @module api/AutomationsApi\n */\n\n/**\n * Constructs a new AutomationsApi. \n * @alias module:api/AutomationsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Archive automation\n   * Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.archiveWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/actions/archive', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Archive automation\n   * Archiving will permanently end your automation and keep the report data. You’ll be able to replicate your archived automation, but you can’t restart it.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.archive = function(workflowId) {\n    return this.archiveWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete workflow email\n   * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete workflow email\n   * Removes an individual classic automation workflow email. Emails from certain workflow types, including the Abandoned Cart Email (abandonedCart) and Product Retargeting Email (abandonedBrowse) Workflows, cannot be deleted.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.deleteWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List automations\n   * Get a summary of an account's classic automations.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Date} opts.beforeCreateTime Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeStartTime Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceStartTime Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.status Restrict the results to automations with the specified status.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'before_create_time': ( opts['beforeCreateTime'] ? opts['beforeCreateTime'] : opts['before_create_time']),\n      'since_create_time': ( opts['sinceCreateTime'] ? opts['sinceCreateTime'] : opts['since_create_time']),\n      'before_start_time': ( opts['beforeStartTime'] ? opts['beforeStartTime'] : opts['before_start_time']),\n      'since_start_time': ( opts['sinceStartTime'] ? opts['sinceStartTime'] : opts['since_start_time']),\n      'status': ( opts['status'] ? opts['status'] : opts['status'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List automations\n   * Get a summary of an account's classic automations.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Date} opts.beforeCreateTime Restrict the response to automations created before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to automations created after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeStartTime Restrict the response to automations started before this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceStartTime Restrict the response to automations started after this time. Uses the ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.status Restrict the results to automations with the specified status.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get automation info\n   * Get a summary of an individual classic automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflow} and HTTP response\n   */\n  this.getWithHttpInfo = function(workflowId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get automation info\n   * Get a summary of an individual classic automation workflow's settings and content. The `trigger_settings` object returns information for the first email in the workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflow}\n   */\n  this.get = function(workflowId, opts) {\n    return this.getWithHttpInfo(workflowId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List automated emails\n   * Get a summary of the emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationEmails} and HTTP response\n   */\n  this.listAllWorkflowEmailsWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List automated emails\n   * Get a summary of the emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationEmails}\n   */\n  this.listAllWorkflowEmails = function(workflowId) {\n    return this.listAllWorkflowEmailsWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get workflow email info\n   * Get information about an individual classic automation workflow email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflowEmail} and HTTP response\n   */\n  this.getWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get workflow email info\n   * Get information about an individual classic automation workflow email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflowEmail}\n   */\n  this.getWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.getWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List automated email subscribers\n   * Get information about a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response\n   */\n  this.getWorkflowEmailSubscriberQueueWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/queue', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List automated email subscribers\n   * Get information about a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}\n   */\n  this.getWorkflowEmailSubscriberQueue = function(workflowId, workflowEmailId) {\n    return this.getWorkflowEmailSubscriberQueueWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get automated email subscriber\n   * Get information about a specific subscriber in a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberInAutomationQueue2} and HTTP response\n   */\n  this.getWorkflowEmailSubscriberWithHttpInfo = function(workflowId, workflowEmailId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/queue/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get automated email subscriber\n   * Get information about a specific subscriber in a classic automation email queue.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberInAutomationQueue2}\n   */\n  this.getWorkflowEmailSubscriber = function(workflowId, workflowEmailId, subscriberHash) {\n    return this.getWorkflowEmailSubscriberWithHttpInfo(workflowId, workflowEmailId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List subscribers removed from workflow\n   * Get information about subscribers who were removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RemovedSubscribers} and HTTP response\n   */\n  this.listWorkflowEmailSubscribersRemovedWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/removed-subscribers', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List subscribers removed from workflow\n   * Get information about subscribers who were removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RemovedSubscribers}\n   */\n  this.listWorkflowEmailSubscribersRemoved = function(workflowId) {\n    return this.listWorkflowEmailSubscribersRemovedWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get subscriber removed from workflow\n   * Get information about a specific subscriber who was removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow} and HTTP response\n   */\n  this.getRemovedWorkflowEmailSubscriberWithHttpInfo = function(workflowId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/removed-subscribers/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get subscriber removed from workflow\n   * Get information about a specific subscriber who was removed from a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow}\n   */\n  this.getRemovedWorkflowEmailSubscriber = function(workflowId, subscriberHash) {\n    return this.getRemovedWorkflowEmailSubscriberWithHttpInfo(workflowId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update workflow email\n   * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/UpdateInformationAboutASpecificWorkflowEmail} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflowEmail} and HTTP response\n   */\n  this.updateWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update workflow email\n   * Update settings for a classic automation workflow email.  Only works with workflows of type: abandonedBrowse, abandonedCart, emailFollowup, or singleWelcome.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/UpdateInformationAboutASpecificWorkflowEmail} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflowEmail}\n   */\n  this.updateWorkflowEmail = function(workflowId, workflowEmailId, body) {\n    return this.updateWorkflowEmailWithHttpInfo(workflowId, workflowEmailId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add automation\n   * Create a new classic automation in your Mailchimp account.\n   * @param {module:model/AutomationWorkflow1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AutomationWorkflow} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add automation\n   * Create a new classic automation in your Mailchimp account.\n   * @param {module:model/AutomationWorkflow1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AutomationWorkflow}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Pause automation emails\n   * Pause all emails in a specific classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.pauseAllEmailsWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/actions/pause-all-emails', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Pause automation emails\n   * Pause all emails in a specific classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.pauseAllEmails = function(workflowId) {\n    return this.pauseAllEmailsWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Start automation emails\n   * Start all emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.startAllEmailsWithHttpInfo = function(workflowId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/actions/start-all-emails', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Start automation emails\n   * Start all emails in a classic automation workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.startAllEmails = function(workflowId) {\n    return this.startAllEmailsWithHttpInfo(workflowId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Pause automated email\n   * Pause an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.pauseWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/actions/pause', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Pause automated email\n   * Pause an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.pauseWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.pauseWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Start automated email\n   * Start an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.startWorkflowEmailWithHttpInfo = function(workflowId, workflowEmailId) {\n    var postBody = null;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/actions/start', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Start automated email\n   * Start an automated email.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.startWorkflowEmail = function(workflowId, workflowEmailId) {\n    return this.startWorkflowEmailWithHttpInfo(workflowId, workflowEmailId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add subscriber to workflow email\n   * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/SubscriberInAutomationQueue1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberInAutomationQueue2} and HTTP response\n   */\n  this.addWorkflowEmailSubscriberWithHttpInfo = function(workflowId, workflowEmailId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'workflowEmailId' is set\n    if (workflowEmailId === undefined || workflowEmailId === null) {\n      throw new Error(\"Missing the required parameter 'workflowEmailId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId,\n      'workflow_email_id': workflowEmailId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/emails/{workflow_email_id}/queue', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add subscriber to workflow email\n   * Manually add a subscriber to a workflow, bypassing the default trigger settings. You can also use this endpoint to trigger a series of automated emails in an API 3.0 workflow type.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {String} workflowEmailId The unique id for the Automation workflow email.\n   * @param {module:model/SubscriberInAutomationQueue1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberInAutomationQueue2}\n   */\n  this.addWorkflowEmailSubscriber = function(workflowId, workflowEmailId, body) {\n    return this.addWorkflowEmailSubscriberWithHttpInfo(workflowId, workflowEmailId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Remove subscriber from workflow\n   * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {module:model/SubscriberInAutomationQueue3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow} and HTTP response\n   */\n  this.removeWorkflowEmailSubscriberWithHttpInfo = function(workflowId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'workflowId' is set\n    if (workflowId === undefined || workflowId === null) {\n      throw new Error(\"Missing the required parameter 'workflowId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'workflow_id': workflowId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/automations/{workflow_id}/removed-subscribers', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Remove subscriber from workflow\n   * Remove a subscriber from a specific classic automation workflow. You can remove a subscriber at any point in an automation workflow, regardless of how many emails they've been sent from that workflow. Once they're removed, they can never be added back to the same workflow.\n   * @param {String} workflowId The unique id for the Automation workflow.\n   * @param {module:model/SubscriberInAutomationQueue3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberRemovedFromAutomationWorkflow}\n   */\n  this.removeWorkflowEmailSubscriber = function(workflowId, body) {\n    return this.removeWorkflowEmailSubscriberWithHttpInfo(workflowId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/AutomationsApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * BatchWebhooks service.\n * @module api/BatchWebhooksApi\n */\n\n/**\n * Constructs a new BatchWebhooksApi. \n * @alias module:api/BatchWebhooksApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete batch webhook\n   * Remove a batch webhook. Webhooks will no longer be sent to the given URL.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(batchWebhookId) {\n    var postBody = null;\n\n    // verify the required parameter 'batchWebhookId' is set\n    if (batchWebhookId === undefined || batchWebhookId === null) {\n      throw new Error(\"Missing the required parameter 'batchWebhookId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_webhook_id': batchWebhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks/{batch_webhook_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete batch webhook\n   * Remove a batch webhook. Webhooks will no longer be sent to the given URL.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(batchWebhookId) {\n    return this.removeWithHttpInfo(batchWebhookId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get batch webhook info\n   * Get information about a specific batch webhook.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhook} and HTTP response\n   */\n  this.getWithHttpInfo = function(batchWebhookId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'batchWebhookId' is set\n    if (batchWebhookId === undefined || batchWebhookId === null) {\n      throw new Error(\"Missing the required parameter 'batchWebhookId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_webhook_id': batchWebhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks/{batch_webhook_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get batch webhook info\n   * Get information about a specific batch webhook.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhook}\n   */\n  this.get = function(batchWebhookId, opts) {\n    return this.getWithHttpInfo(batchWebhookId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List batch webhooks\n   * Get all webhooks that have been configured for batches.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhooks} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List batch webhooks\n   * Get all webhooks that have been configured for batches.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhooks}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update batch webhook\n   * Update a webhook that will fire whenever any batch request completes processing.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {module:model/BatchWebhook2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhook} and HTTP response\n   */\n  this.updateWithHttpInfo = function(batchWebhookId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'batchWebhookId' is set\n    if (batchWebhookId === undefined || batchWebhookId === null) {\n      throw new Error(\"Missing the required parameter 'batchWebhookId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'batch_webhook_id': batchWebhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks/{batch_webhook_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update batch webhook\n   * Update a webhook that will fire whenever any batch request completes processing.\n   * @param {String} batchWebhookId The unique id for the batch webhook.\n   * @param {module:model/BatchWebhook2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhook}\n   */\n  this.update = function(batchWebhookId, body) {\n    return this.updateWithHttpInfo(batchWebhookId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add batch webhook\n   * Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.\n   * @param {module:model/BatchWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchWebhook} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batch-webhooks', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add batch webhook\n   * Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.\n   * @param {module:model/BatchWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchWebhook}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchWebhooksApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Batches service.\n * @module api/BatchesApi\n */\n\n/**\n * Constructs a new BatchesApi. \n * @alias module:api/BatchesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete batch request\n   * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.\n   * @param {String} batchId The unique id for the batch operation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteRequestWithHttpInfo = function(batchId) {\n    var postBody = null;\n\n    // verify the required parameter 'batchId' is set\n    if (batchId === undefined || batchId === null) {\n      throw new Error(\"Missing the required parameter 'batchId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_id': batchId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches/{batch_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete batch request\n   * Stops a batch request from running. Since only one batch request is run at a time, this can be used to cancel a long running request. The results of any completed operations will not be available after this call.\n   * @param {String} batchId The unique id for the batch operation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteRequest = function(batchId) {\n    return this.deleteRequestWithHttpInfo(batchId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List batch requests\n   * Get a summary of batch requests that have been made.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchOperations} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List batch requests\n   * Get a summary of batch requests that have been made.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchOperations}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get batch operation status\n   * Get the status of a batch request.\n   * @param {String} batchId The unique id for the batch operation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Batch} and HTTP response\n   */\n  this.statusWithHttpInfo = function(batchId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'batchId' is set\n    if (batchId === undefined || batchId === null) {\n      throw new Error(\"Missing the required parameter 'batchId' when calling \");\n    }\n\n    var pathParams = {\n      'batch_id': batchId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches/{batch_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get batch operation status\n   * Get the status of a batch request.\n   * @param {String} batchId The unique id for the batch operation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Batch}\n   */\n  this.status = function(batchId, opts) {\n    return this.statusWithHttpInfo(batchId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Start batch operation\n   * Begin processing a batch operations request.\n   * @param {module:model/Body} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Batch} and HTTP response\n   */\n  this.startWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/batches', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Start batch operation\n   * Begin processing a batch operations request.\n   * @param {module:model/Body} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Batch}\n   */\n  this.start = function(body) {\n    return this.startWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/BatchesApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * CampaignFolders service.\n * @module api/CampaignFoldersApi\n */\n\n/**\n * Constructs a new CampaignFoldersApi. \n * @alias module:api/CampaignFoldersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete campaign folder\n   * Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(folderId) {\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders/{folder_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete campaign folder\n   * Delete a specific campaign folder, and mark all the campaigns in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(folderId) {\n    return this.removeWithHttpInfo(folderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign folders\n   * Get all folders used to organize campaigns.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolders} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign folders\n   * Get all folders used to organize campaigns.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolders}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign folder\n   * Get information about a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolder} and HTTP response\n   */\n  this.getWithHttpInfo = function(folderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders/{folder_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign folder\n   * Get information about a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolder}\n   */\n  this.get = function(folderId, opts) {\n    return this.getWithHttpInfo(folderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update campaign folder\n   * Update a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {module:model/CampaignFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolder} and HTTP response\n   */\n  this.updateWithHttpInfo = function(folderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders/{folder_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update campaign folder\n   * Update a specific folder used to organize campaigns.\n   * @param {String} folderId The unique id for the campaign folder.\n   * @param {module:model/CampaignFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolder}\n   */\n  this.update = function(folderId, body) {\n    return this.updateWithHttpInfo(folderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add campaign folder\n   * Create a new campaign folder.\n   * @param {module:model/CampaignFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFolder} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaign-folders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add campaign folder\n   * Create a new campaign folder.\n   * @param {module:model/CampaignFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFolder}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignFoldersApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Campaigns service.\n * @module api/CampaignsApi\n */\n\n/**\n * Constructs a new CampaignsApi. \n * @alias module:api/CampaignsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete campaign\n   * Remove a campaign from your Mailchimp account.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete campaign\n   * Remove a campaign from your Mailchimp account.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(campaignId) {\n    return this.removeWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete campaign feedback message\n   * Remove a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteFeedbackMessageWithHttpInfo = function(campaignId, feedbackId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'feedbackId' is set\n    if (feedbackId === undefined || feedbackId === null) {\n      throw new Error(\"Missing the required parameter 'feedbackId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'feedback_id': feedbackId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback/{feedback_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete campaign feedback message\n   * Remove a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteFeedbackMessage = function(campaignId, feedbackId) {\n    return this.deleteFeedbackMessageWithHttpInfo(campaignId, feedbackId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaigns\n   * Get all campaigns in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {module:model/String} opts.status The status of the campaign.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeCreateTime Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {String} opts.memberId Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'status': ( opts['status'] ? opts['status'] : opts['status']),\n      'before_send_time': ( opts['beforeSendTime'] ? opts['beforeSendTime'] : opts['before_send_time']),\n      'since_send_time': ( opts['sinceSendTime'] ? opts['sinceSendTime'] : opts['since_send_time']),\n      'before_create_time': ( opts['beforeCreateTime'] ? opts['beforeCreateTime'] : opts['before_create_time']),\n      'since_create_time': ( opts['sinceCreateTime'] ? opts['sinceCreateTime'] : opts['since_create_time']),\n      'list_id': ( opts['listId'] ? opts['listId'] : opts['list_id']),\n      'folder_id': ( opts['folderId'] ? opts['folderId'] : opts['folder_id']),\n      'member_id': ( opts['memberId'] ? opts['memberId'] : opts['member_id']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaigns\n   * Get all campaigns in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {module:model/String} opts.status The status of the campaign.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.beforeCreateTime Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceCreateTime Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {String} opts.memberId Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign info\n   * Get information about a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response\n   */\n  this.getWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign info\n   * Get information about a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}\n   */\n  this.get = function(campaignId, opts) {\n    return this.getWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign content\n   * Get the the HTML and plain-text content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignContent} and HTTP response\n   */\n  this.getContentWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/content', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign content\n   * Get the the HTML and plain-text content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignContent}\n   */\n  this.getContent = function(campaignId, opts) {\n    return this.getContentWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign feedback\n   * Get team feedback while you're working together on a Mailchimp campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignReports} and HTTP response\n   */\n  this.getFeedbackWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign feedback\n   * Get team feedback while you're working together on a Mailchimp campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignReports}\n   */\n  this.getFeedback = function(campaignId, opts) {\n    return this.getFeedbackWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign feedback message\n   * Get a specific feedback message from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFeedback2} and HTTP response\n   */\n  this.getFeedbackMessageWithHttpInfo = function(campaignId, feedbackId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'feedbackId' is set\n    if (feedbackId === undefined || feedbackId === null) {\n      throw new Error(\"Missing the required parameter 'feedbackId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'feedback_id': feedbackId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback/{feedback_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign feedback message\n   * Get a specific feedback message from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFeedback2}\n   */\n  this.getFeedbackMessage = function(campaignId, feedbackId, opts) {\n    return this.getFeedbackMessageWithHttpInfo(campaignId, feedbackId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign send checklist\n   * Review the send checklist for a campaign, and resolve any issues before sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendChecklist} and HTTP response\n   */\n  this.getSendChecklistWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/send-checklist', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign send checklist\n   * Review the send checklist for a campaign, and resolve any issues before sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendChecklist}\n   */\n  this.getSendChecklist = function(campaignId, opts) {\n    return this.getSendChecklistWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update campaign settings\n   * Update some or all of the settings for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Campaign2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response\n   */\n  this.updateWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update campaign settings\n   * Update some or all of the settings for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Campaign2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}\n   */\n  this.update = function(campaignId, body) {\n    return this.updateWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update campaign feedback message\n   * Update a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {module:model/CampaignFeedback3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFeedback2} and HTTP response\n   */\n  this.updateFeedbackMessageWithHttpInfo = function(campaignId, feedbackId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'feedbackId' is set\n    if (feedbackId === undefined || feedbackId === null) {\n      throw new Error(\"Missing the required parameter 'feedbackId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'feedback_id': feedbackId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback/{feedback_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update campaign feedback message\n   * Update a specific feedback message for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} feedbackId The unique id for the feedback message.\n   * @param {module:model/CampaignFeedback3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFeedback2}\n   */\n  this.updateFeedbackMessage = function(campaignId, feedbackId, body) {\n    return this.updateFeedbackMessageWithHttpInfo(campaignId, feedbackId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add campaign\n   * Create a new Mailchimp campaign.\n   * @param {module:model/Campaign1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add campaign\n   * Create a new Mailchimp campaign.\n   * @param {module:model/Campaign1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Cancel campaign\n   * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.cancelSendWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/cancel-send', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Cancel campaign\n   * Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.cancelSend = function(campaignId) {\n    return this.cancelSendWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Resend campaign\n   * Creates a Resend to Non-Openers version of this campaign. We will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign3} and HTTP response\n   */\n  this.createResendWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/create-resend', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Resend campaign\n   * Creates a Resend to Non-Openers version of this campaign. We will also check if this campaign meets the criteria for Resend to Non-Openers campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign3}\n   */\n  this.createResend = function(campaignId) {\n    return this.createResendWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Pause rss campaign\n   * Pause an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.pauseWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/pause', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Pause rss campaign\n   * Pause an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.pause = function(campaignId) {\n    return this.pauseWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Replicate campaign\n   * Replicate a campaign in saved or send status.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign3} and HTTP response\n   */\n  this.replicateWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/replicate', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Replicate campaign\n   * Replicate a campaign in saved or send status.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign3}\n   */\n  this.replicate = function(campaignId) {\n    return this.replicateWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Resume rss campaign\n   * Resume an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.resumeWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/resume', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Resume rss campaign\n   * Resume an RSS-Driven campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.resume = function(campaignId) {\n    return this.resumeWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Schedule campaign\n   * Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.scheduleWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/schedule', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Schedule campaign\n   * Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.schedule = function(campaignId, body) {\n    return this.scheduleWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Send campaign\n   * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.sendWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/send', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Send campaign\n   * Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.send = function(campaignId) {\n    return this.sendWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Send test email\n   * Send a test email.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.sendTestEmailWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/test', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Send test email\n   * Send a test email.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/Body2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.sendTestEmail = function(campaignId, body) {\n    return this.sendTestEmailWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Unschedule campaign\n   * Unschedule a scheduled campaign that hasn't started sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.unscheduleWithHttpInfo = function(campaignId) {\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/actions/unschedule', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Unschedule campaign\n   * Unschedule a scheduled campaign that hasn't started sending.\n   * @param {String} campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.unschedule = function(campaignId) {\n    return this.unscheduleWithHttpInfo(campaignId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add campaign feedback\n   * Add feedback on a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignFeedback1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignFeedback2} and HTTP response\n   */\n  this.addFeedbackWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/feedback', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add campaign feedback\n   * Add feedback on a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignFeedback1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignFeedback2}\n   */\n  this.addFeedback = function(campaignId, body) {\n    return this.addFeedbackWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Set campaign content\n   * Set the content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignContent1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignContent} and HTTP response\n   */\n  this.setContentWithHttpInfo = function(campaignId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/campaigns/{campaign_id}/content', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Set campaign content\n   * Set the content for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {module:model/CampaignContent1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignContent}\n   */\n  this.setContent = function(campaignId, body) {\n    return this.setContentWithHttpInfo(campaignId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/CampaignsApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * ConnectedSites service.\n * @module api/ConnectedSitesApi\n */\n\n/**\n * Constructs a new ConnectedSitesApi. \n * @alias module:api/ConnectedSitesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete connected site\n   * Remove a connected site from your Mailchimp account.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(connectedSiteId) {\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete connected site\n   * Remove a connected site from your Mailchimp account.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(connectedSiteId) {\n    return this.removeWithHttpInfo(connectedSiteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List connected sites\n   * Get all connected sites in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSites} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List connected sites\n   * Get all connected sites in an account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSites}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get connected site\n   * Get information about a specific connected site.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSite} and HTTP response\n   */\n  this.getWithHttpInfo = function(connectedSiteId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get connected site\n   * Get information about a specific connected site.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSite}\n   */\n  this.get = function(connectedSiteId, opts) {\n    return this.getWithHttpInfo(connectedSiteId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add connected site\n   * Create a new Mailchimp connected site.\n   * @param {module:model/ConnectedSite1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConnectedSite} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add connected site\n   * Create a new Mailchimp connected site.\n   * @param {module:model/ConnectedSite1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConnectedSite}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Verify connected site script\n   * Verify that the connected sites script has been installed, either via the script URL or fragment.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.verifyScriptInstallationWithHttpInfo = function(connectedSiteId) {\n    var postBody = null;\n\n    // verify the required parameter 'connectedSiteId' is set\n    if (connectedSiteId === undefined || connectedSiteId === null) {\n      throw new Error(\"Missing the required parameter 'connectedSiteId' when calling \");\n    }\n\n    var pathParams = {\n      'connected_site_id': connectedSiteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/connected-sites/{connected_site_id}/actions/verify-script-installation', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Verify connected site script\n   * Verify that the connected sites script has been installed, either via the script URL or fragment.\n   * @param {String} connectedSiteId The unique identifier for the site.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.verifyScriptInstallation = function(connectedSiteId) {\n    return this.verifyScriptInstallationWithHttpInfo(connectedSiteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ConnectedSitesApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Conversations service.\n * @module api/ConversationsApi\n */\n\n/**\n * Constructs a new ConversationsApi. \n * @alias module:api/ConversationsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List conversations\n   * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.hasUnreadMessages Whether the conversation has any unread messages.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TrackedConversations} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'has_unread_messages': ( opts['hasUnreadMessages'] ? opts['hasUnreadMessages'] : opts['has_unread_messages']),\n      'list_id': ( opts['listId'] ? opts['listId'] : opts['list_id']),\n      'campaign_id': ( opts['campaignId'] ? opts['campaignId'] : opts['campaign_id'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List conversations\n   * Get a list of conversations for the account. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.hasUnreadMessages Whether the conversation has any unread messages.\n   * @param {String} opts.listId The unique id for the list.\n   * @param {String} opts.campaignId The unique id for the campaign.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TrackedConversations}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get conversation\n   * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Conversation} and HTTP response\n   */\n  this.getWithHttpInfo = function(conversationId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'conversationId' is set\n    if (conversationId === undefined || conversationId === null) {\n      throw new Error(\"Missing the required parameter 'conversationId' when calling \");\n    }\n\n    var pathParams = {\n      'conversation_id': conversationId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations/{conversation_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get conversation\n   * Get details about an individual conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Conversation}\n   */\n  this.get = function(conversationId, opts) {\n    return this.getWithHttpInfo(conversationId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List messages\n   * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.isRead Whether a conversation message has been marked as read.\n   * @param {Date} opts.beforeTimestamp Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceTimestamp Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfConversationMessages} and HTTP response\n   */\n  this.getConversationMessagesWithHttpInfo = function(conversationId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'conversationId' is set\n    if (conversationId === undefined || conversationId === null) {\n      throw new Error(\"Missing the required parameter 'conversationId' when calling \");\n    }\n\n    var pathParams = {\n      'conversation_id': conversationId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'is_read': ( opts['isRead'] ? opts['isRead'] : opts['is_read']),\n      'before_timestamp': ( opts['beforeTimestamp'] ? opts['beforeTimestamp'] : opts['before_timestamp']),\n      'since_timestamp': ( opts['sinceTimestamp'] ? opts['sinceTimestamp'] : opts['since_timestamp'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations/{conversation_id}/messages', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List messages\n   * Get messages from a specific conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.isRead Whether a conversation message has been marked as read.\n   * @param {Date} opts.beforeTimestamp Restrict the response to messages created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceTimestamp Restrict the response to messages created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfConversationMessages}\n   */\n  this.getConversationMessages = function(conversationId, opts) {\n    return this.getConversationMessagesWithHttpInfo(conversationId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get message\n   * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {String} messageId The unique id for the conversation message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConversationMessage} and HTTP response\n   */\n  this.getConversationMessageWithHttpInfo = function(conversationId, messageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'conversationId' is set\n    if (conversationId === undefined || conversationId === null) {\n      throw new Error(\"Missing the required parameter 'conversationId' when calling \");\n    }\n\n    // verify the required parameter 'messageId' is set\n    if (messageId === undefined || messageId === null) {\n      throw new Error(\"Missing the required parameter 'messageId' when calling \");\n    }\n\n    var pathParams = {\n      'conversation_id': conversationId,\n      'message_id': messageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/conversations/{conversation_id}/messages/{message_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get message\n   * Get an individual message in a conversation. Conversations has been deprecated in favor of Inbox and these endpoints don't include Inbox data. Past Conversations are still available via this endpoint, but new campaign replies and other Inbox messages aren’t available using this endpoint.\n   * @param {String} conversationId The unique id for the conversation.\n   * @param {String} messageId The unique id for the conversation message.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConversationMessage}\n   */\n  this.getConversationMessage = function(conversationId, messageId, opts) {\n    return this.getConversationMessageWithHttpInfo(conversationId, messageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ConversationsApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * CustomerJourneys service.\n * @module api/CustomerJourneysApi\n */\n\n/**\n * Constructs a new CustomerJourneysApi. \n * @alias module:api/CustomerJourneysApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Customer Journeys API trigger for a contact\n   * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.\n   * @param {Number} journeyId The id for the Journey.\n   * @param {Number} stepId The id for the Step.\n   * @param {module:model/SubscriberInCustomerJourneysAudience} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n   */\n  this.triggerWithHttpInfo = function(journeyId, stepId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'journeyId' is set\n    if (journeyId === undefined || journeyId === null) {\n      throw new Error(\"Missing the required parameter 'journeyId' when calling \");\n    }\n\n    // verify the required parameter 'stepId' is set\n    if (stepId === undefined || stepId === null) {\n      throw new Error(\"Missing the required parameter 'stepId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'journey_id': journeyId,\n      'step_id': stepId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/customer-journeys/journeys/{journey_id}/steps/{step_id}/actions/trigger', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Customer Journeys API trigger for a contact\n   * A step trigger in a Customer Journey. To use it, create a starting point or step from the Customer Journey builder in the app using the Customer Journeys API condition. We’ll provide a url during the process that includes the {journey_id} and {step_id}. You’ll then be able to use this endpoint to trigger the condition for the posted contact.\n   * @param {Number} journeyId The id for the Journey.\n   * @param {Number} stepId The id for the Step.\n   * @param {module:model/SubscriberInCustomerJourneysAudience} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n   */\n  this.trigger = function(journeyId, stepId, body) {\n    return this.triggerWithHttpInfo(journeyId, stepId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9hcGkvQ3VzdG9tZXJKb3VybmV5c0FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQSxnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBYzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QixlQUFlLGlDQUFpQztBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdPQUF3TyxZQUFZLEtBQUssUUFBUTtBQUNqUSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsbURBQW1EO0FBQ2hFLGNBQWMsU0FBUyxHQUFHLHlDQUF5QywwQ0FBMEMsY0FBYztBQUMzSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLFdBQVcsUUFBUSxRQUFRO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdPQUF3TyxZQUFZLEtBQUssUUFBUTtBQUNqUSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsbURBQW1EO0FBQ2hFLGNBQWMsU0FBUyxHQUFHLHlDQUF5QyxxQkFBcUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhbXVlXFxEZXNrdG9wXFxCZWF1dHlTb2Z0LWxhbmRpbmdwYWdlXFxub2RlX21vZHVsZXNcXEBtYWlsY2hpbXBcXG1haWxjaGltcF9tYXJrZXRpbmdcXHNyY1xcYXBpXFxDdXN0b21lckpvdXJuZXlzQXBpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNYWlsY2hpbXAgTWFya2V0aW5nIEFQSVxuICogTm8gZGVzY3JpcHRpb24gcHJvdmlkZWQgKGdlbmVyYXRlZCBieSBTd2FnZ2VyIENvZGVnZW4gaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbilcbiAqXG4gKiBPcGVuQVBJIHNwZWMgdmVyc2lvbjogMy4wLjgwXG4gKiBDb250YWN0OiBhcGloZWxwQG1haWxjaGltcC5jb21cbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IHRoZSBzd2FnZ2VyIGNvZGUgZ2VuZXJhdG9yIHByb2dyYW0uXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb2RlZ2VuLmdpdFxuICpcbiAqIFN3YWdnZXIgQ29kZWdlbiB2ZXJzaW9uOiAyLjQuMTJcbiAqXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKlxuICovXG5cblxuXG52YXIgQXBpQ2xpZW50ID0gcmVxdWlyZSgnLi4vQXBpQ2xpZW50Jyk7XG5cbi8qKlxuICogQ3VzdG9tZXJKb3VybmV5cyBzZXJ2aWNlLlxuICogQG1vZHVsZSBhcGkvQ3VzdG9tZXJKb3VybmV5c0FwaVxuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBDdXN0b21lckpvdXJuZXlzQXBpLiBcbiAqIEBhbGlhcyBtb2R1bGU6YXBpL0N1c3RvbWVySm91cm5leXNBcGlcbiAqIEBjbGFzc1xuICogQHBhcmFtIHttb2R1bGU6QXBpQ2xpZW50fSBhcGlDbGllbnQgT3B0aW9uYWwgQVBJIGNsaWVudCBpbXBsZW1lbnRhdGlvbiB0byB1c2UsXG4gKiBkZWZhdWx0IHRvIHtAbGluayBtb2R1bGU6QXBpQ2xpZW50I2luc3RhbmNlfSBpZiB1bnNwZWNpZmllZC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcGlDbGllbnQpIHtcbiAgdGhpcy5hcGlDbGllbnQgPSBhcGlDbGllbnQgfHwgQXBpQ2xpZW50Lmluc3RhbmNlO1xuXG4gIC8qKlxuICAgKiBDdXN0b21lciBKb3VybmV5cyBBUEkgdHJpZ2dlciBmb3IgYSBjb250YWN0XG4gICAqIEEgc3RlcCB0cmlnZ2VyIGluIGEgQ3VzdG9tZXIgSm91cm5leS4gVG8gdXNlIGl0LCBjcmVhdGUgYSBzdGFydGluZyBwb2ludCBvciBzdGVwIGZyb20gdGhlIEN1c3RvbWVyIEpvdXJuZXkgYnVpbGRlciBpbiB0aGUgYXBwIHVzaW5nIHRoZSBDdXN0b21lciBKb3VybmV5cyBBUEkgY29uZGl0aW9uLiBXZeKAmWxsIHByb3ZpZGUgYSB1cmwgZHVyaW5nIHRoZSBwcm9jZXNzIHRoYXQgaW5jbHVkZXMgdGhlIHtqb3VybmV5X2lkfSBhbmQge3N0ZXBfaWR9LiBZb3XigJlsbCB0aGVuIGJlIGFibGUgdG8gdXNlIHRoaXMgZW5kcG9pbnQgdG8gdHJpZ2dlciB0aGUgY29uZGl0aW9uIGZvciB0aGUgcG9zdGVkIGNvbnRhY3QuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBqb3VybmV5SWQgVGhlIGlkIGZvciB0aGUgSm91cm5leS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHN0ZXBJZCBUaGUgaWQgZm9yIHRoZSBTdGVwLlxuICAgKiBAcGFyYW0ge21vZHVsZTptb2RlbC9TdWJzY3JpYmVySW5DdXN0b21lckpvdXJuZXlzQXVkaWVuY2V9IGJvZHkgXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgT2JqZWN0fSBhbmQgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy50cmlnZ2VyV2l0aEh0dHBJbmZvID0gZnVuY3Rpb24oam91cm5leUlkLCBzdGVwSWQsIGJvZHkpIHtcbiAgICB2YXIgcG9zdEJvZHkgPSBib2R5O1xuXG4gICAgLy8gdmVyaWZ5IHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2pvdXJuZXlJZCcgaXMgc2V0XG4gICAgaWYgKGpvdXJuZXlJZCA9PT0gdW5kZWZpbmVkIHx8IGpvdXJuZXlJZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdqb3VybmV5SWQnIHdoZW4gY2FsbGluZyBcIik7XG4gICAgfVxuXG4gICAgLy8gdmVyaWZ5IHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3N0ZXBJZCcgaXMgc2V0XG4gICAgaWYgKHN0ZXBJZCA9PT0gdW5kZWZpbmVkIHx8IHN0ZXBJZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdzdGVwSWQnIHdoZW4gY2FsbGluZyBcIik7XG4gICAgfVxuXG4gICAgLy8gdmVyaWZ5IHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2JvZHknIGlzIHNldFxuICAgIGlmIChib2R5ID09PSB1bmRlZmluZWQgfHwgYm9keSA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdib2R5JyB3aGVuIGNhbGxpbmcgXCIpO1xuICAgIH1cblxuICAgIHZhciBwYXRoUGFyYW1zID0ge1xuICAgICAgJ2pvdXJuZXlfaWQnOiBqb3VybmV5SWQsXG4gICAgICAnc3RlcF9pZCc6IHN0ZXBJZFxuICAgIH07XG4gICAgXG4gICAgLypcbiAgICAgVGhlIGZvbGxvd2luZyBibG9jayBidWlsZGluZyBxdWVyeVBhcmFtcyBpcyBnb2luZyB0byBsb29rIGEgbGl0dGxlIG9kZCwgd2UncmUgZ29pbmcgbG9vayBmb3IgdmFsdWVzIGluICRvcHRzIHdpdGggYm90aFxuICAgICBjYW1lbENhc2UgYW5kIHNuYWtlX2Nhc2UgZm9ybWF0ICh3aGljaCB3aWxsIGJlIHRoZSBzYW1lIGlmIHNpbmd1bGFyIHdvcmQpLiBUaGlzIGlzIGJlY2F1c2UgdGhlIEFQSSBkb2NzIHVzZSBzbmFrZV9jYXNlXG4gICAgIGJ1dCBlYXJseSB2ZXJzaW9ucyBvZiB0aGVzZSBTREtzIHVzZWQgY2FtZWxDYXNlLiBTbyB0byBiZSBiYWNrd2FyZCBjb21wYXRpYmxlIHdlJ2xsIHVzZSBib3RoLiBcbiAgICAqL1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHtcbiAgICB9O1xuICAgIHZhciBoZWFkZXJQYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBmb3JtUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgYXV0aE5hbWVzID0gWydiYXNpY0F1dGgnXTtcbiAgICB2YXIgY29udGVudFR5cGVzID0gWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgdmFyIGFjY2VwdHMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJ107XG4gICAgdmFyIHJldHVyblR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQuY2FsbEFwaShcbiAgICAgICcvY3VzdG9tZXItam91cm5leXMvam91cm5leXMve2pvdXJuZXlfaWR9L3N0ZXBzL3tzdGVwX2lkfS9hY3Rpb25zL3RyaWdnZXInLCAnUE9TVCcsXG4gICAgICBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcywgaGVhZGVyUGFyYW1zLCBmb3JtUGFyYW1zLCBwb3N0Qm9keSxcbiAgICAgIGF1dGhOYW1lcywgY29udGVudFR5cGVzLCBhY2NlcHRzLCByZXR1cm5UeXBlXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogQ3VzdG9tZXIgSm91cm5leXMgQVBJIHRyaWdnZXIgZm9yIGEgY29udGFjdFxuICAgKiBBIHN0ZXAgdHJpZ2dlciBpbiBhIEN1c3RvbWVyIEpvdXJuZXkuIFRvIHVzZSBpdCwgY3JlYXRlIGEgc3RhcnRpbmcgcG9pbnQgb3Igc3RlcCBmcm9tIHRoZSBDdXN0b21lciBKb3VybmV5IGJ1aWxkZXIgaW4gdGhlIGFwcCB1c2luZyB0aGUgQ3VzdG9tZXIgSm91cm5leXMgQVBJIGNvbmRpdGlvbi4gV2XigJlsbCBwcm92aWRlIGEgdXJsIGR1cmluZyB0aGUgcHJvY2VzcyB0aGF0IGluY2x1ZGVzIHRoZSB7am91cm5leV9pZH0gYW5kIHtzdGVwX2lkfS4gWW914oCZbGwgdGhlbiBiZSBhYmxlIHRvIHVzZSB0aGlzIGVuZHBvaW50IHRvIHRyaWdnZXIgdGhlIGNvbmRpdGlvbiBmb3IgdGhlIHBvc3RlZCBjb250YWN0LlxuICAgKiBAcGFyYW0ge051bWJlcn0gam91cm5leUlkIFRoZSBpZCBmb3IgdGhlIEpvdXJuZXkuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzdGVwSWQgVGhlIGlkIGZvciB0aGUgU3RlcC5cbiAgICogQHBhcmFtIHttb2R1bGU6bW9kZWwvU3Vic2NyaWJlckluQ3VzdG9tZXJKb3VybmV5c0F1ZGllbmNlfSBib2R5IFxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHtAbGluayBodHRwczovL3d3dy5wcm9taXNlanMub3JnL3xQcm9taXNlfSwgd2l0aCBkYXRhIG9mIHR5cGUge0BsaW5rIE9iamVjdH1cbiAgICovXG4gIHRoaXMudHJpZ2dlciA9IGZ1bmN0aW9uKGpvdXJuZXlJZCwgc3RlcElkLCBib2R5KSB7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcldpdGhIdHRwSW5mbyhqb3VybmV5SWQsIHN0ZXBJZCwgYm9keSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlX2FuZF9kYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZV9hbmRfZGF0YS5kYXRhO1xuICAgICAgfSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/CustomerJourneysApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Ecommerce service.\n * @module api/EcommerceApi\n */\n\n/**\n * Constructs a new EcommerceApi. \n * @alias module:api/EcommerceApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete store\n   * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.\n   * @param {String} storeId The store id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response\n   */\n  this.deleteStoreWithHttpInfo = function(storeId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete store\n   * Delete a store. Deleting a store will also delete any associated subresources, including Customers, Orders, Products, and Carts.\n   * @param {String} storeId The store id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}\n   */\n  this.deleteStore = function(storeId) {\n    return this.deleteStoreWithHttpInfo(storeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete cart\n   * Delete a cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreCartWithHttpInfo = function(storeId, cartId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete cart\n   * Delete a cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreCart = function(storeId, cartId) {\n    return this.deleteStoreCartWithHttpInfo(storeId, cartId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete cart line item\n   * Delete a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteCartLineItemWithHttpInfo = function(storeId, cartId, lineId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete cart line item\n   * Delete a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteCartLineItem = function(storeId, cartId, lineId) {\n    return this.deleteCartLineItemWithHttpInfo(storeId, cartId, lineId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete customer\n   * Delete a customer from a store.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreCustomerWithHttpInfo = function(storeId, customerId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete customer\n   * Delete a customer from a store.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreCustomer = function(storeId, customerId) {\n    return this.deleteStoreCustomerWithHttpInfo(storeId, customerId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete order\n   * Delete an order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteOrderWithHttpInfo = function(storeId, orderId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete order\n   * Delete an order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteOrder = function(storeId, orderId) {\n    return this.deleteOrderWithHttpInfo(storeId, orderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete order line item\n   * Delete a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteOrderLineItemWithHttpInfo = function(storeId, orderId, lineId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete order line item\n   * Delete a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteOrderLineItem = function(storeId, orderId, lineId) {\n    return this.deleteOrderLineItemWithHttpInfo(storeId, orderId, lineId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product\n   * Delete a product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteStoreProductWithHttpInfo = function(storeId, productId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product\n   * Delete a product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteStoreProduct = function(storeId, productId) {\n    return this.deleteStoreProductWithHttpInfo(storeId, productId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product image\n   * Delete a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteProductImageWithHttpInfo = function(storeId, productId, imageId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product image\n   * Delete a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteProductImage = function(storeId, productId, imageId) {\n    return this.deleteProductImageWithHttpInfo(storeId, productId, imageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete product variant\n   * Delete a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteProductVariantWithHttpInfo = function(storeId, productId, variantId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete product variant\n   * Delete a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteProductVariant = function(storeId, productId, variantId) {\n    return this.deleteProductVariantWithHttpInfo(storeId, productId, variantId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete promo code\n   * Delete a promo code from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete promo code\n   * Delete a promo code from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePromoCode = function(storeId, promoRuleId, promoCodeId) {\n    return this.deletePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete promo rule\n   * Delete a promo rule from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePromoRuleWithHttpInfo = function(storeId, promoRuleId) {\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete promo rule\n   * Delete a promo rule from a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePromoRule = function(storeId, promoRuleId) {\n    return this.deletePromoRuleWithHttpInfo(storeId, promoRuleId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List account orders\n   * Get information about an account's orders.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders} and HTTP response\n   */\n  this.ordersWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'campaign_id': ( opts['campaignId'] ? opts['campaignId'] : opts['campaign_id']),\n      'outreach_id': ( opts['outreachId'] ? opts['outreachId'] : opts['outreach_id']),\n      'customer_id': ( opts['customerId'] ? opts['customerId'] : opts['customer_id']),\n      'has_outreach': ( opts['hasOutreach'] ? opts['hasOutreach'] : opts['has_outreach'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/orders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List account orders\n   * Get information about an account's orders.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders}\n   */\n  this.orders = function(opts) {\n    return this.ordersWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List stores\n   * Get information about all stores in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStores} and HTTP response\n   */\n  this.storesWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List stores\n   * Get information about all stores in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStores}\n   */\n  this.stores = function(opts) {\n    return this.storesWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get store info\n   * Get information about a specific store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.getStoreWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get store info\n   * Get information about a specific store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.getStore = function(storeId, opts) {\n    return this.getStoreWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List carts\n   * Get information about a store's carts.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Carts} and HTTP response\n   */\n  this.getStoreCartsWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List carts\n   * Get information about a store's carts.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Carts}\n   */\n  this.getStoreCarts = function(storeId, opts) {\n    return this.getStoreCartsWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get cart info\n   * Get information about a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.getStoreCartWithHttpInfo = function(storeId, cartId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get cart info\n   * Get information about a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.getStoreCart = function(storeId, cartId, opts) {\n    return this.getStoreCartWithHttpInfo(storeId, cartId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List cart line items\n   * Get information about a cart's line items.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CartLines} and HTTP response\n   */\n  this.getAllCartLineItemsWithHttpInfo = function(storeId, cartId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List cart line items\n   * Get information about a cart's line items.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CartLines}\n   */\n  this.getAllCartLineItems = function(storeId, cartId, opts) {\n    return this.getAllCartLineItemsWithHttpInfo(storeId, cartId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get cart line item\n   * Get information about a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.getCartLineItemWithHttpInfo = function(storeId, cartId, lineId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get cart line item\n   * Get information about a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.getCartLineItem = function(storeId, cartId, lineId, opts) {\n    return this.getCartLineItemWithHttpInfo(storeId, cartId, lineId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List customers\n   * Get information about a store's customers.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailAddress Restrict the response to customers with the email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customers} and HTTP response\n   */\n  this.getAllStoreCustomersWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'email_address': ( opts['emailAddress'] ? opts['emailAddress'] : opts['email_address'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List customers\n   * Get information about a store's customers.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailAddress Restrict the response to customers with the email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customers}\n   */\n  this.getAllStoreCustomers = function(storeId, opts) {\n    return this.getAllStoreCustomersWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get customer info\n   * Get information about a specific customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.getStoreCustomerWithHttpInfo = function(storeId, customerId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get customer info\n   * Get information about a specific customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.getStoreCustomer = function(storeId, customerId, opts) {\n    return this.getStoreCustomerWithHttpInfo(storeId, customerId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List orders\n   * Get information about a store's orders.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders1} and HTTP response\n   */\n  this.getStoreOrdersWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'customer_id': ( opts['customerId'] ? opts['customerId'] : opts['customer_id']),\n      'has_outreach': ( opts['hasOutreach'] ? opts['hasOutreach'] : opts['has_outreach']),\n      'campaign_id': ( opts['campaignId'] ? opts['campaignId'] : opts['campaign_id']),\n      'outreach_id': ( opts['outreachId'] ? opts['outreachId'] : opts['outreach_id'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List orders\n   * Get information about a store's orders.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.customerId Restrict results to orders made by a specific customer.\n   * @param {Boolean} opts.hasOutreach Restrict results to orders that have an outreach attached. For example, an email campaign or Facebook ad.\n   * @param {String} opts.campaignId Restrict results to orders with a specific `campaign_id` value.\n   * @param {String} opts.outreachId Restrict results to orders with a specific `outreach_id` value.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders1}\n   */\n  this.getStoreOrders = function(storeId, opts) {\n    return this.getStoreOrdersWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get order info\n   * Get information about a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.getOrderWithHttpInfo = function(storeId, orderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get order info\n   * Get information about a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.getOrder = function(storeId, orderId, opts) {\n    return this.getOrderWithHttpInfo(storeId, orderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List order line items\n   * Get information about an order's line items.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrderLines} and HTTP response\n   */\n  this.getAllOrderLineItemsWithHttpInfo = function(storeId, orderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List order line items\n   * Get information about an order's line items.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrderLines}\n   */\n  this.getAllOrderLineItems = function(storeId, orderId, opts) {\n    return this.getAllOrderLineItemsWithHttpInfo(storeId, orderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get order line item\n   * Get information about a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.getOrderLineItemWithHttpInfo = function(storeId, orderId, lineId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get order line item\n   * Get information about a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.getOrderLineItem = function(storeId, orderId, lineId, opts) {\n    return this.getOrderLineItemWithHttpInfo(storeId, orderId, lineId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product\n   * Get information about a store's products.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Products} and HTTP response\n   */\n  this.getAllStoreProductsWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product\n   * Get information about a store's products.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Products}\n   */\n  this.getAllStoreProducts = function(storeId, opts) {\n    return this.getAllStoreProductsWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product info\n   * Get information about a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.getStoreProductWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product info\n   * Get information about a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.getStoreProduct = function(storeId, productId, opts) {\n    return this.getStoreProductWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product images\n   * Get information about a product's images.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImages} and HTTP response\n   */\n  this.getProductImagesWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product images\n   * Get information about a product's images.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImages}\n   */\n  this.getProductImages = function(storeId, productId, opts) {\n    return this.getProductImagesWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product image info\n   * Get information about a specific product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.getProductImageWithHttpInfo = function(storeId, productId, imageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product image info\n   * Get information about a specific product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.getProductImage = function(storeId, productId, imageId, opts) {\n    return this.getProductImageWithHttpInfo(storeId, productId, imageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List product variants\n   * Get information about a product's variants.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariants} and HTTP response\n   */\n  this.getProductVariantsWithHttpInfo = function(storeId, productId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List product variants\n   * Get information about a product's variants.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariants}\n   */\n  this.getProductVariants = function(storeId, productId, opts) {\n    return this.getProductVariantsWithHttpInfo(storeId, productId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get product variant info\n   * Get information about a specific product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.getProductVariantWithHttpInfo = function(storeId, productId, variantId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get product variant info\n   * Get information about a specific product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.getProductVariant = function(storeId, productId, variantId, opts) {\n    return this.getProductVariantWithHttpInfo(storeId, productId, variantId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List promo codes\n   * Get information about a store's promo codes.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromoCodes} and HTTP response\n   */\n  this.getPromoCodesWithHttpInfo = function(promoRuleId, storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'promo_rule_id': promoRuleId,\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List promo codes\n   * Get information about a store's promo codes.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromoCodes}\n   */\n  this.getPromoCodes = function(promoRuleId, storeId, opts) {\n    return this.getPromoCodesWithHttpInfo(promoRuleId, storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get promo code\n   * Get information about a specific promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.getPromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get promo code\n   * Get information about a specific promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.getPromoCode = function(storeId, promoRuleId, promoCodeId, opts) {\n    return this.getPromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List promo rules\n   * Get information about a store's promo rules.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PromoRules} and HTTP response\n   */\n  this.listPromoRulesWithHttpInfo = function(storeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List promo rules\n   * Get information about a store's promo rules.\n   * @param {String} storeId The store id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PromoRules}\n   */\n  this.listPromoRules = function(storeId, opts) {\n    return this.listPromoRulesWithHttpInfo(storeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get promo rule\n   * Get information about a specific promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.getPromoRuleWithHttpInfo = function(storeId, promoRuleId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get promo rule\n   * Get information about a specific promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.getPromoRule = function(storeId, promoRuleId, opts) {\n    return this.getPromoRuleWithHttpInfo(storeId, promoRuleId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update store\n   * Update a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceStore2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.updateStoreWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update store\n   * Update a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceStore2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.updateStore = function(storeId, body) {\n    return this.updateStoreWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update cart\n   * Update a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCart2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.updateStoreCartWithHttpInfo = function(storeId, cartId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update cart\n   * Update a specific cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCart2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.updateStoreCart = function(storeId, cartId, body) {\n    return this.updateStoreCartWithHttpInfo(storeId, cartId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update cart line item\n   * Update a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {module:model/EcommerceCartLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.updateCartLineItemWithHttpInfo = function(storeId, cartId, lineId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines/{line_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update cart line item\n   * Update a specific cart line item.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {String} lineId The id for the line item of a cart.\n   * @param {module:model/EcommerceCartLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.updateCartLineItem = function(storeId, cartId, lineId, body) {\n    return this.updateCartLineItemWithHttpInfo(storeId, cartId, lineId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update customer\n   * Update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.updateStoreCustomerWithHttpInfo = function(storeId, customerId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update customer\n   * Update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.updateStoreCustomer = function(storeId, customerId, body) {\n    return this.updateStoreCustomerWithHttpInfo(storeId, customerId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update order\n   * Update a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.updateOrderWithHttpInfo = function(storeId, orderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update order\n   * Update a specific order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.updateOrder = function(storeId, orderId, body) {\n    return this.updateOrderWithHttpInfo(storeId, orderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update order line item\n   * Update a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {module:model/EcommerceOrderLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.updateOrderLineItemWithHttpInfo = function(storeId, orderId, lineId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'lineId' is set\n    if (lineId === undefined || lineId === null) {\n      throw new Error(\"Missing the required parameter 'lineId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId,\n      'line_id': lineId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines/{line_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update order line item\n   * Update a specific order line item.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {String} lineId The id for the line item of an order.\n   * @param {module:model/EcommerceOrderLineItem4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.updateOrderLineItem = function(storeId, orderId, lineId, body) {\n    return this.updateOrderLineItemWithHttpInfo(storeId, orderId, lineId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product\n   * Update a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProduct2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.updateStoreProductWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product\n   * Update a specific product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProduct2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.updateStoreProduct = function(storeId, productId, body) {\n    return this.updateStoreProductWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product image\n   * Update a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {module:model/EcommerceProductImage4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.updateProductImageWithHttpInfo = function(storeId, productId, imageId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'imageId' is set\n    if (imageId === undefined || imageId === null) {\n      throw new Error(\"Missing the required parameter 'imageId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'image_id': imageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images/{image_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product image\n   * Update a product image.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} imageId The id for the product image.\n   * @param {module:model/EcommerceProductImage4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.updateProductImage = function(storeId, productId, imageId, body) {\n    return this.updateProductImageWithHttpInfo(storeId, productId, imageId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update product variant\n   * Update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.updateProductVariantWithHttpInfo = function(storeId, productId, variantId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update product variant\n   * Update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant5} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.updateProductVariant = function(storeId, productId, variantId, body) {\n    return this.updateProductVariantWithHttpInfo(storeId, productId, variantId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update promo code\n   * Update a promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {module:model/EcommercePromoCode2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.updatePromoCodeWithHttpInfo = function(storeId, promoRuleId, promoCodeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'promoCodeId' is set\n    if (promoCodeId === undefined || promoCodeId === null) {\n      throw new Error(\"Missing the required parameter 'promoCodeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId,\n      'promo_code_id': promoCodeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes/{promo_code_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update promo code\n   * Update a promo code.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {String} promoCodeId The id for the promo code of a store.\n   * @param {module:model/EcommercePromoCode2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.updatePromoCode = function(storeId, promoRuleId, promoCodeId, body) {\n    return this.updatePromoCodeWithHttpInfo(storeId, promoRuleId, promoCodeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update promo rule\n   * Update a promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoRule2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.updatePromoRuleWithHttpInfo = function(storeId, promoRuleId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update promo rule\n   * Update a promo rule.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoRule2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.updatePromoRule = function(storeId, promoRuleId, body) {\n    return this.updatePromoRuleWithHttpInfo(storeId, promoRuleId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add store\n   * Add a new store to your Mailchimp account.\n   * @param {module:model/EcommerceStore1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceStore} and HTTP response\n   */\n  this.addStoreWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add store\n   * Add a new store to your Mailchimp account.\n   * @param {module:model/EcommerceStore1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceStore}\n   */\n  this.addStore = function(body) {\n    return this.addStoreWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add cart\n   * Add a new cart to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCart1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCart} and HTTP response\n   */\n  this.addStoreCartWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add cart\n   * Add a new cart to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCart1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCart}\n   */\n  this.addStoreCart = function(storeId, body) {\n    return this.addStoreCartWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add cart line item\n   * Add a new line item to an existing cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCartLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCartLineItem} and HTTP response\n   */\n  this.addCartLineItemWithHttpInfo = function(storeId, cartId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'cartId' is set\n    if (cartId === undefined || cartId === null) {\n      throw new Error(\"Missing the required parameter 'cartId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'cart_id': cartId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/carts/{cart_id}/lines', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add cart line item\n   * Add a new line item to an existing cart.\n   * @param {String} storeId The store id.\n   * @param {String} cartId The id for the cart.\n   * @param {module:model/EcommerceCartLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCartLineItem}\n   */\n  this.addCartLineItem = function(storeId, cartId, body) {\n    return this.addCartLineItemWithHttpInfo(storeId, cartId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add customer\n   * Add a new customer to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCustomer3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.addStoreCustomerWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add customer\n   * Add a new customer to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceCustomer3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.addStoreCustomer = function(storeId, body) {\n    return this.addStoreCustomerWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add order\n   * Add a new order to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceOrder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrder} and HTTP response\n   */\n  this.addStoreOrderWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add order\n   * Add a new order to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceOrder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrder}\n   */\n  this.addStoreOrder = function(storeId, body) {\n    return this.addStoreOrderWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add order line item\n   * Add a new line item to an existing order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrderLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceOrderLineItem} and HTTP response\n   */\n  this.addOrderLineItemWithHttpInfo = function(storeId, orderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'orderId' is set\n    if (orderId === undefined || orderId === null) {\n      throw new Error(\"Missing the required parameter 'orderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'order_id': orderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/orders/{order_id}/lines', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add order line item\n   * Add a new line item to an existing order.\n   * @param {String} storeId The store id.\n   * @param {String} orderId The id for the order in a store.\n   * @param {module:model/EcommerceOrderLineItem3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceOrderLineItem}\n   */\n  this.addOrderLineItem = function(storeId, orderId, body) {\n    return this.addOrderLineItemWithHttpInfo(storeId, orderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product\n   * Add a new product to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceProduct1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProduct} and HTTP response\n   */\n  this.addStoreProductWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product\n   * Add a new product to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommerceProduct1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProduct}\n   */\n  this.addStoreProduct = function(storeId, body) {\n    return this.addStoreProductWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product image\n   * Add a new image to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductImage3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductImage} and HTTP response\n   */\n  this.addProductImageWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/images', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product image\n   * Add a new image to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductImage3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductImage}\n   */\n  this.addProductImage = function(storeId, productId, body) {\n    return this.addProductImageWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add product variant\n   * Add a new variant to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductVariant3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.addProductVariantsWithHttpInfo = function(storeId, productId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add product variant\n   * Add a new variant to the product.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {module:model/EcommerceProductVariant3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.addProductVariants = function(storeId, productId, body) {\n    return this.addProductVariantsWithHttpInfo(storeId, productId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add promo code\n   * Add a new promo code to a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoCode1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoCode} and HTTP response\n   */\n  this.addPromoCodeWithHttpInfo = function(storeId, promoRuleId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'promoRuleId' is set\n    if (promoRuleId === undefined || promoRuleId === null) {\n      throw new Error(\"Missing the required parameter 'promoRuleId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'promo_rule_id': promoRuleId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules/{promo_rule_id}/promo-codes', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add promo code\n   * Add a new promo code to a store.\n   * @param {String} storeId The store id.\n   * @param {String} promoRuleId The id for the promo rule of a store.\n   * @param {module:model/EcommercePromoCode1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoCode}\n   */\n  this.addPromoCode = function(storeId, promoRuleId, body) {\n    return this.addPromoCodeWithHttpInfo(storeId, promoRuleId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add promo rule\n   * Add a new promo rule to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommercePromoRule1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommercePromoRule} and HTTP response\n   */\n  this.addPromoRulesWithHttpInfo = function(storeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/promo-rules', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add promo rule\n   * Add a new promo rule to a store.\n   * @param {String} storeId The store id.\n   * @param {module:model/EcommercePromoRule1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommercePromoRule}\n   */\n  this.addPromoRules = function(storeId, body) {\n    return this.addPromoRulesWithHttpInfo(storeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update customer\n   * Add or update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceCustomer} and HTTP response\n   */\n  this.setStoreCustomerWithHttpInfo = function(storeId, customerId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'customerId' is set\n    if (customerId === undefined || customerId === null) {\n      throw new Error(\"Missing the required parameter 'customerId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'customer_id': customerId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/customers/{customer_id}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update customer\n   * Add or update a customer.\n   * @param {String} storeId The store id.\n   * @param {String} customerId The id for the customer of a store.\n   * @param {module:model/EcommerceCustomer4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceCustomer}\n   */\n  this.setStoreCustomer = function(storeId, customerId, body) {\n    return this.setStoreCustomerWithHttpInfo(storeId, customerId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update product variant\n   * Add or update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EcommerceProductVariant} and HTTP response\n   */\n  this.addProductVariantWithHttpInfo = function(storeId, productId, variantId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'storeId' is set\n    if (storeId === undefined || storeId === null) {\n      throw new Error(\"Missing the required parameter 'storeId' when calling \");\n    }\n\n    // verify the required parameter 'productId' is set\n    if (productId === undefined || productId === null) {\n      throw new Error(\"Missing the required parameter 'productId' when calling \");\n    }\n\n    // verify the required parameter 'variantId' is set\n    if (variantId === undefined || variantId === null) {\n      throw new Error(\"Missing the required parameter 'variantId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'store_id': storeId,\n      'product_id': productId,\n      'variant_id': variantId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ecommerce/stores/{store_id}/products/{product_id}/variants/{variant_id}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update product variant\n   * Add or update a product variant.\n   * @param {String} storeId The store id.\n   * @param {String} productId The id for the product of a store.\n   * @param {String} variantId The id for the product variant.\n   * @param {module:model/EcommerceProductVariant4} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EcommerceProductVariant}\n   */\n  this.addProductVariant = function(storeId, productId, variantId, body) {\n    return this.addProductVariantWithHttpInfo(storeId, productId, variantId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/EcommerceApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * FacebookAds service.\n * @module api/FacebookAdsApi\n */\n\n/**\n * Constructs a new FacebookAdsApi. \n * @alias module:api/FacebookAdsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List facebook ads\n   * Get list of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/facebook-ads', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List facebook ads\n   * Get list of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get facebook ad info\n   * Get details of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009} and HTTP response\n   */\n  this.getAdWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/facebook-ads/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get facebook ad info\n   * Get details of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2009}\n   */\n  this.getAd = function(outreachId, opts) {\n    return this.getAdWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/FacebookAdsApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * FileManager service.\n * @module api/FileManagerApi\n */\n\n/**\n * Constructs a new FileManagerApi. \n * @alias module:api/FileManagerApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete file\n   * Remove a specific file from the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteFileWithHttpInfo = function(fileId) {\n    var postBody = null;\n\n    // verify the required parameter 'fileId' is set\n    if (fileId === undefined || fileId === null) {\n      throw new Error(\"Missing the required parameter 'fileId' when calling \");\n    }\n\n    var pathParams = {\n      'file_id': fileId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files/{file_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete file\n   * Remove a specific file from the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteFile = function(fileId) {\n    return this.deleteFileWithHttpInfo(fileId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete folder\n   * Delete a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteFolderWithHttpInfo = function(folderId) {\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders/{folder_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete folder\n   * Delete a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteFolder = function(folderId) {\n    return this.deleteFolderWithHttpInfo(folderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List stored files\n   * Get a list of available images and files stored in the File Manager for the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The file type for the File Manager file.\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileManager} and HTTP response\n   */\n  this.filesWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'created_by': ( opts['createdBy'] ? opts['createdBy'] : opts['created_by']),\n      'before_created_at': ( opts['beforeCreatedAt'] ? opts['beforeCreatedAt'] : opts['before_created_at']),\n      'since_created_at': ( opts['sinceCreatedAt'] ? opts['sinceCreatedAt'] : opts['since_created_at']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List stored files\n   * Get a list of available images and files stored in the File Manager for the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The file type for the File Manager file.\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileManager}\n   */\n  this.files = function(opts) {\n    return this.filesWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get file\n   * Get information about a specific file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFile} and HTTP response\n   */\n  this.getFileWithHttpInfo = function(fileId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'fileId' is set\n    if (fileId === undefined || fileId === null) {\n      throw new Error(\"Missing the required parameter 'fileId' when calling \");\n    }\n\n    var pathParams = {\n      'file_id': fileId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files/{file_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get file\n   * Get information about a specific file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFile}\n   */\n  this.getFile = function(fileId, opts) {\n    return this.getFileWithHttpInfo(fileId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List folders\n   * Get a list of all folders in the File Manager.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileManagerFolders} and HTTP response\n   */\n  this.listFoldersWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'created_by': ( opts['createdBy'] ? opts['createdBy'] : opts['created_by']),\n      'before_created_at': ( opts['beforeCreatedAt'] ? opts['beforeCreatedAt'] : opts['before_created_at']),\n      'since_created_at': ( opts['sinceCreatedAt'] ? opts['sinceCreatedAt'] : opts['since_created_at'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List folders\n   * Get a list of all folders in the File Manager.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the File Manager file.\n   * @param {String} opts.beforeCreatedAt Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCreatedAt Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileManagerFolders}\n   */\n  this.listFolders = function(opts) {\n    return this.listFoldersWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get folder\n   * Get information about a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFolder} and HTTP response\n   */\n  this.getFolderWithHttpInfo = function(folderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders/{folder_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get folder\n   * Get information about a specific folder in the File Manager.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFolder}\n   */\n  this.getFolder = function(folderId, opts) {\n    return this.getFolderWithHttpInfo(folderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update file\n   * Update a file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {module:model/GalleryFile2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFile} and HTTP response\n   */\n  this.updateFileWithHttpInfo = function(fileId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'fileId' is set\n    if (fileId === undefined || fileId === null) {\n      throw new Error(\"Missing the required parameter 'fileId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'file_id': fileId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files/{file_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update file\n   * Update a file in the File Manager.\n   * @param {String} fileId The unique id for the File Manager file.\n   * @param {module:model/GalleryFile2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFile}\n   */\n  this.updateFile = function(fileId, body) {\n    return this.updateFileWithHttpInfo(fileId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update folder\n   * Update a specific File Manager folder.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {module:model/GalleryFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFolder} and HTTP response\n   */\n  this.updateFolderWithHttpInfo = function(folderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders/{folder_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update folder\n   * Update a specific File Manager folder.\n   * @param {String} folderId The unique id for the File Manager folder.\n   * @param {module:model/GalleryFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFolder}\n   */\n  this.updateFolder = function(folderId, body) {\n    return this.updateFolderWithHttpInfo(folderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add file\n   * Upload a new image or file to the File Manager.\n   * @param {module:model/GalleryFile1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFile} and HTTP response\n   */\n  this.uploadWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/files', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add file\n   * Upload a new image or file to the File Manager.\n   * @param {module:model/GalleryFile1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFile}\n   */\n  this.upload = function(body) {\n    return this.uploadWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add folder\n   * Create a new folder in the File Manager.\n   * @param {module:model/GalleryFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GalleryFolder} and HTTP response\n   */\n  this.createFolderWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/file-manager/folders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add folder\n   * Create a new folder in the File Manager.\n   * @param {module:model/GalleryFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GalleryFolder}\n   */\n  this.createFolder = function(body) {\n    return this.createFolderWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/FileManagerApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * LandingPages service.\n * @module api/LandingPagesApi\n */\n\n/**\n * Constructs a new LandingPagesApi. \n * @alias module:api/LandingPagesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete landing page\n   * Delete a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deletePageWithHttpInfo = function(pageId) {\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete landing page\n   * Delete a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deletePage = function(pageId) {\n    return this.deletePageWithHttpInfo(pageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List landing pages\n   * Get all landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response\n   */\n  this.getAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List landing pages\n   * Get all landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}\n   */\n  this.getAll = function(opts) {\n    return this.getAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get landing page info\n   * Get information about a specific page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPage} and HTTP response\n   */\n  this.getPageWithHttpInfo = function(pageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get landing page info\n   * Get information about a specific page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPage}\n   */\n  this.getPage = function(pageId, opts) {\n    return this.getPageWithHttpInfo(pageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get landing page content\n   * Get the the HTML for your landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPageContent} and HTTP response\n   */\n  this.getPageContentWithHttpInfo = function(pageId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}/content', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get landing page content\n   * Get the the HTML for your landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPageContent}\n   */\n  this.getPageContent = function(pageId, opts) {\n    return this.getPageContentWithHttpInfo(pageId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update landing page\n   * Update a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {module:model/LandingPage2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPage} and HTTP response\n   */\n  this.updatePageWithHttpInfo = function(pageId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update landing page\n   * Update a landing page.\n   * @param {String} pageId The unique id for the page.\n   * @param {module:model/LandingPage2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPage}\n   */\n  this.updatePage = function(pageId, body) {\n    return this.updatePageWithHttpInfo(pageId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add landing page\n   * Create a new Mailchimp landing page.\n   * @param {module:model/LandingPage1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.useDefaultList Will create the Landing Page using the account's Default List instead of requiring a list_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPage} and HTTP response\n   */\n  this.createWithHttpInfo = function(body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'use_default_list': ( opts['useDefaultList'] ? opts['useDefaultList'] : opts['use_default_list'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add landing page\n   * Create a new Mailchimp landing page.\n   * @param {module:model/LandingPage1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.useDefaultList Will create the Landing Page using the account's Default List instead of requiring a list_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPage}\n   */\n  this.create = function(body, opts) {\n    return this.createWithHttpInfo(body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Publish landing page\n   * Publish a landing page that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.publishPageWithHttpInfo = function(pageId) {\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}/actions/publish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Publish landing page\n   * Publish a landing page that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.publishPage = function(pageId) {\n    return this.publishPageWithHttpInfo(pageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Unpublish landing page\n   * Unpublish a landing page that is in draft or has been published.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.unpublishPageWithHttpInfo = function(pageId) {\n    var postBody = null;\n\n    // verify the required parameter 'pageId' is set\n    if (pageId === undefined || pageId === null) {\n      throw new Error(\"Missing the required parameter 'pageId' when calling \");\n    }\n\n    var pathParams = {\n      'page_id': pageId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/landing-pages/{page_id}/actions/unpublish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Unpublish landing page\n   * Unpublish a landing page that is in draft or has been published.\n   * @param {String} pageId The unique id for the page.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.unpublishPage = function(pageId) {\n    return this.unpublishPageWithHttpInfo(pageId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/LandingPagesApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Lists service.\n * @module api/ListsApi\n */\n\n/**\n * Constructs a new ListsApi. \n * @alias module:api/ListsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete list\n   * Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete list\n   * Delete a list from your Mailchimp account. If you delete a list, you'll lose the list history—including subscriber activity, unsubscribes, complaints, and bounces. You’ll also lose subscribers’ email addresses, unless you exported and backed up your list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteList = function(listId) {\n    return this.deleteListWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete interest category\n   * Delete a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteInterestCategoryWithHttpInfo = function(listId, interestCategoryId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete interest category\n   * Delete a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteInterestCategory = function(listId, interestCategoryId) {\n    return this.deleteInterestCategoryWithHttpInfo(listId, interestCategoryId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete interest in category\n   * Delete interests or group names in a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'interestId' is set\n    if (interestId === undefined || interestId === null) {\n      throw new Error(\"Missing the required parameter 'interestId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId,\n      'interest_id': interestId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete interest in category\n   * Delete interests or group names in a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteInterestCategoryInterest = function(listId, interestCategoryId, interestId) {\n    return this.deleteInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Archive list member\n   * Archive a list member. To permanently delete, use the delete-permanent action.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMemberWithHttpInfo = function(listId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Archive list member\n   * Archive a list member. To permanently delete, use the delete-permanent action.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMember = function(listId, subscriberHash) {\n    return this.deleteListMemberWithHttpInfo(listId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete note\n   * Delete a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'noteId' is set\n    if (noteId === undefined || noteId === null) {\n      throw new Error(\"Missing the required parameter 'noteId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash,\n      'note_id': noteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete note\n   * Delete a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMemberNote = function(listId, subscriberHash, noteId) {\n    return this.deleteListMemberNoteWithHttpInfo(listId, subscriberHash, noteId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete merge field\n   * Delete a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMergeFieldWithHttpInfo = function(listId, mergeId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'mergeId' is set\n    if (mergeId === undefined || mergeId === null) {\n      throw new Error(\"Missing the required parameter 'mergeId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'merge_id': mergeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields/{merge_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete merge field\n   * Delete a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMergeField = function(listId, mergeId) {\n    return this.deleteListMergeFieldWithHttpInfo(listId, mergeId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete segment\n   * Delete a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteSegmentWithHttpInfo = function(listId, segmentId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete segment\n   * Delete a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteSegment = function(listId, segmentId) {\n    return this.deleteSegmentWithHttpInfo(listId, segmentId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Remove list member from segment\n   * Remove a member from the specified static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeSegmentMemberWithHttpInfo = function(listId, segmentId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}/members/{subscriber_hash}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Remove list member from segment\n   * Remove a member from the specified static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.removeSegmentMember = function(listId, segmentId, subscriberHash) {\n    return this.removeSegmentMemberWithHttpInfo(listId, segmentId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete webhook\n   * Delete a specific webhook in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListWebhookWithHttpInfo = function(listId, webhookId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'webhookId' is set\n    if (webhookId === undefined || webhookId === null) {\n      throw new Error(\"Missing the required parameter 'webhookId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'webhook_id': webhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks/{webhook_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete webhook\n   * Delete a specific webhook in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListWebhook = function(listId, webhookId) {\n    return this.deleteListWebhookWithHttpInfo(listId, webhookId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List member tags\n   * Get the tags on a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfTags} and HTTP response\n   */\n  this.getListMemberTagsWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/tags', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List member tags\n   * Get the tags on a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfTags}\n   */\n  this.getListMemberTags = function(listId, subscriberHash, opts) {\n    return this.getListMemberTagsWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get lists info\n   * Get information about all lists in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.beforeDateCreated Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceDateCreated Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCampaignLastSent Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCampaignLastSent Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.email Restrict results to lists that include a specific subscriber's email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.hasEcommerceStore Restrict results to lists that contain an active, connected, undeleted ecommerce store.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberLists} and HTTP response\n   */\n  this.getAllListsWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'before_date_created': ( opts['beforeDateCreated'] ? opts['beforeDateCreated'] : opts['before_date_created']),\n      'since_date_created': ( opts['sinceDateCreated'] ? opts['sinceDateCreated'] : opts['since_date_created']),\n      'before_campaign_last_sent': ( opts['beforeCampaignLastSent'] ? opts['beforeCampaignLastSent'] : opts['before_campaign_last_sent']),\n      'since_campaign_last_sent': ( opts['sinceCampaignLastSent'] ? opts['sinceCampaignLastSent'] : opts['since_campaign_last_sent']),\n      'email': ( opts['email'] ? opts['email'] : opts['email']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'has_ecommerce_store': ( opts['hasEcommerceStore'] ? opts['hasEcommerceStore'] : opts['has_ecommerce_store']),\n      'include_total_contacts': ( opts['includeTotalContacts'] ? opts['includeTotalContacts'] : opts['include_total_contacts'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get lists info\n   * Get information about all lists in the account.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.beforeDateCreated Restrict response to lists created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceDateCreated Restrict results to lists created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCampaignLastSent Restrict results to lists created before the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceCampaignLastSent Restrict results to lists created after the last campaign send date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.email Restrict results to lists that include a specific subscriber's email address.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.hasEcommerceStore Restrict results to lists that contain an active, connected, undeleted ecommerce store.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberLists}\n   */\n  this.getAllLists = function(opts) {\n    return this.getAllListsWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get list info\n   * Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberList} and HTTP response\n   */\n  this.getListWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'include_total_contacts': ( opts['includeTotalContacts'] ? opts['includeTotalContacts'] : opts['include_total_contacts'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get list info\n   * Get information about a specific list in your Mailchimp account. Results include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeTotalContacts Return the total_contacts field in the stats response, which contains an approximate count of all contacts in any state.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberList}\n   */\n  this.getList = function(listId, opts) {\n    return this.getListWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List abuse reports\n   * Get all abuse reports for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaints} and HTTP response\n   */\n  this.getListAbuseReportsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/abuse-reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List abuse reports\n   * Get all abuse reports for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaints}\n   */\n  this.getListAbuseReports = function(listId, opts) {\n    return this.getListAbuseReportsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get abuse report\n   * Get details about a specific abuse report.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaint} and HTTP response\n   */\n  this.getListAbuseReportDetailsWithHttpInfo = function(listId, reportId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'reportId' is set\n    if (reportId === undefined || reportId === null) {\n      throw new Error(\"Missing the required parameter 'reportId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'report_id': reportId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/abuse-reports/{report_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get abuse report\n   * Get details about a specific abuse report.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaint}\n   */\n  this.getListAbuseReportDetails = function(listId, reportId, opts) {\n    return this.getListAbuseReportDetailsWithHttpInfo(listId, reportId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List recent activity\n   * Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListActivity} and HTTP response\n   */\n  this.getListRecentActivityWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List recent activity\n   * Get up to the previous 180 days of daily detailed aggregated activity stats for a list, not including Automation activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListActivity}\n   */\n  this.getListRecentActivity = function(listId, opts) {\n    return this.getListRecentActivityWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List top email clients\n   * Get a list of the top email clients based on user-agent strings.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailClients} and HTTP response\n   */\n  this.getListClientsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/clients', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List top email clients\n   * Get a list of the top email clients based on user-agent strings.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailClients}\n   */\n  this.getListClients = function(listId, opts) {\n    return this.getListClientsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List growth history data\n   * Get a month-by-month summary of a specific list's growth activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GrowthHistory} and HTTP response\n   */\n  this.getListGrowthHistoryWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/growth-history', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List growth history data\n   * Get a month-by-month summary of a specific list's growth activity.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GrowthHistory}\n   */\n  this.getListGrowthHistory = function(listId, opts) {\n    return this.getListGrowthHistoryWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get growth history by month\n   * Get a summary of a specific list's growth activity for a specific month and year.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} month A specific month of list growth history.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GrowthHistory} and HTTP response\n   */\n  this.getListGrowthHistoryByMonthWithHttpInfo = function(listId, month, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'month' is set\n    if (month === undefined || month === null) {\n      throw new Error(\"Missing the required parameter 'month' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'month': month\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/growth-history/{month}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get growth history by month\n   * Get a summary of a specific list's growth activity for a specific month and year.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} month A specific month of list growth history.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GrowthHistory}\n   */\n  this.getListGrowthHistoryByMonth = function(listId, month, opts) {\n    return this.getListGrowthHistoryByMonthWithHttpInfo(listId, month, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List interest categories\n   * Get information about a list's interest categories.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Restrict results a type of interest group\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestGroupings} and HTTP response\n   */\n  this.getListInterestCategoriesWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List interest categories\n   * Get information about a list's interest categories.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Restrict results a type of interest group\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestGroupings}\n   */\n  this.getListInterestCategories = function(listId, opts) {\n    return this.getListInterestCategoriesWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get interest category info\n   * Get information about a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestCategory} and HTTP response\n   */\n  this.getInterestCategoryWithHttpInfo = function(listId, interestCategoryId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get interest category info\n   * Get information about a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestCategory}\n   */\n  this.getInterestCategory = function(listId, interestCategoryId, opts) {\n    return this.getInterestCategoryWithHttpInfo(listId, interestCategoryId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List interests in category\n   * Get a list of this category's interests.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interests} and HTTP response\n   */\n  this.listInterestCategoryInterestsWithHttpInfo = function(listId, interestCategoryId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List interests in category\n   * Get a list of this category's interests.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interests}\n   */\n  this.listInterestCategoryInterests = function(listId, interestCategoryId, opts) {\n    return this.listInterestCategoryInterestsWithHttpInfo(listId, interestCategoryId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get interest in category\n   * Get interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interest} and HTTP response\n   */\n  this.getInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'interestId' is set\n    if (interestId === undefined || interestId === null) {\n      throw new Error(\"Missing the required parameter 'interestId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId,\n      'interest_id': interestId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get interest in category\n   * Get interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interest}\n   */\n  this.getInterestCategoryInterest = function(listId, interestCategoryId, interestId, opts) {\n    return this.getInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List locations\n   * Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListLocations} and HTTP response\n   */\n  this.getListLocationsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/locations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List locations\n   * Get the locations (countries) that the list's subscribers have been tagged to based on geocoding their IP address.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListLocations}\n   */\n  this.getListLocations = function(listId, opts) {\n    return this.getListLocationsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List members info\n   * Get information about members in a specific Mailchimp list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailType The email type.\n   * @param {module:model/String} opts.status The subscriber's status.\n   * @param {String} opts.sinceTimestampOpt Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeTimestampOpt Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceLastChanged Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeLastChanged Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.uniqueEmailId A unique identifier for the email address across all Mailchimp lists.\n   * @param {Boolean} opts.vipOnly A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members.\n   * @param {String} opts.interestCategoryId The unique id for the interest category.\n   * @param {String} opts.interestIds Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories.\n   * @param {module:model/String} opts.interestMatch Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. \\\"any\\\" will match a member with any of the interest supplied, \\\"all\\\" will only match members with every interest supplied, and \\\"none\\\" will match members without any of the interest supplied.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.sinceLastCampaign Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter.\n   * @param {String} opts.unsubscribedSince Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.getListMembersInfoWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'email_type': ( opts['emailType'] ? opts['emailType'] : opts['email_type']),\n      'status': ( opts['status'] ? opts['status'] : opts['status']),\n      'since_timestamp_opt': ( opts['sinceTimestampOpt'] ? opts['sinceTimestampOpt'] : opts['since_timestamp_opt']),\n      'before_timestamp_opt': ( opts['beforeTimestampOpt'] ? opts['beforeTimestampOpt'] : opts['before_timestamp_opt']),\n      'since_last_changed': ( opts['sinceLastChanged'] ? opts['sinceLastChanged'] : opts['since_last_changed']),\n      'before_last_changed': ( opts['beforeLastChanged'] ? opts['beforeLastChanged'] : opts['before_last_changed']),\n      'unique_email_id': ( opts['uniqueEmailId'] ? opts['uniqueEmailId'] : opts['unique_email_id']),\n      'vip_only': ( opts['vipOnly'] ? opts['vipOnly'] : opts['vip_only']),\n      'interest_category_id': ( opts['interestCategoryId'] ? opts['interestCategoryId'] : opts['interest_category_id']),\n      'interest_ids': ( opts['interestIds'] ? opts['interestIds'] : opts['interest_ids']),\n      'interest_match': ( opts['interestMatch'] ? opts['interestMatch'] : opts['interest_match']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'since_last_campaign': ( opts['sinceLastCampaign'] ? opts['sinceLastCampaign'] : opts['since_last_campaign']),\n      'unsubscribed_since': ( opts['unsubscribedSince'] ? opts['unsubscribedSince'] : opts['unsubscribed_since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List members info\n   * Get information about members in a specific Mailchimp list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.emailType The email type.\n   * @param {module:model/String} opts.status The subscriber's status.\n   * @param {String} opts.sinceTimestampOpt Restrict results to subscribers who opted-in after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeTimestampOpt Restrict results to subscribers who opted-in before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.sinceLastChanged Restrict results to subscribers whose information changed after the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeLastChanged Restrict results to subscribers whose information changed before the set timeframe. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.uniqueEmailId A unique identifier for the email address across all Mailchimp lists.\n   * @param {Boolean} opts.vipOnly A filter to return only the list's VIP members. Passing `true` will restrict results to VIP list members, passing `false` will return all list members.\n   * @param {String} opts.interestCategoryId The unique id for the interest category.\n   * @param {String} opts.interestIds Used to filter list members by interests. Must be accompanied by interest_category_id and interest_match. The value must be a comma separated list of interest ids present for any supplied interest categories.\n   * @param {module:model/String} opts.interestMatch Used to filter list members by interests. Must be accompanied by interest_category_id and interest_ids. \\\"any\\\" will match a member with any of the interest supplied, \\\"all\\\" will only match members with every interest supplied, and \\\"none\\\" will match members without any of the interest supplied.\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Boolean} opts.sinceLastCampaign Filter subscribers by those subscribed/unsubscribed/pending/cleaned since last email campaign send. Member status is required to use this filter.\n   * @param {String} opts.unsubscribedSince Filter subscribers by those unsubscribed since a specific date. Using any status other than unsubscribed with this filter will result in an error.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.getListMembersInfo = function(listId, opts) {\n    return this.getListMembersInfoWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get member info\n   * Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.getListMemberWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get member info\n   * Get information about a specific list member, including a currently subscribed, unsubscribed, or bounced member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.getListMember = function(listId, subscriberHash, opts) {\n    return this.getListMemberWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * View recent activity 50\n   * Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.action A comma seperated list of actions to return.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberActivityEvents} and HTTP response\n   */\n  this.getListMemberActivityWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'action': this.apiClient.buildCollectionParam(opts['action'] ? opts['action'] : opts['action'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * View recent activity 50\n   * Get the last 50 events of a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.action A comma seperated list of actions to return.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberActivityEvents}\n   */\n  this.getListMemberActivity = function(listId, subscriberHash, opts) {\n    return this.getListMemberActivityWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * View recent activity\n   * Get a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.activityFilters A comma-separated list of activity filters that correspond to a set of activity types, e.g \\\"?activity_filters=open,bounce,click\\\".\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberActivityEvents1} and HTTP response\n   */\n  this.getListMemberActivityFeedWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'activity_filters': this.apiClient.buildCollectionParam(opts['activityFilters'] ? opts['activityFilters'] : opts['activity_filters'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/activity-feed', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * View recent activity\n   * Get a member's activity on a specific list, including opens, clicks, and unsubscribes.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.activityFilters A comma-separated list of activity filters that correspond to a set of activity types, e.g \\\"?activity_filters=open,bounce,click\\\".\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberActivityEvents1}\n   */\n  this.getListMemberActivityFeed = function(listId, subscriberHash, opts) {\n    return this.getListMemberActivityFeedWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List member events\n   * Get events for a contact.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfEvents} and HTTP response\n   */\n  this.getListMemberEventsWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/events', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List member events\n   * Get events for a contact.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfEvents}\n   */\n  this.getListMemberEvents = function(listId, subscriberHash, opts) {\n    return this.getListMemberEventsWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List member goal events\n   * Get the last 50 Goal events for a member on a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfMemberActivityEvents} and HTTP response\n   */\n  this.getListMemberGoalsWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/goals', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List member goal events\n   * Get the last 50 Goal events for a member on a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfMemberActivityEvents}\n   */\n  this.getListMemberGoals = function(listId, subscriberHash, opts) {\n    return this.getListMemberGoalsWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List recent member notes\n   * Get recent notes for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortField Returns notes sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfNotes} and HTTP response\n   */\n  this.getListMemberNotesWithHttpInfo = function(listId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir']),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List recent member notes\n   * Get recent notes for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {module:model/String} opts.sortField Returns notes sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfNotes}\n   */\n  this.getListMemberNotes = function(listId, subscriberHash, opts) {\n    return this.getListMemberNotesWithHttpInfo(listId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get member note\n   * Get a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberNotes} and HTTP response\n   */\n  this.getListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'noteId' is set\n    if (noteId === undefined || noteId === null) {\n      throw new Error(\"Missing the required parameter 'noteId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash,\n      'note_id': noteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get member note\n   * Get a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberNotes}\n   */\n  this.getListMemberNote = function(listId, subscriberHash, noteId, opts) {\n    return this.getListMemberNoteWithHttpInfo(listId, subscriberHash, noteId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List merge fields\n   * Get a list of all merge fields for an audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The merge field type.\n   * @param {Boolean} opts.required Whether it's a required merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfMergeFields} and HTTP response\n   */\n  this.getListMergeFieldsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'required': ( opts['required'] ? opts['required'] : opts['required'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List merge fields\n   * Get a list of all merge fields for an audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type The merge field type.\n   * @param {Boolean} opts.required Whether it's a required merge field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfMergeFields}\n   */\n  this.getListMergeFields = function(listId, opts) {\n    return this.getListMergeFieldsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get merge field\n   * Get information about a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MergeField} and HTTP response\n   */\n  this.getListMergeFieldWithHttpInfo = function(listId, mergeId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'mergeId' is set\n    if (mergeId === undefined || mergeId === null) {\n      throw new Error(\"Missing the required parameter 'mergeId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'merge_id': mergeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields/{merge_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get merge field\n   * Get information about a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MergeField}\n   */\n  this.getListMergeField = function(listId, mergeId, opts) {\n    return this.getListMergeFieldWithHttpInfo(listId, mergeId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get segment info\n   * Get information about a specific segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/List7} and HTTP response\n   */\n  this.getSegmentWithHttpInfo = function(listId, segmentId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'include_cleaned': ( opts['includeCleaned'] ? opts['includeCleaned'] : opts['include_cleaned']),\n      'include_transactional': ( opts['includeTransactional'] ? opts['includeTransactional'] : opts['include_transactional']),\n      'include_unsubscribed': ( opts['includeUnsubscribed'] ? opts['includeUnsubscribed'] : opts['include_unsubscribed'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get segment info\n   * Get information about a specific segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/List7}\n   */\n  this.getSegment = function(listId, segmentId, opts) {\n    return this.getSegmentWithHttpInfo(listId, segmentId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List members in segment\n   * Get information about members in a saved segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SegmentMembers} and HTTP response\n   */\n  this.getSegmentMembersListWithHttpInfo = function(listId, segmentId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'include_cleaned': ( opts['includeCleaned'] ? opts['includeCleaned'] : opts['include_cleaned']),\n      'include_transactional': ( opts['includeTransactional'] ? opts['includeTransactional'] : opts['include_transactional']),\n      'include_unsubscribed': ( opts['includeUnsubscribed'] ? opts['includeUnsubscribed'] : opts['include_unsubscribed'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}/members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List members in segment\n   * Get information about members in a saved segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SegmentMembers}\n   */\n  this.getSegmentMembersList = function(listId, segmentId, opts) {\n    return this.getSegmentMembersListWithHttpInfo(listId, segmentId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List signup forms\n   * Get signup forms for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSignupForms} and HTTP response\n   */\n  this.getListSignupFormsWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/signup-forms', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List signup forms\n   * Get signup forms for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSignupForms}\n   */\n  this.getListSignupForms = function(listId) {\n    return this.getListSignupFormsWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get information about all surveys for a list\n   * Get information about all available surveys for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.getAllSurveysForListWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get information about all surveys for a list\n   * Get information about all available surveys for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.getAllSurveysForList = function(listId) {\n    return this.getAllSurveysForListWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey\n   * Get details about a specific survey.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.getSurveyWithHttpInfo = function(listId, surveyId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'surveyId' is set\n    if (surveyId === undefined || surveyId === null) {\n      throw new Error(\"Missing the required parameter 'surveyId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'survey_id': surveyId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys/{survey_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey\n   * Get details about a specific survey.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.getSurvey = function(listId, surveyId) {\n    return this.getSurveyWithHttpInfo(listId, surveyId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List webhooks\n   * Get information about all webhooks for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.getListWebhooksWithHttpInfo = function(listId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List webhooks\n   * Get information about all webhooks for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.getListWebhooks = function(listId) {\n    return this.getListWebhooksWithHttpInfo(listId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get webhook info\n   * Get information about a specific webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.getListWebhookWithHttpInfo = function(listId, webhookId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'webhookId' is set\n    if (webhookId === undefined || webhookId === null) {\n      throw new Error(\"Missing the required parameter 'webhookId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'webhook_id': webhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks/{webhook_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get webhook info\n   * Get information about a specific webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.getListWebhook = function(listId, webhookId) {\n    return this.getListWebhookWithHttpInfo(listId, webhookId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update lists\n   * Update the settings for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SubscriberList2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberList} and HTTP response\n   */\n  this.updateListWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update lists\n   * Update the settings for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SubscriberList2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberList}\n   */\n  this.updateList = function(listId, body) {\n    return this.updateListWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update interest category\n   * Update a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/InterestCategory2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestCategory} and HTTP response\n   */\n  this.updateInterestCategoryWithHttpInfo = function(listId, interestCategoryId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update interest category\n   * Update a specific interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/InterestCategory2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestCategory}\n   */\n  this.updateInterestCategory = function(listId, interestCategoryId, body) {\n    return this.updateInterestCategoryWithHttpInfo(listId, interestCategoryId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update interest in category\n   * Update interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {module:model/Interest2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interest} and HTTP response\n   */\n  this.updateInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, interestId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'interestId' is set\n    if (interestId === undefined || interestId === null) {\n      throw new Error(\"Missing the required parameter 'interestId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId,\n      'interest_id': interestId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests/{interest_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update interest in category\n   * Update interests or 'group names' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {String} interestId The specific interest or 'group name'.\n   * @param {module:model/Interest2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interest}\n   */\n  this.updateInterestCategoryInterest = function(listId, interestCategoryId, interestId, body) {\n    return this.updateInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, interestId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update list member\n   * Update information for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers3} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.updateListMemberWithHttpInfo = function(listId, subscriberHash, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update list member\n   * Update information for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers3} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.updateListMember = function(listId, subscriberHash, body, opts) {\n    return this.updateListMemberWithHttpInfo(listId, subscriberHash, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update note\n   * Update a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {module:model/MemberNotes2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberNotes} and HTTP response\n   */\n  this.updateListMemberNoteWithHttpInfo = function(listId, subscriberHash, noteId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'noteId' is set\n    if (noteId === undefined || noteId === null) {\n      throw new Error(\"Missing the required parameter 'noteId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash,\n      'note_id': noteId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes/{note_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update note\n   * Update a specific note for a specific list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {String} noteId The id for the note.\n   * @param {module:model/MemberNotes2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberNotes}\n   */\n  this.updateListMemberNote = function(listId, subscriberHash, noteId, body) {\n    return this.updateListMemberNoteWithHttpInfo(listId, subscriberHash, noteId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update merge field\n   * Update a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {module:model/MergeField2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MergeField} and HTTP response\n   */\n  this.updateListMergeFieldWithHttpInfo = function(listId, mergeId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'mergeId' is set\n    if (mergeId === undefined || mergeId === null) {\n      throw new Error(\"Missing the required parameter 'mergeId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'merge_id': mergeId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields/{merge_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update merge field\n   * Update a specific merge field.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} mergeId The id for the merge field.\n   * @param {module:model/MergeField2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MergeField}\n   */\n  this.updateListMergeField = function(listId, mergeId, body) {\n    return this.updateListMergeFieldWithHttpInfo(listId, mergeId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update segment\n   * Update a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/List9} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/List7} and HTTP response\n   */\n  this.updateSegmentWithHttpInfo = function(listId, segmentId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update segment\n   * Update a specific segment in a list.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/List9} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/List7}\n   */\n  this.updateSegment = function(listId, segmentId, body) {\n    return this.updateSegmentWithHttpInfo(listId, segmentId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update webhook\n   * Update the settings for an existing webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @param {module:model/AddWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.updateListWebhookWithHttpInfo = function(listId, webhookId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'webhookId' is set\n    if (webhookId === undefined || webhookId === null) {\n      throw new Error(\"Missing the required parameter 'webhookId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'webhook_id': webhookId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks/{webhook_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update webhook\n   * Update the settings for an existing webhook.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} webhookId The webhook's id.\n   * @param {module:model/AddWebhook1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.updateListWebhook = function(listId, webhookId, body) {\n    return this.updateListWebhookWithHttpInfo(listId, webhookId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add event\n   * Add an event for a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/Events} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.createListMemberEventWithHttpInfo = function(listId, subscriberHash, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/events', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add event\n   * Add an event for a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/Events} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.createListMemberEvent = function(listId, subscriberHash, body) {\n    return this.createListMemberEventWithHttpInfo(listId, subscriberHash, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or remove member tags\n   * Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberTags} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.updateListMemberTagsWithHttpInfo = function(listId, subscriberHash, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/tags', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or remove member tags\n   * Add or remove tags from a list member. If a tag that does not exist is passed in and set as 'active', a new tag will be created.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberTags} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.updateListMemberTags = function(listId, subscriberHash, body) {\n    return this.updateListMemberTagsWithHttpInfo(listId, subscriberHash, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add list\n   * Create a new list in your Mailchimp account.\n   * @param {module:model/SubscriberList1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriberList} and HTTP response\n   */\n  this.createListWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add list\n   * Create a new list in your Mailchimp account.\n   * @param {module:model/SubscriberList1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriberList}\n   */\n  this.createList = function(body) {\n    return this.createListWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Batch subscribe or unsubscribe\n   * Batch subscribe or unsubscribe list members.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MembersToSubscribeUnsubscribeTofromAListInBatch} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @param {Boolean} opts.skipDuplicateCheck If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchUpdateListMembers} and HTTP response\n   */\n  this.batchListMembersWithHttpInfo = function(listId, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation']),\n      'skip_duplicate_check': ( opts['skipDuplicateCheck'] ? opts['skipDuplicateCheck'] : opts['skip_duplicate_check'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Batch subscribe or unsubscribe\n   * Batch subscribe or unsubscribe list members.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MembersToSubscribeUnsubscribeTofromAListInBatch} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @param {Boolean} opts.skipDuplicateCheck If skip_duplicate_check is true, we will ignore duplicates sent in the request when using the batch sub/unsub on the lists endpoint. The status of the first appearance in the request will be saved. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchUpdateListMembers}\n   */\n  this.batchListMembers = function(listId, body, opts) {\n    return this.batchListMembersWithHttpInfo(listId, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add interest category\n   * Create a new interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/InterestCategory1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InterestCategory} and HTTP response\n   */\n  this.createListInterestCategoryWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add interest category\n   * Create a new interest category.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/InterestCategory1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InterestCategory}\n   */\n  this.createListInterestCategory = function(listId, body) {\n    return this.createListInterestCategoryWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add interest in category\n   * Create a new interest or 'group name' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/Interest1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Interest} and HTTP response\n   */\n  this.createInterestCategoryInterestWithHttpInfo = function(listId, interestCategoryId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'interestCategoryId' is set\n    if (interestCategoryId === undefined || interestCategoryId === null) {\n      throw new Error(\"Missing the required parameter 'interestCategoryId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'interest_category_id': interestCategoryId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/interest-categories/{interest_category_id}/interests', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add interest in category\n   * Create a new interest or 'group name' for a specific category.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} interestCategoryId The unique ID for the interest category.\n   * @param {module:model/Interest1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Interest}\n   */\n  this.createInterestCategoryInterest = function(listId, interestCategoryId, body) {\n    return this.createInterestCategoryInterestWithHttpInfo(listId, interestCategoryId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add member to list\n   * Add a new member to the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddListMembers1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.addListMemberWithHttpInfo = function(listId, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add member to list\n   * Add a new member to the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddListMembers1} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.addListMember = function(listId, body, opts) {\n    return this.addListMemberWithHttpInfo(listId, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete list member\n   * Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteListMemberPermanentWithHttpInfo = function(listId, subscriberHash) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/actions/delete-permanent', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete list member\n   * Delete all personally identifiable information related to a list member, and remove them from a list. This will make it impossible to re-import the list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteListMemberPermanent = function(listId, subscriberHash) {\n    return this.deleteListMemberPermanentWithHttpInfo(listId, subscriberHash)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add member note\n   * Add a new note for a specific subscriber.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberNotes1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemberNotes} and HTTP response\n   */\n  this.createListMemberNoteWithHttpInfo = function(listId, subscriberHash, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}/notes', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add member note\n   * Add a new note for a specific subscriber.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {module:model/MemberNotes1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemberNotes}\n   */\n  this.createListMemberNote = function(listId, subscriberHash, body) {\n    return this.createListMemberNoteWithHttpInfo(listId, subscriberHash, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add merge field\n   * Add a new merge field for a specific audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MergeField1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MergeField} and HTTP response\n   */\n  this.addListMergeFieldWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/merge-fields', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add merge field\n   * Add a new merge field for a specific audience.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/MergeField1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MergeField}\n   */\n  this.addListMergeField = function(listId, body) {\n    return this.addListMergeFieldWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add segment\n   * Create a new segment in a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/List8} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/List7} and HTTP response\n   */\n  this.createSegmentWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add segment\n   * Create a new segment in a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/List8} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/List7}\n   */\n  this.createSegment = function(listId, body) {\n    return this.createSegmentWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Batch add or remove members\n   * Batch add/remove list members to static segment\n   * @param {module:model/MembersToAddremoveTofromAStaticSegment} body \n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BatchAddremoveListMembersTofromStaticSegment} and HTTP response\n   */\n  this.batchSegmentMembersWithHttpInfo = function(body, listId, segmentId) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Batch add or remove members\n   * Batch add/remove list members to static segment\n   * @param {module:model/MembersToAddremoveTofromAStaticSegment} body \n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BatchAddremoveListMembersTofromStaticSegment}\n   */\n  this.batchSegmentMembers = function(body, listId, segmentId) {\n    return this.batchSegmentMembersWithHttpInfo(body, listId, segmentId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add member to segment\n   * Add a member to a static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/Body3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers1} and HTTP response\n   */\n  this.createSegmentMemberWithHttpInfo = function(listId, segmentId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'segmentId' is set\n    if (segmentId === undefined || segmentId === null) {\n      throw new Error(\"Missing the required parameter 'segmentId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'segment_id': segmentId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments/{segment_id}/members', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add member to segment\n   * Add a member to a static segment.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} segmentId The unique id for the segment.\n   * @param {module:model/Body3} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers1}\n   */\n  this.createSegmentMember = function(listId, segmentId, body) {\n    return this.createSegmentMemberWithHttpInfo(listId, segmentId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Customize signup form\n   * Customize a list's default signup form.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SignupForm1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignupForm} and HTTP response\n   */\n  this.updateListSignupFormWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/signup-forms', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Customize signup form\n   * Customize a list's default signup form.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/SignupForm1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignupForm}\n   */\n  this.updateListSignupForm = function(listId, body) {\n    return this.updateListSignupFormWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add webhook\n   * Create a new webhook for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddWebhook} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooks} and HTTP response\n   */\n  this.createListWebhookWithHttpInfo = function(listId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/webhooks', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add webhook\n   * Create a new webhook for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {module:model/AddWebhook} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooks}\n   */\n  this.createListWebhook = function(listId, body) {\n    return this.createListWebhookWithHttpInfo(listId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List segments\n   * Get information about all available segments for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Limit results based on segment type.\n   * @param {String} opts.sinceCreatedAt Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCreatedAt Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @param {String} opts.sinceUpdatedAt Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeUpdatedAt Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionOfSegments} and HTTP response\n   */\n  this.listSegmentsWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'since_created_at': ( opts['sinceCreatedAt'] ? opts['sinceCreatedAt'] : opts['since_created_at']),\n      'before_created_at': ( opts['beforeCreatedAt'] ? opts['beforeCreatedAt'] : opts['before_created_at']),\n      'include_cleaned': ( opts['includeCleaned'] ? opts['includeCleaned'] : opts['include_cleaned']),\n      'include_transactional': ( opts['includeTransactional'] ? opts['includeTransactional'] : opts['include_transactional']),\n      'include_unsubscribed': ( opts['includeUnsubscribed'] ? opts['includeUnsubscribed'] : opts['include_unsubscribed']),\n      'since_updated_at': ( opts['sinceUpdatedAt'] ? opts['sinceUpdatedAt'] : opts['since_updated_at']),\n      'before_updated_at': ( opts['beforeUpdatedAt'] ? opts['beforeUpdatedAt'] : opts['before_updated_at'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/segments', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List segments\n   * Get information about all available segments for a specific list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.type Limit results based on segment type.\n   * @param {String} opts.sinceCreatedAt Restrict results to segments created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeCreatedAt Restrict results to segments created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Boolean} opts.includeCleaned Include cleaned members in response\n   * @param {Boolean} opts.includeTransactional Include transactional members in response\n   * @param {Boolean} opts.includeUnsubscribed Include unsubscribed members in response\n   * @param {String} opts.sinceUpdatedAt Restrict results to segments update after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeUpdatedAt Restrict results to segments update before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionOfSegments}\n   */\n  this.listSegments = function(listId, opts) {\n    return this.listSegmentsWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add or update list member\n   * Add or update a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers2} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMembers2} and HTTP response\n   */\n  this.setListMemberWithHttpInfo = function(listId, subscriberHash, body, opts) {\n    opts = opts || {};\n    var postBody = body;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'skip_merge_validation': ( opts['skipMergeValidation'] ? opts['skipMergeValidation'] : opts['skip_merge_validation'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/members/{subscriber_hash}', 'PUT',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add or update list member\n   * Add or update a list member.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address. This endpoint also accepts a list member's email address or contact_id.\n   * @param {module:model/AddListMembers2} body \n   * @param {Object} opts Optional parameters\n   * @param {Boolean} opts.skipMergeValidation If skip_merge_validation is true, member data will be accepted without merge field values, even if the merge field is usually required. This defaults to false.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMembers2}\n   */\n  this.setListMember = function(listId, subscriberHash, body, opts) {\n    return this.setListMemberWithHttpInfo(listId, subscriberHash, body, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Search for tags on a list by name.\n   * Search for tags on a list by name. If no name is provided, will return all tags on the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {String} opts.name The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagSearchResults} and HTTP response\n   */\n  this.tagSearchWithHttpInfo = function(listId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'name': ( opts['name'] ? opts['name'] : opts['name'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/tag-search', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Search for tags on a list by name.\n   * Search for tags on a list by name. If no name is provided, will return all tags on the list.\n   * @param {String} listId The unique ID for the list.\n   * @param {Object} opts Optional parameters\n   * @param {String} opts.name The search query used to filter tags.  The search query will be compared to each tag as a prefix, so all tags that have a name starting with this field will be returned.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagSearchResults}\n   */\n  this.tagSearch = function(listId, opts) {\n    return this.tagSearchWithHttpInfo(listId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ListsApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js":
/*!************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Ping service.\n * @module api/PingApi\n */\n\n/**\n * Constructs a new PingApi. \n * @alias module:api/PingApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Ping\n   * A health check for the API that won't return any account-specific information.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIHealthStatus} and HTTP response\n   */\n  this.getWithHttpInfo = function() {\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/ping', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Ping\n   * A health check for the API that won't return any account-specific information.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIHealthStatus}\n   */\n  this.get = function() {\n    return this.getWithHttpInfo()\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9hcGkvUGluZ0FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQSxnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBYzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QixlQUFlLGlDQUFpQztBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxTQUFTLEdBQUcseUNBQXlDLDBDQUEwQyxvQ0FBb0M7QUFDako7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsU0FBUyxHQUFHLHlDQUF5QyxxQkFBcUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhbXVlXFxEZXNrdG9wXFxCZWF1dHlTb2Z0LWxhbmRpbmdwYWdlXFxub2RlX21vZHVsZXNcXEBtYWlsY2hpbXBcXG1haWxjaGltcF9tYXJrZXRpbmdcXHNyY1xcYXBpXFxQaW5nQXBpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBNYWlsY2hpbXAgTWFya2V0aW5nIEFQSVxuICogTm8gZGVzY3JpcHRpb24gcHJvdmlkZWQgKGdlbmVyYXRlZCBieSBTd2FnZ2VyIENvZGVnZW4gaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbilcbiAqXG4gKiBPcGVuQVBJIHNwZWMgdmVyc2lvbjogMy4wLjgwXG4gKiBDb250YWN0OiBhcGloZWxwQG1haWxjaGltcC5jb21cbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IHRoZSBzd2FnZ2VyIGNvZGUgZ2VuZXJhdG9yIHByb2dyYW0uXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb2RlZ2VuLmdpdFxuICpcbiAqIFN3YWdnZXIgQ29kZWdlbiB2ZXJzaW9uOiAyLjQuMTJcbiAqXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKlxuICovXG5cblxuXG52YXIgQXBpQ2xpZW50ID0gcmVxdWlyZSgnLi4vQXBpQ2xpZW50Jyk7XG5cbi8qKlxuICogUGluZyBzZXJ2aWNlLlxuICogQG1vZHVsZSBhcGkvUGluZ0FwaVxuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBQaW5nQXBpLiBcbiAqIEBhbGlhcyBtb2R1bGU6YXBpL1BpbmdBcGlcbiAqIEBjbGFzc1xuICogQHBhcmFtIHttb2R1bGU6QXBpQ2xpZW50fSBhcGlDbGllbnQgT3B0aW9uYWwgQVBJIGNsaWVudCBpbXBsZW1lbnRhdGlvbiB0byB1c2UsXG4gKiBkZWZhdWx0IHRvIHtAbGluayBtb2R1bGU6QXBpQ2xpZW50I2luc3RhbmNlfSBpZiB1bnNwZWNpZmllZC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcGlDbGllbnQpIHtcbiAgdGhpcy5hcGlDbGllbnQgPSBhcGlDbGllbnQgfHwgQXBpQ2xpZW50Lmluc3RhbmNlO1xuXG4gIC8qKlxuICAgKiBQaW5nXG4gICAqIEEgaGVhbHRoIGNoZWNrIGZvciB0aGUgQVBJIHRoYXQgd29uJ3QgcmV0dXJuIGFueSBhY2NvdW50LXNwZWNpZmljIGluZm9ybWF0aW9uLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHtAbGluayBodHRwczovL3d3dy5wcm9taXNlanMub3JnL3xQcm9taXNlfSwgd2l0aCBhbiBvYmplY3QgY29udGFpbmluZyBkYXRhIG9mIHR5cGUge0BsaW5rIG1vZHVsZTptb2RlbC9BUElIZWFsdGhTdGF0dXN9IGFuZCBIVFRQIHJlc3BvbnNlXG4gICAqL1xuICB0aGlzLmdldFdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwb3N0Qm9keSA9IG51bGw7XG5cbiAgICB2YXIgcGF0aFBhcmFtcyA9IHtcbiAgICB9O1xuICAgIFxuICAgIC8qXG4gICAgIFRoZSBmb2xsb3dpbmcgYmxvY2sgYnVpbGRpbmcgcXVlcnlQYXJhbXMgaXMgZ29pbmcgdG8gbG9vayBhIGxpdHRsZSBvZGQsIHdlJ3JlIGdvaW5nIGxvb2sgZm9yIHZhbHVlcyBpbiAkb3B0cyB3aXRoIGJvdGhcbiAgICAgY2FtZWxDYXNlIGFuZCBzbmFrZV9jYXNlIGZvcm1hdCAod2hpY2ggd2lsbCBiZSB0aGUgc2FtZSBpZiBzaW5ndWxhciB3b3JkKS4gVGhpcyBpcyBiZWNhdXNlIHRoZSBBUEkgZG9jcyB1c2Ugc25ha2VfY2FzZVxuICAgICBidXQgZWFybHkgdmVyc2lvbnMgb2YgdGhlc2UgU0RLcyB1c2VkIGNhbWVsQ2FzZS4gU28gdG8gYmUgYmFja3dhcmQgY29tcGF0aWJsZSB3ZSdsbCB1c2UgYm90aC4gXG4gICAgKi9cbiAgICB2YXIgcXVlcnlQYXJhbXMgPSB7XG4gICAgfTtcbiAgICB2YXIgaGVhZGVyUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgZm9ybVBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGF1dGhOYW1lcyA9IFsnYmFzaWNBdXRoJ107XG4gICAgdmFyIGNvbnRlbnRUeXBlcyA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuICAgIHZhciBhY2NlcHRzID0gWydhcHBsaWNhdGlvbi9qc29uJywgJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbiddO1xuICAgIHZhciByZXR1cm5UeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LmNhbGxBcGkoXG4gICAgICAnL3BpbmcnLCAnR0VUJyxcbiAgICAgIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgYXV0aE5hbWVzLCBjb250ZW50VHlwZXMsIGFjY2VwdHMsIHJldHVyblR5cGVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBQaW5nXG4gICAqIEEgaGVhbHRoIGNoZWNrIGZvciB0aGUgQVBJIHRoYXQgd29uJ3QgcmV0dXJuIGFueSBhY2NvdW50LXNwZWNpZmljIGluZm9ybWF0aW9uLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHtAbGluayBodHRwczovL3d3dy5wcm9taXNlanMub3JnL3xQcm9taXNlfSwgd2l0aCBkYXRhIG9mIHR5cGUge0BsaW5rIG1vZHVsZTptb2RlbC9BUElIZWFsdGhTdGF0dXN9XG4gICAqL1xuICB0aGlzLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFdpdGhIdHRwSW5mbygpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZV9hbmRfZGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2VfYW5kX2RhdGEuZGF0YTtcbiAgICAgIH0pO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/PingApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Reporting service.\n * @module api/ReportingApi\n */\n\n/**\n * Constructs a new ReportingApi. \n * @alias module:api/ReportingApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List facebook ads reports\n   * Get reports of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response\n   */\n  this.getFacebookAdsReportAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/facebook-ads', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List facebook ads reports\n   * Get reports of Facebook ads.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20010}\n   */\n  this.getFacebookAdsReportAll = function(opts) {\n    return this.getFacebookAdsReportAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get facebook ad report\n   * Get report of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response\n   */\n  this.getFacebookAdReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/facebook-ads/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get facebook ad report\n   * Get report of a Facebook ad.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20011}\n   */\n  this.getFacebookAdReport = function(outreachId, opts) {\n    return this.getFacebookAdReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List facebook ecommerce report\n   * Get breakdown of product activity for an outreach.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response\n   */\n  this.getFacebookAdProductActivityReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/facebook-ads/{outreach_id}/ecommerce-product-activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List facebook ecommerce report\n   * Get breakdown of product activity for an outreach.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}\n   */\n  this.getFacebookAdProductActivityReport = function(outreachId, opts) {\n    return this.getFacebookAdProductActivityReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List landing pages reports\n   * Get reports of landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response\n   */\n  this.getLandingPageReportsAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/landing-pages', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List landing pages reports\n   * Get reports of landing pages.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20012}\n   */\n  this.getLandingPageReportsAll = function(opts) {\n    return this.getLandingPageReportsAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get landing page report\n   * Get report of a landing page.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LandingPageReport} and HTTP response\n   */\n  this.getLandingPageReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/landing-pages/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get landing page report\n   * Get report of a landing page.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LandingPageReport}\n   */\n  this.getLandingPageReport = function(outreachId, opts) {\n    return this.getLandingPageReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List survey reports\n   * Get reports for surveys.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20013} and HTTP response\n   */\n  this.getSurveyReportsAllWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List survey reports\n   * Get reports for surveys.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20013}\n   */\n  this.getSurveyReportsAll = function(opts) {\n    return this.getSurveyReportsAllWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey report\n   * Get report for a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyReport} and HTTP response\n   */\n  this.getSurveyReportWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey report\n   * Get report for a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyReport}\n   */\n  this.getSurveyReport = function(outreachId, opts) {\n    return this.getSurveyReportWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List survey question reports\n   * Get reports for survey questions.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response\n   */\n  this.getSurveyQuestionReportsAllWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/questions', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List survey question reports\n   * Get reports for survey questions.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}\n   */\n  this.getSurveyQuestionReportsAll = function(outreachId, opts) {\n    return this.getSurveyQuestionReportsAllWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey question report\n   * Get report for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyQuestionReport} and HTTP response\n   */\n  this.getSurveyQuestionReportWithHttpInfo = function(outreachId, questionId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    // verify the required parameter 'questionId' is set\n    if (questionId === undefined || questionId === null) {\n      throw new Error(\"Missing the required parameter 'questionId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId,\n      'question_id': questionId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/questions/{question_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey question report\n   * Get report for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyQuestionReport}\n   */\n  this.getSurveyQuestionReport = function(outreachId, questionId, opts) {\n    return this.getSurveyQuestionReportWithHttpInfo(outreachId, questionId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List answers for question\n   * Get answers for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20015} and HTTP response\n   */\n  this.getSurveyQuestionAnswersWithHttpInfo = function(outreachId, questionId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    // verify the required parameter 'questionId' is set\n    if (questionId === undefined || questionId === null) {\n      throw new Error(\"Missing the required parameter 'questionId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId,\n      'question_id': questionId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'respondent_familiarity_is': ( opts['respondentFamiliarityIs'] ? opts['respondentFamiliarityIs'] : opts['respondent_familiarity_is'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/questions/{question_id}/answers', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List answers for question\n   * Get answers for a survey question.\n   * @param {String} outreachId The outreach id.\n   * @param {String} questionId The ID of the survey question.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20015}\n   */\n  this.getSurveyQuestionAnswers = function(outreachId, questionId, opts) {\n    return this.getSurveyQuestionAnswersWithHttpInfo(outreachId, questionId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List survey responses\n   * Get responses to a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.answeredQuestion The ID of the question that was answered.\n   * @param {String} opts.choseAnswer The ID of the option chosen to filter responses on.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016} and HTTP response\n   */\n  this.getSurveyResponsesAllWithHttpInfo = function(outreachId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'answered_question': ( opts['answeredQuestion'] ? opts['answeredQuestion'] : opts['answered_question']),\n      'chose_answer': ( opts['choseAnswer'] ? opts['choseAnswer'] : opts['chose_answer']),\n      'respondent_familiarity_is': ( opts['respondentFamiliarityIs'] ? opts['respondentFamiliarityIs'] : opts['respondent_familiarity_is'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/responses', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List survey responses\n   * Get responses to a survey.\n   * @param {String} outreachId The outreach id.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.answeredQuestion The ID of the question that was answered.\n   * @param {String} opts.choseAnswer The ID of the option chosen to filter responses on.\n   * @param {module:model/String} opts.respondentFamiliarityIs Filter survey responses by familiarity of the respondents.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20016}\n   */\n  this.getSurveyResponsesAll = function(outreachId, opts) {\n    return this.getSurveyResponsesAllWithHttpInfo(outreachId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get survey response\n   * Get a single survey response.\n   * @param {String} outreachId The outreach id.\n   * @param {String} responseId The ID of the survey response.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SurveyResponse} and HTTP response\n   */\n  this.getSurveyResponseWithHttpInfo = function(outreachId, responseId) {\n    var postBody = null;\n\n    // verify the required parameter 'outreachId' is set\n    if (outreachId === undefined || outreachId === null) {\n      throw new Error(\"Missing the required parameter 'outreachId' when calling \");\n    }\n\n    // verify the required parameter 'responseId' is set\n    if (responseId === undefined || responseId === null) {\n      throw new Error(\"Missing the required parameter 'responseId' when calling \");\n    }\n\n    var pathParams = {\n      'outreach_id': outreachId,\n      'response_id': responseId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reporting/surveys/{outreach_id}/responses/{response_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get survey response\n   * Get a single survey response.\n   * @param {String} outreachId The outreach id.\n   * @param {String} responseId The ID of the survey response.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SurveyResponse}\n   */\n  this.getSurveyResponse = function(outreachId, responseId) {\n    return this.getSurveyResponseWithHttpInfo(outreachId, responseId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9hcGkvUmVwb3J0aW5nQXBpLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBLGdCQUFnQixtQkFBTyxDQUFDLDBGQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCLGVBQWUsaUNBQWlDO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLHFCQUFxQjtBQUNsQyxhQUFhLHFCQUFxQjtBQUNsQyxjQUFjLFNBQVMsR0FBRyx5Q0FBeUMsMENBQTBDLHdDQUF3QztBQUNySjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLHFCQUFxQjtBQUNsQyxhQUFhLHFCQUFxQjtBQUNsQyxjQUFjLFNBQVMsR0FBRyx5Q0FBeUMscUJBQXFCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixjQUFjLFNBQVMsR0FBRyx5Q0FBeUMsMENBQTBDLHdDQUF3QztBQUNySjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdDQUFnQyxZQUFZO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixjQUFjLFNBQVMsR0FBRyx5Q0FBeUMscUJBQXFCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEscUJBQXFCO0FBQ2xDLGNBQWMsU0FBUyxHQUFHLHlDQUF5QywwQ0FBMEMsdUNBQXVDO0FBQ3BKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDLFlBQVk7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxxQkFBcUI7QUFDbEMsY0FBYyxTQUFTLEdBQUcseUNBQXlDLHFCQUFxQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsU0FBUyxHQUFHLHlDQUF5QywwQ0FBMEMsd0NBQXdDO0FBQ3JKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxTQUFTLEdBQUcseUNBQXlDLHFCQUFxQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsY0FBYyxTQUFTLEdBQUcseUNBQXlDLDBDQUEwQyxzQ0FBc0M7QUFDbko7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsWUFBWTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsY0FBYyxTQUFTLEdBQUcseUNBQXlDLHFCQUFxQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsU0FBUyxHQUFHLHlDQUF5QywwQ0FBMEMsd0NBQXdDO0FBQ3JKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxTQUFTLEdBQUcseUNBQXlDLHFCQUFxQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsY0FBYyxTQUFTLEdBQUcseUNBQXlDLDBDQUEwQyxpQ0FBaUM7QUFDOUk7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkIsWUFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsY0FBYyxTQUFTLEdBQUcseUNBQXlDLHFCQUFxQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsY0FBYyxTQUFTLEdBQUcseUNBQXlDLDBDQUEwQyx3Q0FBd0M7QUFDcko7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkIsWUFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsY0FBYyxTQUFTLEdBQUcseUNBQXlDLHFCQUFxQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsZ0JBQWdCO0FBQzdCLGNBQWMsU0FBUyxHQUFHLHlDQUF5QywwQ0FBMEMseUNBQXlDO0FBQ3RKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkIsWUFBWSxZQUFZLFlBQVk7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixjQUFjLFNBQVMsR0FBRyx5Q0FBeUMscUJBQXFCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxxQkFBcUI7QUFDbEMsY0FBYyxTQUFTLEdBQUcseUNBQXlDLDBDQUEwQyx3Q0FBd0M7QUFDcko7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLFlBQVksWUFBWSxZQUFZO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxxQkFBcUI7QUFDbEMsY0FBYyxTQUFTLEdBQUcseUNBQXlDLHFCQUFxQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLHFCQUFxQjtBQUNsQyxjQUFjLFNBQVMsR0FBRyx5Q0FBeUMsMENBQTBDLHdDQUF3QztBQUNySjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQixZQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEscUJBQXFCO0FBQ2xDLGNBQWMsU0FBUyxHQUFHLHlDQUF5QyxxQkFBcUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsU0FBUyxHQUFHLHlDQUF5QywwQ0FBMEMsbUNBQW1DO0FBQ2hKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkIsWUFBWSxZQUFZLFlBQVk7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsU0FBUyxHQUFHLHlDQUF5QyxxQkFBcUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhbXVlXFxEZXNrdG9wXFxCZWF1dHlTb2Z0LWxhbmRpbmdwYWdlXFxub2RlX21vZHVsZXNcXEBtYWlsY2hpbXBcXG1haWxjaGltcF9tYXJrZXRpbmdcXHNyY1xcYXBpXFxSZXBvcnRpbmdBcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1haWxjaGltcCBNYXJrZXRpbmcgQVBJXG4gKiBObyBkZXNjcmlwdGlvbiBwcm92aWRlZCAoZ2VuZXJhdGVkIGJ5IFN3YWdnZXIgQ29kZWdlbiBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb2RlZ2VuKVxuICpcbiAqIE9wZW5BUEkgc3BlYyB2ZXJzaW9uOiAzLjAuODBcbiAqIENvbnRhY3Q6IGFwaWhlbHBAbWFpbGNoaW1wLmNvbVxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgdGhlIHN3YWdnZXIgY29kZSBnZW5lcmF0b3IgcHJvZ3JhbS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4uZ2l0XG4gKlxuICogU3dhZ2dlciBDb2RlZ2VuIHZlcnNpb246IDIuNC4xMlxuICpcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqXG4gKi9cblxuXG5cbnZhciBBcGlDbGllbnQgPSByZXF1aXJlKCcuLi9BcGlDbGllbnQnKTtcblxuLyoqXG4gKiBSZXBvcnRpbmcgc2VydmljZS5cbiAqIEBtb2R1bGUgYXBpL1JlcG9ydGluZ0FwaVxuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBSZXBvcnRpbmdBcGkuIFxuICogQGFsaWFzIG1vZHVsZTphcGkvUmVwb3J0aW5nQXBpXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7bW9kdWxlOkFwaUNsaWVudH0gYXBpQ2xpZW50IE9wdGlvbmFsIEFQSSBjbGllbnQgaW1wbGVtZW50YXRpb24gdG8gdXNlLFxuICogZGVmYXVsdCB0byB7QGxpbmsgbW9kdWxlOkFwaUNsaWVudCNpbnN0YW5jZX0gaWYgdW5zcGVjaWZpZWQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXBpQ2xpZW50KSB7XG4gIHRoaXMuYXBpQ2xpZW50ID0gYXBpQ2xpZW50IHx8IEFwaUNsaWVudC5pbnN0YW5jZTtcblxuICAvKipcbiAgICogTGlzdCBmYWNlYm9vayBhZHMgcmVwb3J0c1xuICAgKiBHZXQgcmVwb3J0cyBvZiBGYWNlYm9vayBhZHMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5jb3VudCBUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gcmV0dXJuLiBEZWZhdWx0IHZhbHVlIGlzIDEwLiBNYXhpbXVtIHZhbHVlIGlzIDEwMDAgKGRlZmF1bHQgdG8gMTApXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLm9mZnNldCBVc2VkIGZvciBbcGFnaW5hdGlvbl0oaHR0cHM6Ly9tYWlsY2hpbXAuY29tL2RldmVsb3Blci9tYXJrZXRpbmcvZG9jcy9tZXRob2RzLXBhcmFtZXRlcnMvI3BhZ2luYXRpb24pLCB0aGlzIGl0IHRoZSBudW1iZXIgb2YgcmVjb3JkcyBmcm9tIGEgY29sbGVjdGlvbiB0byBza2lwLiBEZWZhdWx0IHZhbHVlIGlzIDAuIChkZWZhdWx0IHRvIDApXG4gICAqIEBwYXJhbSB7bW9kdWxlOm1vZGVsL1N0cmluZ30gb3B0cy5zb3J0RmllbGQgUmV0dXJucyBmaWxlcyBzb3J0ZWQgYnkgdGhlIHNwZWNpZmllZCBmaWVsZC5cbiAgICogQHBhcmFtIHttb2R1bGU6bW9kZWwvU3RyaW5nfSBvcHRzLnNvcnREaXIgRGV0ZXJtaW5lcyB0aGUgb3JkZXIgZGlyZWN0aW9uIGZvciBzb3J0ZWQgcmVzdWx0cy5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvSW5saW5lUmVzcG9uc2UyMDAxMH0gYW5kIEhUVFAgcmVzcG9uc2VcbiAgICovXG4gIHRoaXMuZ2V0RmFjZWJvb2tBZHNSZXBvcnRBbGxXaXRoSHR0cEluZm8gPSBmdW5jdGlvbihvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdmFyIHBvc3RCb2R5ID0gbnVsbDtcblxuICAgIHZhciBwYXRoUGFyYW1zID0ge1xuICAgIH07XG4gICAgXG4gICAgLypcbiAgICAgVGhlIGZvbGxvd2luZyBibG9jayBidWlsZGluZyBxdWVyeVBhcmFtcyBpcyBnb2luZyB0byBsb29rIGEgbGl0dGxlIG9kZCwgd2UncmUgZ29pbmcgbG9vayBmb3IgdmFsdWVzIGluICRvcHRzIHdpdGggYm90aFxuICAgICBjYW1lbENhc2UgYW5kIHNuYWtlX2Nhc2UgZm9ybWF0ICh3aGljaCB3aWxsIGJlIHRoZSBzYW1lIGlmIHNpbmd1bGFyIHdvcmQpLiBUaGlzIGlzIGJlY2F1c2UgdGhlIEFQSSBkb2NzIHVzZSBzbmFrZV9jYXNlXG4gICAgIGJ1dCBlYXJseSB2ZXJzaW9ucyBvZiB0aGVzZSBTREtzIHVzZWQgY2FtZWxDYXNlLiBTbyB0byBiZSBiYWNrd2FyZCBjb21wYXRpYmxlIHdlJ2xsIHVzZSBib3RoLiBcbiAgICAqL1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICdmaWVsZHMnOiB0aGlzLmFwaUNsaWVudC5idWlsZENvbGxlY3Rpb25QYXJhbShvcHRzWydmaWVsZHMnXSA/IG9wdHNbJ2ZpZWxkcyddIDogb3B0c1snZmllbGRzJ10sICdjc3YnKSxcbiAgICAgICdleGNsdWRlX2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2V4Y2x1ZGVGaWVsZHMnXSA/IG9wdHNbJ2V4Y2x1ZGVGaWVsZHMnXSA6IG9wdHNbJ2V4Y2x1ZGVfZmllbGRzJ10sICdjc3YnKSxcbiAgICAgICdjb3VudCc6ICggb3B0c1snY291bnQnXSA/IG9wdHNbJ2NvdW50J10gOiBvcHRzWydjb3VudCddKSxcbiAgICAgICdvZmZzZXQnOiAoIG9wdHNbJ29mZnNldCddID8gb3B0c1snb2Zmc2V0J10gOiBvcHRzWydvZmZzZXQnXSksXG4gICAgICAnc29ydF9maWVsZCc6ICggb3B0c1snc29ydEZpZWxkJ10gPyBvcHRzWydzb3J0RmllbGQnXSA6IG9wdHNbJ3NvcnRfZmllbGQnXSksXG4gICAgICAnc29ydF9kaXInOiAoIG9wdHNbJ3NvcnREaXInXSA/IG9wdHNbJ3NvcnREaXInXSA6IG9wdHNbJ3NvcnRfZGlyJ10pXG4gICAgfTtcbiAgICB2YXIgaGVhZGVyUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgZm9ybVBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGF1dGhOYW1lcyA9IFsnYmFzaWNBdXRoJ107XG4gICAgdmFyIGNvbnRlbnRUeXBlcyA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuICAgIHZhciBhY2NlcHRzID0gWydhcHBsaWNhdGlvbi9qc29uJywgJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbiddO1xuICAgIHZhciByZXR1cm5UeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LmNhbGxBcGkoXG4gICAgICAnL3JlcG9ydGluZy9mYWNlYm9vay1hZHMnLCAnR0VUJyxcbiAgICAgIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgYXV0aE5hbWVzLCBjb250ZW50VHlwZXMsIGFjY2VwdHMsIHJldHVyblR5cGVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0IGZhY2Vib29rIGFkcyByZXBvcnRzXG4gICAqIEdldCByZXBvcnRzIG9mIEZhY2Vib29rIGFkcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byByZXR1cm4uIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmV4Y2x1ZGVGaWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gZXhjbHVkZS4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLmNvdW50IFRoZSBudW1iZXIgb2YgcmVjb3JkcyB0byByZXR1cm4uIERlZmF1bHQgdmFsdWUgaXMgMTAuIE1heGltdW0gdmFsdWUgaXMgMTAwMCAoZGVmYXVsdCB0byAxMClcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdHMub2Zmc2V0IFVzZWQgZm9yIFtwYWdpbmF0aW9uXShodHRwczovL21haWxjaGltcC5jb20vZGV2ZWxvcGVyL21hcmtldGluZy9kb2NzL21ldGhvZHMtcGFyYW1ldGVycy8jcGFnaW5hdGlvbiksIHRoaXMgaXQgdGhlIG51bWJlciBvZiByZWNvcmRzIGZyb20gYSBjb2xsZWN0aW9uIHRvIHNraXAuIERlZmF1bHQgdmFsdWUgaXMgMC4gKGRlZmF1bHQgdG8gMClcbiAgICogQHBhcmFtIHttb2R1bGU6bW9kZWwvU3RyaW5nfSBvcHRzLnNvcnRGaWVsZCBSZXR1cm5zIGZpbGVzIHNvcnRlZCBieSB0aGUgc3BlY2lmaWVkIGZpZWxkLlxuICAgKiBAcGFyYW0ge21vZHVsZTptb2RlbC9TdHJpbmd9IG9wdHMuc29ydERpciBEZXRlcm1pbmVzIHRoZSBvcmRlciBkaXJlY3Rpb24gZm9yIHNvcnRlZCByZXN1bHRzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHtAbGluayBodHRwczovL3d3dy5wcm9taXNlanMub3JnL3xQcm9taXNlfSwgd2l0aCBkYXRhIG9mIHR5cGUge0BsaW5rIG1vZHVsZTptb2RlbC9JbmxpbmVSZXNwb25zZTIwMDEwfVxuICAgKi9cbiAgdGhpcy5nZXRGYWNlYm9va0Fkc1JlcG9ydEFsbCA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRGYWNlYm9va0Fkc1JlcG9ydEFsbFdpdGhIdHRwSW5mbyhvcHRzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VfYW5kX2RhdGEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlX2FuZF9kYXRhLmRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZmFjZWJvb2sgYWQgcmVwb3J0XG4gICAqIEdldCByZXBvcnQgb2YgYSBGYWNlYm9vayBhZC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvSW5saW5lUmVzcG9uc2UyMDAxMX0gYW5kIEhUVFAgcmVzcG9uc2VcbiAgICovXG4gIHRoaXMuZ2V0RmFjZWJvb2tBZFJlcG9ydFdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKG91dHJlYWNoSWQsIG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgcG9zdEJvZHkgPSBudWxsO1xuXG4gICAgLy8gdmVyaWZ5IHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ291dHJlYWNoSWQnIGlzIHNldFxuICAgIGlmIChvdXRyZWFjaElkID09PSB1bmRlZmluZWQgfHwgb3V0cmVhY2hJZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdvdXRyZWFjaElkJyB3aGVuIGNhbGxpbmcgXCIpO1xuICAgIH1cblxuICAgIHZhciBwYXRoUGFyYW1zID0ge1xuICAgICAgJ291dHJlYWNoX2lkJzogb3V0cmVhY2hJZFxuICAgIH07XG4gICAgXG4gICAgLypcbiAgICAgVGhlIGZvbGxvd2luZyBibG9jayBidWlsZGluZyBxdWVyeVBhcmFtcyBpcyBnb2luZyB0byBsb29rIGEgbGl0dGxlIG9kZCwgd2UncmUgZ29pbmcgbG9vayBmb3IgdmFsdWVzIGluICRvcHRzIHdpdGggYm90aFxuICAgICBjYW1lbENhc2UgYW5kIHNuYWtlX2Nhc2UgZm9ybWF0ICh3aGljaCB3aWxsIGJlIHRoZSBzYW1lIGlmIHNpbmd1bGFyIHdvcmQpLiBUaGlzIGlzIGJlY2F1c2UgdGhlIEFQSSBkb2NzIHVzZSBzbmFrZV9jYXNlXG4gICAgIGJ1dCBlYXJseSB2ZXJzaW9ucyBvZiB0aGVzZSBTREtzIHVzZWQgY2FtZWxDYXNlLiBTbyB0byBiZSBiYWNrd2FyZCBjb21wYXRpYmxlIHdlJ2xsIHVzZSBib3RoLiBcbiAgICAqL1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICdmaWVsZHMnOiB0aGlzLmFwaUNsaWVudC5idWlsZENvbGxlY3Rpb25QYXJhbShvcHRzWydmaWVsZHMnXSA/IG9wdHNbJ2ZpZWxkcyddIDogb3B0c1snZmllbGRzJ10sICdjc3YnKSxcbiAgICAgICdleGNsdWRlX2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2V4Y2x1ZGVGaWVsZHMnXSA/IG9wdHNbJ2V4Y2x1ZGVGaWVsZHMnXSA6IG9wdHNbJ2V4Y2x1ZGVfZmllbGRzJ10sICdjc3YnKVxuICAgIH07XG4gICAgdmFyIGhlYWRlclBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGZvcm1QYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBhdXRoTmFtZXMgPSBbJ2Jhc2ljQXV0aCddO1xuICAgIHZhciBjb250ZW50VHlwZXMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICB2YXIgYWNjZXB0cyA9IFsnYXBwbGljYXRpb24vanNvbicsICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nXTtcbiAgICB2YXIgcmV0dXJuVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgIHJldHVybiB0aGlzLmFwaUNsaWVudC5jYWxsQXBpKFxuICAgICAgJy9yZXBvcnRpbmcvZmFjZWJvb2stYWRzL3tvdXRyZWFjaF9pZH0nLCAnR0VUJyxcbiAgICAgIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgYXV0aE5hbWVzLCBjb250ZW50VHlwZXMsIGFjY2VwdHMsIHJldHVyblR5cGVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgZmFjZWJvb2sgYWQgcmVwb3J0XG4gICAqIEdldCByZXBvcnQgb2YgYSBGYWNlYm9vayBhZC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvSW5saW5lUmVzcG9uc2UyMDAxMX1cbiAgICovXG4gIHRoaXMuZ2V0RmFjZWJvb2tBZFJlcG9ydCA9IGZ1bmN0aW9uKG91dHJlYWNoSWQsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRGYWNlYm9va0FkUmVwb3J0V2l0aEh0dHBJbmZvKG91dHJlYWNoSWQsIG9wdHMpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZV9hbmRfZGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2VfYW5kX2RhdGEuZGF0YTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgZmFjZWJvb2sgZWNvbW1lcmNlIHJlcG9ydFxuICAgKiBHZXQgYnJlYWtkb3duIG9mIHByb2R1Y3QgYWN0aXZpdHkgZm9yIGFuIG91dHJlYWNoLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gb3V0cmVhY2hJZCBUaGUgb3V0cmVhY2ggaWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5jb3VudCBUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gcmV0dXJuLiBEZWZhdWx0IHZhbHVlIGlzIDEwLiBNYXhpbXVtIHZhbHVlIGlzIDEwMDAgKGRlZmF1bHQgdG8gMTApXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLm9mZnNldCBVc2VkIGZvciBbcGFnaW5hdGlvbl0oaHR0cHM6Ly9tYWlsY2hpbXAuY29tL2RldmVsb3Blci9tYXJrZXRpbmcvZG9jcy9tZXRob2RzLXBhcmFtZXRlcnMvI3BhZ2luYXRpb24pLCB0aGlzIGl0IHRoZSBudW1iZXIgb2YgcmVjb3JkcyBmcm9tIGEgY29sbGVjdGlvbiB0byBza2lwLiBEZWZhdWx0IHZhbHVlIGlzIDAuIChkZWZhdWx0IHRvIDApXG4gICAqIEBwYXJhbSB7bW9kdWxlOm1vZGVsL1N0cmluZ30gb3B0cy5zb3J0RmllbGQgUmV0dXJucyBmaWxlcyBzb3J0ZWQgYnkgdGhlIHNwZWNpZmllZCBmaWVsZC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvSW5saW5lUmVzcG9uc2UyMDA3fSBhbmQgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy5nZXRGYWNlYm9va0FkUHJvZHVjdEFjdGl2aXR5UmVwb3J0V2l0aEh0dHBJbmZvID0gZnVuY3Rpb24ob3V0cmVhY2hJZCwgb3B0cykge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIHZhciBwb3N0Qm9keSA9IG51bGw7XG5cbiAgICAvLyB2ZXJpZnkgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnb3V0cmVhY2hJZCcgaXMgc2V0XG4gICAgaWYgKG91dHJlYWNoSWQgPT09IHVuZGVmaW5lZCB8fCBvdXRyZWFjaElkID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ291dHJlYWNoSWQnIHdoZW4gY2FsbGluZyBcIik7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhQYXJhbXMgPSB7XG4gICAgICAnb3V0cmVhY2hfaWQnOiBvdXRyZWFjaElkXG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgJ2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2ZpZWxkcyddID8gb3B0c1snZmllbGRzJ10gOiBvcHRzWydmaWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2V4Y2x1ZGVfZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZXhjbHVkZUZpZWxkcyddID8gb3B0c1snZXhjbHVkZUZpZWxkcyddIDogb3B0c1snZXhjbHVkZV9maWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2NvdW50JzogKCBvcHRzWydjb3VudCddID8gb3B0c1snY291bnQnXSA6IG9wdHNbJ2NvdW50J10pLFxuICAgICAgJ29mZnNldCc6ICggb3B0c1snb2Zmc2V0J10gPyBvcHRzWydvZmZzZXQnXSA6IG9wdHNbJ29mZnNldCddKSxcbiAgICAgICdzb3J0X2ZpZWxkJzogKCBvcHRzWydzb3J0RmllbGQnXSA/IG9wdHNbJ3NvcnRGaWVsZCddIDogb3B0c1snc29ydF9maWVsZCddKVxuICAgIH07XG4gICAgdmFyIGhlYWRlclBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGZvcm1QYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBhdXRoTmFtZXMgPSBbJ2Jhc2ljQXV0aCddO1xuICAgIHZhciBjb250ZW50VHlwZXMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICB2YXIgYWNjZXB0cyA9IFsnYXBwbGljYXRpb24vanNvbicsICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nXTtcbiAgICB2YXIgcmV0dXJuVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgIHJldHVybiB0aGlzLmFwaUNsaWVudC5jYWxsQXBpKFxuICAgICAgJy9yZXBvcnRpbmcvZmFjZWJvb2stYWRzL3tvdXRyZWFjaF9pZH0vZWNvbW1lcmNlLXByb2R1Y3QtYWN0aXZpdHknLCAnR0VUJyxcbiAgICAgIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgYXV0aE5hbWVzLCBjb250ZW50VHlwZXMsIGFjY2VwdHMsIHJldHVyblR5cGVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0IGZhY2Vib29rIGVjb21tZXJjZSByZXBvcnRcbiAgICogR2V0IGJyZWFrZG93biBvZiBwcm9kdWN0IGFjdGl2aXR5IGZvciBhbiBvdXRyZWFjaC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdHMuY291bnQgVGhlIG51bWJlciBvZiByZWNvcmRzIHRvIHJldHVybi4gRGVmYXVsdCB2YWx1ZSBpcyAxMC4gTWF4aW11bSB2YWx1ZSBpcyAxMDAwIChkZWZhdWx0IHRvIDEwKVxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5vZmZzZXQgVXNlZCBmb3IgW3BhZ2luYXRpb25dKGh0dHBzOi8vbWFpbGNoaW1wLmNvbS9kZXZlbG9wZXIvbWFya2V0aW5nL2RvY3MvbWV0aG9kcy1wYXJhbWV0ZXJzLyNwYWdpbmF0aW9uKSwgdGhpcyBpdCB0aGUgbnVtYmVyIG9mIHJlY29yZHMgZnJvbSBhIGNvbGxlY3Rpb24gdG8gc2tpcC4gRGVmYXVsdCB2YWx1ZSBpcyAwLiAoZGVmYXVsdCB0byAwKVxuICAgKiBAcGFyYW0ge21vZHVsZTptb2RlbC9TdHJpbmd9IG9wdHMuc29ydEZpZWxkIFJldHVybnMgZmlsZXMgc29ydGVkIGJ5IHRoZSBzcGVjaWZpZWQgZmllbGQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL0lubGluZVJlc3BvbnNlMjAwN31cbiAgICovXG4gIHRoaXMuZ2V0RmFjZWJvb2tBZFByb2R1Y3RBY3Rpdml0eVJlcG9ydCA9IGZ1bmN0aW9uKG91dHJlYWNoSWQsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRGYWNlYm9va0FkUHJvZHVjdEFjdGl2aXR5UmVwb3J0V2l0aEh0dHBJbmZvKG91dHJlYWNoSWQsIG9wdHMpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZV9hbmRfZGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2VfYW5kX2RhdGEuZGF0YTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgbGFuZGluZyBwYWdlcyByZXBvcnRzXG4gICAqIEdldCByZXBvcnRzIG9mIGxhbmRpbmcgcGFnZXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5jb3VudCBUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gcmV0dXJuLiBEZWZhdWx0IHZhbHVlIGlzIDEwLiBNYXhpbXVtIHZhbHVlIGlzIDEwMDAgKGRlZmF1bHQgdG8gMTApXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLm9mZnNldCBVc2VkIGZvciBbcGFnaW5hdGlvbl0oaHR0cHM6Ly9tYWlsY2hpbXAuY29tL2RldmVsb3Blci9tYXJrZXRpbmcvZG9jcy9tZXRob2RzLXBhcmFtZXRlcnMvI3BhZ2luYXRpb24pLCB0aGlzIGl0IHRoZSBudW1iZXIgb2YgcmVjb3JkcyBmcm9tIGEgY29sbGVjdGlvbiB0byBza2lwLiBEZWZhdWx0IHZhbHVlIGlzIDAuIChkZWZhdWx0IHRvIDApXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL0lubGluZVJlc3BvbnNlMjAwMTJ9IGFuZCBIVFRQIHJlc3BvbnNlXG4gICAqL1xuICB0aGlzLmdldExhbmRpbmdQYWdlUmVwb3J0c0FsbFdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgcG9zdEJvZHkgPSBudWxsO1xuXG4gICAgdmFyIHBhdGhQYXJhbXMgPSB7XG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgJ2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2ZpZWxkcyddID8gb3B0c1snZmllbGRzJ10gOiBvcHRzWydmaWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2V4Y2x1ZGVfZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZXhjbHVkZUZpZWxkcyddID8gb3B0c1snZXhjbHVkZUZpZWxkcyddIDogb3B0c1snZXhjbHVkZV9maWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2NvdW50JzogKCBvcHRzWydjb3VudCddID8gb3B0c1snY291bnQnXSA6IG9wdHNbJ2NvdW50J10pLFxuICAgICAgJ29mZnNldCc6ICggb3B0c1snb2Zmc2V0J10gPyBvcHRzWydvZmZzZXQnXSA6IG9wdHNbJ29mZnNldCddKVxuICAgIH07XG4gICAgdmFyIGhlYWRlclBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGZvcm1QYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBhdXRoTmFtZXMgPSBbJ2Jhc2ljQXV0aCddO1xuICAgIHZhciBjb250ZW50VHlwZXMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICB2YXIgYWNjZXB0cyA9IFsnYXBwbGljYXRpb24vanNvbicsICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nXTtcbiAgICB2YXIgcmV0dXJuVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgIHJldHVybiB0aGlzLmFwaUNsaWVudC5jYWxsQXBpKFxuICAgICAgJy9yZXBvcnRpbmcvbGFuZGluZy1wYWdlcycsICdHRVQnLFxuICAgICAgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMsIGhlYWRlclBhcmFtcywgZm9ybVBhcmFtcywgcG9zdEJvZHksXG4gICAgICBhdXRoTmFtZXMsIGNvbnRlbnRUeXBlcywgYWNjZXB0cywgcmV0dXJuVHlwZVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3QgbGFuZGluZyBwYWdlcyByZXBvcnRzXG4gICAqIEdldCByZXBvcnRzIG9mIGxhbmRpbmcgcGFnZXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5jb3VudCBUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gcmV0dXJuLiBEZWZhdWx0IHZhbHVlIGlzIDEwLiBNYXhpbXVtIHZhbHVlIGlzIDEwMDAgKGRlZmF1bHQgdG8gMTApXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLm9mZnNldCBVc2VkIGZvciBbcGFnaW5hdGlvbl0oaHR0cHM6Ly9tYWlsY2hpbXAuY29tL2RldmVsb3Blci9tYXJrZXRpbmcvZG9jcy9tZXRob2RzLXBhcmFtZXRlcnMvI3BhZ2luYXRpb24pLCB0aGlzIGl0IHRoZSBudW1iZXIgb2YgcmVjb3JkcyBmcm9tIGEgY29sbGVjdGlvbiB0byBza2lwLiBEZWZhdWx0IHZhbHVlIGlzIDAuIChkZWZhdWx0IHRvIDApXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL0lubGluZVJlc3BvbnNlMjAwMTJ9XG4gICAqL1xuICB0aGlzLmdldExhbmRpbmdQYWdlUmVwb3J0c0FsbCA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRMYW5kaW5nUGFnZVJlcG9ydHNBbGxXaXRoSHR0cEluZm8ob3B0cylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlX2FuZF9kYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZV9hbmRfZGF0YS5kYXRhO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGxhbmRpbmcgcGFnZSByZXBvcnRcbiAgICogR2V0IHJlcG9ydCBvZiBhIGxhbmRpbmcgcGFnZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvTGFuZGluZ1BhZ2VSZXBvcnR9IGFuZCBIVFRQIHJlc3BvbnNlXG4gICAqL1xuICB0aGlzLmdldExhbmRpbmdQYWdlUmVwb3J0V2l0aEh0dHBJbmZvID0gZnVuY3Rpb24ob3V0cmVhY2hJZCwgb3B0cykge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIHZhciBwb3N0Qm9keSA9IG51bGw7XG5cbiAgICAvLyB2ZXJpZnkgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnb3V0cmVhY2hJZCcgaXMgc2V0XG4gICAgaWYgKG91dHJlYWNoSWQgPT09IHVuZGVmaW5lZCB8fCBvdXRyZWFjaElkID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ291dHJlYWNoSWQnIHdoZW4gY2FsbGluZyBcIik7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhQYXJhbXMgPSB7XG4gICAgICAnb3V0cmVhY2hfaWQnOiBvdXRyZWFjaElkXG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgJ2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2ZpZWxkcyddID8gb3B0c1snZmllbGRzJ10gOiBvcHRzWydmaWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2V4Y2x1ZGVfZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZXhjbHVkZUZpZWxkcyddID8gb3B0c1snZXhjbHVkZUZpZWxkcyddIDogb3B0c1snZXhjbHVkZV9maWVsZHMnXSwgJ2NzdicpXG4gICAgfTtcbiAgICB2YXIgaGVhZGVyUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgZm9ybVBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGF1dGhOYW1lcyA9IFsnYmFzaWNBdXRoJ107XG4gICAgdmFyIGNvbnRlbnRUeXBlcyA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuICAgIHZhciBhY2NlcHRzID0gWydhcHBsaWNhdGlvbi9qc29uJywgJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbiddO1xuICAgIHZhciByZXR1cm5UeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LmNhbGxBcGkoXG4gICAgICAnL3JlcG9ydGluZy9sYW5kaW5nLXBhZ2VzL3tvdXRyZWFjaF9pZH0nLCAnR0VUJyxcbiAgICAgIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgYXV0aE5hbWVzLCBjb250ZW50VHlwZXMsIGFjY2VwdHMsIHJldHVyblR5cGVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgbGFuZGluZyBwYWdlIHJlcG9ydFxuICAgKiBHZXQgcmVwb3J0IG9mIGEgbGFuZGluZyBwYWdlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gb3V0cmVhY2hJZCBUaGUgb3V0cmVhY2ggaWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHtAbGluayBodHRwczovL3d3dy5wcm9taXNlanMub3JnL3xQcm9taXNlfSwgd2l0aCBkYXRhIG9mIHR5cGUge0BsaW5rIG1vZHVsZTptb2RlbC9MYW5kaW5nUGFnZVJlcG9ydH1cbiAgICovXG4gIHRoaXMuZ2V0TGFuZGluZ1BhZ2VSZXBvcnQgPSBmdW5jdGlvbihvdXRyZWFjaElkLCBvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TGFuZGluZ1BhZ2VSZXBvcnRXaXRoSHR0cEluZm8ob3V0cmVhY2hJZCwgb3B0cylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlX2FuZF9kYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZV9hbmRfZGF0YS5kYXRhO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBzdXJ2ZXkgcmVwb3J0c1xuICAgKiBHZXQgcmVwb3J0cyBmb3Igc3VydmV5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byByZXR1cm4uIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmV4Y2x1ZGVGaWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gZXhjbHVkZS4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLmNvdW50IFRoZSBudW1iZXIgb2YgcmVjb3JkcyB0byByZXR1cm4uIERlZmF1bHQgdmFsdWUgaXMgMTAuIE1heGltdW0gdmFsdWUgaXMgMTAwMCAoZGVmYXVsdCB0byAxMClcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdHMub2Zmc2V0IFVzZWQgZm9yIFtwYWdpbmF0aW9uXShodHRwczovL21haWxjaGltcC5jb20vZGV2ZWxvcGVyL21hcmtldGluZy9kb2NzL21ldGhvZHMtcGFyYW1ldGVycy8jcGFnaW5hdGlvbiksIHRoaXMgaXQgdGhlIG51bWJlciBvZiByZWNvcmRzIGZyb20gYSBjb2xsZWN0aW9uIHRvIHNraXAuIERlZmF1bHQgdmFsdWUgaXMgMC4gKGRlZmF1bHQgdG8gMClcbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvSW5saW5lUmVzcG9uc2UyMDAxM30gYW5kIEhUVFAgcmVzcG9uc2VcbiAgICovXG4gIHRoaXMuZ2V0U3VydmV5UmVwb3J0c0FsbFdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgcG9zdEJvZHkgPSBudWxsO1xuXG4gICAgdmFyIHBhdGhQYXJhbXMgPSB7XG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgJ2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2ZpZWxkcyddID8gb3B0c1snZmllbGRzJ10gOiBvcHRzWydmaWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2V4Y2x1ZGVfZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZXhjbHVkZUZpZWxkcyddID8gb3B0c1snZXhjbHVkZUZpZWxkcyddIDogb3B0c1snZXhjbHVkZV9maWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2NvdW50JzogKCBvcHRzWydjb3VudCddID8gb3B0c1snY291bnQnXSA6IG9wdHNbJ2NvdW50J10pLFxuICAgICAgJ29mZnNldCc6ICggb3B0c1snb2Zmc2V0J10gPyBvcHRzWydvZmZzZXQnXSA6IG9wdHNbJ29mZnNldCddKVxuICAgIH07XG4gICAgdmFyIGhlYWRlclBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGZvcm1QYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBhdXRoTmFtZXMgPSBbJ2Jhc2ljQXV0aCddO1xuICAgIHZhciBjb250ZW50VHlwZXMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICB2YXIgYWNjZXB0cyA9IFsnYXBwbGljYXRpb24vanNvbicsICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nXTtcbiAgICB2YXIgcmV0dXJuVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgIHJldHVybiB0aGlzLmFwaUNsaWVudC5jYWxsQXBpKFxuICAgICAgJy9yZXBvcnRpbmcvc3VydmV5cycsICdHRVQnLFxuICAgICAgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMsIGhlYWRlclBhcmFtcywgZm9ybVBhcmFtcywgcG9zdEJvZHksXG4gICAgICBhdXRoTmFtZXMsIGNvbnRlbnRUeXBlcywgYWNjZXB0cywgcmV0dXJuVHlwZVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3Qgc3VydmV5IHJlcG9ydHNcbiAgICogR2V0IHJlcG9ydHMgZm9yIHN1cnZleXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5jb3VudCBUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gcmV0dXJuLiBEZWZhdWx0IHZhbHVlIGlzIDEwLiBNYXhpbXVtIHZhbHVlIGlzIDEwMDAgKGRlZmF1bHQgdG8gMTApXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLm9mZnNldCBVc2VkIGZvciBbcGFnaW5hdGlvbl0oaHR0cHM6Ly9tYWlsY2hpbXAuY29tL2RldmVsb3Blci9tYXJrZXRpbmcvZG9jcy9tZXRob2RzLXBhcmFtZXRlcnMvI3BhZ2luYXRpb24pLCB0aGlzIGl0IHRoZSBudW1iZXIgb2YgcmVjb3JkcyBmcm9tIGEgY29sbGVjdGlvbiB0byBza2lwLiBEZWZhdWx0IHZhbHVlIGlzIDAuIChkZWZhdWx0IHRvIDApXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL0lubGluZVJlc3BvbnNlMjAwMTN9XG4gICAqL1xuICB0aGlzLmdldFN1cnZleVJlcG9ydHNBbGwgPSBmdW5jdGlvbihvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3VydmV5UmVwb3J0c0FsbFdpdGhIdHRwSW5mbyhvcHRzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VfYW5kX2RhdGEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlX2FuZF9kYXRhLmRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3VydmV5IHJlcG9ydFxuICAgKiBHZXQgcmVwb3J0IGZvciBhIHN1cnZleS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvU3VydmV5UmVwb3J0fSBhbmQgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy5nZXRTdXJ2ZXlSZXBvcnRXaXRoSHR0cEluZm8gPSBmdW5jdGlvbihvdXRyZWFjaElkLCBvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdmFyIHBvc3RCb2R5ID0gbnVsbDtcblxuICAgIC8vIHZlcmlmeSB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdvdXRyZWFjaElkJyBpcyBzZXRcbiAgICBpZiAob3V0cmVhY2hJZCA9PT0gdW5kZWZpbmVkIHx8IG91dHJlYWNoSWQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnb3V0cmVhY2hJZCcgd2hlbiBjYWxsaW5nIFwiKTtcbiAgICB9XG5cbiAgICB2YXIgcGF0aFBhcmFtcyA9IHtcbiAgICAgICdvdXRyZWFjaF9pZCc6IG91dHJlYWNoSWRcbiAgICB9O1xuICAgIFxuICAgIC8qXG4gICAgIFRoZSBmb2xsb3dpbmcgYmxvY2sgYnVpbGRpbmcgcXVlcnlQYXJhbXMgaXMgZ29pbmcgdG8gbG9vayBhIGxpdHRsZSBvZGQsIHdlJ3JlIGdvaW5nIGxvb2sgZm9yIHZhbHVlcyBpbiAkb3B0cyB3aXRoIGJvdGhcbiAgICAgY2FtZWxDYXNlIGFuZCBzbmFrZV9jYXNlIGZvcm1hdCAod2hpY2ggd2lsbCBiZSB0aGUgc2FtZSBpZiBzaW5ndWxhciB3b3JkKS4gVGhpcyBpcyBiZWNhdXNlIHRoZSBBUEkgZG9jcyB1c2Ugc25ha2VfY2FzZVxuICAgICBidXQgZWFybHkgdmVyc2lvbnMgb2YgdGhlc2UgU0RLcyB1c2VkIGNhbWVsQ2FzZS4gU28gdG8gYmUgYmFja3dhcmQgY29tcGF0aWJsZSB3ZSdsbCB1c2UgYm90aC4gXG4gICAgKi9cbiAgICB2YXIgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAnZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZmllbGRzJ10gPyBvcHRzWydmaWVsZHMnXSA6IG9wdHNbJ2ZpZWxkcyddLCAnY3N2JyksXG4gICAgICAnZXhjbHVkZV9maWVsZHMnOiB0aGlzLmFwaUNsaWVudC5idWlsZENvbGxlY3Rpb25QYXJhbShvcHRzWydleGNsdWRlRmllbGRzJ10gPyBvcHRzWydleGNsdWRlRmllbGRzJ10gOiBvcHRzWydleGNsdWRlX2ZpZWxkcyddLCAnY3N2JylcbiAgICB9O1xuICAgIHZhciBoZWFkZXJQYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBmb3JtUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgYXV0aE5hbWVzID0gWydiYXNpY0F1dGgnXTtcbiAgICB2YXIgY29udGVudFR5cGVzID0gWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgdmFyIGFjY2VwdHMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJ107XG4gICAgdmFyIHJldHVyblR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQuY2FsbEFwaShcbiAgICAgICcvcmVwb3J0aW5nL3N1cnZleXMve291dHJlYWNoX2lkfScsICdHRVQnLFxuICAgICAgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMsIGhlYWRlclBhcmFtcywgZm9ybVBhcmFtcywgcG9zdEJvZHksXG4gICAgICBhdXRoTmFtZXMsIGNvbnRlbnRUeXBlcywgYWNjZXB0cywgcmV0dXJuVHlwZVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBzdXJ2ZXkgcmVwb3J0XG4gICAqIEdldCByZXBvcnQgZm9yIGEgc3VydmV5LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gb3V0cmVhY2hJZCBUaGUgb3V0cmVhY2ggaWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHtAbGluayBodHRwczovL3d3dy5wcm9taXNlanMub3JnL3xQcm9taXNlfSwgd2l0aCBkYXRhIG9mIHR5cGUge0BsaW5rIG1vZHVsZTptb2RlbC9TdXJ2ZXlSZXBvcnR9XG4gICAqL1xuICB0aGlzLmdldFN1cnZleVJlcG9ydCA9IGZ1bmN0aW9uKG91dHJlYWNoSWQsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdXJ2ZXlSZXBvcnRXaXRoSHR0cEluZm8ob3V0cmVhY2hJZCwgb3B0cylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlX2FuZF9kYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZV9hbmRfZGF0YS5kYXRhO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBzdXJ2ZXkgcXVlc3Rpb24gcmVwb3J0c1xuICAgKiBHZXQgcmVwb3J0cyBmb3Igc3VydmV5IHF1ZXN0aW9ucy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvSW5saW5lUmVzcG9uc2UyMDAxNH0gYW5kIEhUVFAgcmVzcG9uc2VcbiAgICovXG4gIHRoaXMuZ2V0U3VydmV5UXVlc3Rpb25SZXBvcnRzQWxsV2l0aEh0dHBJbmZvID0gZnVuY3Rpb24ob3V0cmVhY2hJZCwgb3B0cykge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIHZhciBwb3N0Qm9keSA9IG51bGw7XG5cbiAgICAvLyB2ZXJpZnkgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnb3V0cmVhY2hJZCcgaXMgc2V0XG4gICAgaWYgKG91dHJlYWNoSWQgPT09IHVuZGVmaW5lZCB8fCBvdXRyZWFjaElkID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ291dHJlYWNoSWQnIHdoZW4gY2FsbGluZyBcIik7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhQYXJhbXMgPSB7XG4gICAgICAnb3V0cmVhY2hfaWQnOiBvdXRyZWFjaElkXG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgJ2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2ZpZWxkcyddID8gb3B0c1snZmllbGRzJ10gOiBvcHRzWydmaWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2V4Y2x1ZGVfZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZXhjbHVkZUZpZWxkcyddID8gb3B0c1snZXhjbHVkZUZpZWxkcyddIDogb3B0c1snZXhjbHVkZV9maWVsZHMnXSwgJ2NzdicpXG4gICAgfTtcbiAgICB2YXIgaGVhZGVyUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgZm9ybVBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGF1dGhOYW1lcyA9IFsnYmFzaWNBdXRoJ107XG4gICAgdmFyIGNvbnRlbnRUeXBlcyA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuICAgIHZhciBhY2NlcHRzID0gWydhcHBsaWNhdGlvbi9qc29uJywgJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbiddO1xuICAgIHZhciByZXR1cm5UeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LmNhbGxBcGkoXG4gICAgICAnL3JlcG9ydGluZy9zdXJ2ZXlzL3tvdXRyZWFjaF9pZH0vcXVlc3Rpb25zJywgJ0dFVCcsXG4gICAgICBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcywgaGVhZGVyUGFyYW1zLCBmb3JtUGFyYW1zLCBwb3N0Qm9keSxcbiAgICAgIGF1dGhOYW1lcywgY29udGVudFR5cGVzLCBhY2NlcHRzLCByZXR1cm5UeXBlXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogTGlzdCBzdXJ2ZXkgcXVlc3Rpb24gcmVwb3J0c1xuICAgKiBHZXQgcmVwb3J0cyBmb3Igc3VydmV5IHF1ZXN0aW9ucy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvSW5saW5lUmVzcG9uc2UyMDAxNH1cbiAgICovXG4gIHRoaXMuZ2V0U3VydmV5UXVlc3Rpb25SZXBvcnRzQWxsID0gZnVuY3Rpb24ob3V0cmVhY2hJZCwgb3B0cykge1xuICAgIHJldHVybiB0aGlzLmdldFN1cnZleVF1ZXN0aW9uUmVwb3J0c0FsbFdpdGhIdHRwSW5mbyhvdXRyZWFjaElkLCBvcHRzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VfYW5kX2RhdGEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlX2FuZF9kYXRhLmRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3VydmV5IHF1ZXN0aW9uIHJlcG9ydFxuICAgKiBHZXQgcmVwb3J0IGZvciBhIHN1cnZleSBxdWVzdGlvbi5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlc3Rpb25JZCBUaGUgSUQgb2YgdGhlIHN1cnZleSBxdWVzdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byByZXR1cm4uIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmV4Y2x1ZGVGaWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gZXhjbHVkZS4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL1N1cnZleVF1ZXN0aW9uUmVwb3J0fSBhbmQgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy5nZXRTdXJ2ZXlRdWVzdGlvblJlcG9ydFdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKG91dHJlYWNoSWQsIHF1ZXN0aW9uSWQsIG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgcG9zdEJvZHkgPSBudWxsO1xuXG4gICAgLy8gdmVyaWZ5IHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ291dHJlYWNoSWQnIGlzIHNldFxuICAgIGlmIChvdXRyZWFjaElkID09PSB1bmRlZmluZWQgfHwgb3V0cmVhY2hJZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdvdXRyZWFjaElkJyB3aGVuIGNhbGxpbmcgXCIpO1xuICAgIH1cblxuICAgIC8vIHZlcmlmeSB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdxdWVzdGlvbklkJyBpcyBzZXRcbiAgICBpZiAocXVlc3Rpb25JZCA9PT0gdW5kZWZpbmVkIHx8IHF1ZXN0aW9uSWQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAncXVlc3Rpb25JZCcgd2hlbiBjYWxsaW5nIFwiKTtcbiAgICB9XG5cbiAgICB2YXIgcGF0aFBhcmFtcyA9IHtcbiAgICAgICdvdXRyZWFjaF9pZCc6IG91dHJlYWNoSWQsXG4gICAgICAncXVlc3Rpb25faWQnOiBxdWVzdGlvbklkXG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgJ2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2ZpZWxkcyddID8gb3B0c1snZmllbGRzJ10gOiBvcHRzWydmaWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2V4Y2x1ZGVfZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZXhjbHVkZUZpZWxkcyddID8gb3B0c1snZXhjbHVkZUZpZWxkcyddIDogb3B0c1snZXhjbHVkZV9maWVsZHMnXSwgJ2NzdicpXG4gICAgfTtcbiAgICB2YXIgaGVhZGVyUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgZm9ybVBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGF1dGhOYW1lcyA9IFsnYmFzaWNBdXRoJ107XG4gICAgdmFyIGNvbnRlbnRUeXBlcyA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuICAgIHZhciBhY2NlcHRzID0gWydhcHBsaWNhdGlvbi9qc29uJywgJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbiddO1xuICAgIHZhciByZXR1cm5UeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LmNhbGxBcGkoXG4gICAgICAnL3JlcG9ydGluZy9zdXJ2ZXlzL3tvdXRyZWFjaF9pZH0vcXVlc3Rpb25zL3txdWVzdGlvbl9pZH0nLCAnR0VUJyxcbiAgICAgIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgYXV0aE5hbWVzLCBjb250ZW50VHlwZXMsIGFjY2VwdHMsIHJldHVyblR5cGVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgc3VydmV5IHF1ZXN0aW9uIHJlcG9ydFxuICAgKiBHZXQgcmVwb3J0IGZvciBhIHN1cnZleSBxdWVzdGlvbi5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlc3Rpb25JZCBUaGUgSUQgb2YgdGhlIHN1cnZleSBxdWVzdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byByZXR1cm4uIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmV4Y2x1ZGVGaWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gZXhjbHVkZS4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL1N1cnZleVF1ZXN0aW9uUmVwb3J0fVxuICAgKi9cbiAgdGhpcy5nZXRTdXJ2ZXlRdWVzdGlvblJlcG9ydCA9IGZ1bmN0aW9uKG91dHJlYWNoSWQsIHF1ZXN0aW9uSWQsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdXJ2ZXlRdWVzdGlvblJlcG9ydFdpdGhIdHRwSW5mbyhvdXRyZWFjaElkLCBxdWVzdGlvbklkLCBvcHRzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VfYW5kX2RhdGEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlX2FuZF9kYXRhLmRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGFuc3dlcnMgZm9yIHF1ZXN0aW9uXG4gICAqIEdldCBhbnN3ZXJzIGZvciBhIHN1cnZleSBxdWVzdGlvbi5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlc3Rpb25JZCBUaGUgSUQgb2YgdGhlIHN1cnZleSBxdWVzdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byByZXR1cm4uIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmV4Y2x1ZGVGaWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gZXhjbHVkZS4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7bW9kdWxlOm1vZGVsL1N0cmluZ30gb3B0cy5yZXNwb25kZW50RmFtaWxpYXJpdHlJcyBGaWx0ZXIgc3VydmV5IHJlc3BvbnNlcyBieSBmYW1pbGlhcml0eSBvZiB0aGUgcmVzcG9uZGVudHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL0lubGluZVJlc3BvbnNlMjAwMTV9IGFuZCBIVFRQIHJlc3BvbnNlXG4gICAqL1xuICB0aGlzLmdldFN1cnZleVF1ZXN0aW9uQW5zd2Vyc1dpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKG91dHJlYWNoSWQsIHF1ZXN0aW9uSWQsIG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgcG9zdEJvZHkgPSBudWxsO1xuXG4gICAgLy8gdmVyaWZ5IHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ291dHJlYWNoSWQnIGlzIHNldFxuICAgIGlmIChvdXRyZWFjaElkID09PSB1bmRlZmluZWQgfHwgb3V0cmVhY2hJZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdvdXRyZWFjaElkJyB3aGVuIGNhbGxpbmcgXCIpO1xuICAgIH1cblxuICAgIC8vIHZlcmlmeSB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdxdWVzdGlvbklkJyBpcyBzZXRcbiAgICBpZiAocXVlc3Rpb25JZCA9PT0gdW5kZWZpbmVkIHx8IHF1ZXN0aW9uSWQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAncXVlc3Rpb25JZCcgd2hlbiBjYWxsaW5nIFwiKTtcbiAgICB9XG5cbiAgICB2YXIgcGF0aFBhcmFtcyA9IHtcbiAgICAgICdvdXRyZWFjaF9pZCc6IG91dHJlYWNoSWQsXG4gICAgICAncXVlc3Rpb25faWQnOiBxdWVzdGlvbklkXG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgJ2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2ZpZWxkcyddID8gb3B0c1snZmllbGRzJ10gOiBvcHRzWydmaWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2V4Y2x1ZGVfZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZXhjbHVkZUZpZWxkcyddID8gb3B0c1snZXhjbHVkZUZpZWxkcyddIDogb3B0c1snZXhjbHVkZV9maWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ3Jlc3BvbmRlbnRfZmFtaWxpYXJpdHlfaXMnOiAoIG9wdHNbJ3Jlc3BvbmRlbnRGYW1pbGlhcml0eUlzJ10gPyBvcHRzWydyZXNwb25kZW50RmFtaWxpYXJpdHlJcyddIDogb3B0c1sncmVzcG9uZGVudF9mYW1pbGlhcml0eV9pcyddKVxuICAgIH07XG4gICAgdmFyIGhlYWRlclBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGZvcm1QYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBhdXRoTmFtZXMgPSBbJ2Jhc2ljQXV0aCddO1xuICAgIHZhciBjb250ZW50VHlwZXMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICB2YXIgYWNjZXB0cyA9IFsnYXBwbGljYXRpb24vanNvbicsICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nXTtcbiAgICB2YXIgcmV0dXJuVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgIHJldHVybiB0aGlzLmFwaUNsaWVudC5jYWxsQXBpKFxuICAgICAgJy9yZXBvcnRpbmcvc3VydmV5cy97b3V0cmVhY2hfaWR9L3F1ZXN0aW9ucy97cXVlc3Rpb25faWR9L2Fuc3dlcnMnLCAnR0VUJyxcbiAgICAgIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgYXV0aE5hbWVzLCBjb250ZW50VHlwZXMsIGFjY2VwdHMsIHJldHVyblR5cGVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0IGFuc3dlcnMgZm9yIHF1ZXN0aW9uXG4gICAqIEdldCBhbnN3ZXJzIGZvciBhIHN1cnZleSBxdWVzdGlvbi5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlc3Rpb25JZCBUaGUgSUQgb2YgdGhlIHN1cnZleSBxdWVzdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byByZXR1cm4uIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmV4Y2x1ZGVGaWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gZXhjbHVkZS4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7bW9kdWxlOm1vZGVsL1N0cmluZ30gb3B0cy5yZXNwb25kZW50RmFtaWxpYXJpdHlJcyBGaWx0ZXIgc3VydmV5IHJlc3BvbnNlcyBieSBmYW1pbGlhcml0eSBvZiB0aGUgcmVzcG9uZGVudHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL0lubGluZVJlc3BvbnNlMjAwMTV9XG4gICAqL1xuICB0aGlzLmdldFN1cnZleVF1ZXN0aW9uQW5zd2VycyA9IGZ1bmN0aW9uKG91dHJlYWNoSWQsIHF1ZXN0aW9uSWQsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdXJ2ZXlRdWVzdGlvbkFuc3dlcnNXaXRoSHR0cEluZm8ob3V0cmVhY2hJZCwgcXVlc3Rpb25JZCwgb3B0cylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlX2FuZF9kYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZV9hbmRfZGF0YS5kYXRhO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBzdXJ2ZXkgcmVzcG9uc2VzXG4gICAqIEdldCByZXNwb25zZXMgdG8gYSBzdXJ2ZXkuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvdXRyZWFjaElkIFRoZSBvdXRyZWFjaCBpZC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byByZXR1cm4uIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmV4Y2x1ZGVGaWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gZXhjbHVkZS4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLmFuc3dlcmVkUXVlc3Rpb24gVGhlIElEIG9mIHRoZSBxdWVzdGlvbiB0aGF0IHdhcyBhbnN3ZXJlZC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wdHMuY2hvc2VBbnN3ZXIgVGhlIElEIG9mIHRoZSBvcHRpb24gY2hvc2VuIHRvIGZpbHRlciByZXNwb25zZXMgb24uXG4gICAqIEBwYXJhbSB7bW9kdWxlOm1vZGVsL1N0cmluZ30gb3B0cy5yZXNwb25kZW50RmFtaWxpYXJpdHlJcyBGaWx0ZXIgc3VydmV5IHJlc3BvbnNlcyBieSBmYW1pbGlhcml0eSBvZiB0aGUgcmVzcG9uZGVudHMuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL0lubGluZVJlc3BvbnNlMjAwMTZ9IGFuZCBIVFRQIHJlc3BvbnNlXG4gICAqL1xuICB0aGlzLmdldFN1cnZleVJlc3BvbnNlc0FsbFdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKG91dHJlYWNoSWQsIG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgcG9zdEJvZHkgPSBudWxsO1xuXG4gICAgLy8gdmVyaWZ5IHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ291dHJlYWNoSWQnIGlzIHNldFxuICAgIGlmIChvdXRyZWFjaElkID09PSB1bmRlZmluZWQgfHwgb3V0cmVhY2hJZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdvdXRyZWFjaElkJyB3aGVuIGNhbGxpbmcgXCIpO1xuICAgIH1cblxuICAgIHZhciBwYXRoUGFyYW1zID0ge1xuICAgICAgJ291dHJlYWNoX2lkJzogb3V0cmVhY2hJZFxuICAgIH07XG4gICAgXG4gICAgLypcbiAgICAgVGhlIGZvbGxvd2luZyBibG9jayBidWlsZGluZyBxdWVyeVBhcmFtcyBpcyBnb2luZyB0byBsb29rIGEgbGl0dGxlIG9kZCwgd2UncmUgZ29pbmcgbG9vayBmb3IgdmFsdWVzIGluICRvcHRzIHdpdGggYm90aFxuICAgICBjYW1lbENhc2UgYW5kIHNuYWtlX2Nhc2UgZm9ybWF0ICh3aGljaCB3aWxsIGJlIHRoZSBzYW1lIGlmIHNpbmd1bGFyIHdvcmQpLiBUaGlzIGlzIGJlY2F1c2UgdGhlIEFQSSBkb2NzIHVzZSBzbmFrZV9jYXNlXG4gICAgIGJ1dCBlYXJseSB2ZXJzaW9ucyBvZiB0aGVzZSBTREtzIHVzZWQgY2FtZWxDYXNlLiBTbyB0byBiZSBiYWNrd2FyZCBjb21wYXRpYmxlIHdlJ2xsIHVzZSBib3RoLiBcbiAgICAqL1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICdmaWVsZHMnOiB0aGlzLmFwaUNsaWVudC5idWlsZENvbGxlY3Rpb25QYXJhbShvcHRzWydmaWVsZHMnXSA/IG9wdHNbJ2ZpZWxkcyddIDogb3B0c1snZmllbGRzJ10sICdjc3YnKSxcbiAgICAgICdleGNsdWRlX2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2V4Y2x1ZGVGaWVsZHMnXSA/IG9wdHNbJ2V4Y2x1ZGVGaWVsZHMnXSA6IG9wdHNbJ2V4Y2x1ZGVfZmllbGRzJ10sICdjc3YnKSxcbiAgICAgICdhbnN3ZXJlZF9xdWVzdGlvbic6ICggb3B0c1snYW5zd2VyZWRRdWVzdGlvbiddID8gb3B0c1snYW5zd2VyZWRRdWVzdGlvbiddIDogb3B0c1snYW5zd2VyZWRfcXVlc3Rpb24nXSksXG4gICAgICAnY2hvc2VfYW5zd2VyJzogKCBvcHRzWydjaG9zZUFuc3dlciddID8gb3B0c1snY2hvc2VBbnN3ZXInXSA6IG9wdHNbJ2Nob3NlX2Fuc3dlciddKSxcbiAgICAgICdyZXNwb25kZW50X2ZhbWlsaWFyaXR5X2lzJzogKCBvcHRzWydyZXNwb25kZW50RmFtaWxpYXJpdHlJcyddID8gb3B0c1sncmVzcG9uZGVudEZhbWlsaWFyaXR5SXMnXSA6IG9wdHNbJ3Jlc3BvbmRlbnRfZmFtaWxpYXJpdHlfaXMnXSlcbiAgICB9O1xuICAgIHZhciBoZWFkZXJQYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBmb3JtUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgYXV0aE5hbWVzID0gWydiYXNpY0F1dGgnXTtcbiAgICB2YXIgY29udGVudFR5cGVzID0gWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgdmFyIGFjY2VwdHMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJ107XG4gICAgdmFyIHJldHVyblR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQuY2FsbEFwaShcbiAgICAgICcvcmVwb3J0aW5nL3N1cnZleXMve291dHJlYWNoX2lkfS9yZXNwb25zZXMnLCAnR0VUJyxcbiAgICAgIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgYXV0aE5hbWVzLCBjb250ZW50VHlwZXMsIGFjY2VwdHMsIHJldHVyblR5cGVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0IHN1cnZleSByZXNwb25zZXNcbiAgICogR2V0IHJlc3BvbnNlcyB0byBhIHN1cnZleS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG91dHJlYWNoSWQgVGhlIG91dHJlYWNoIGlkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdHMuYW5zd2VyZWRRdWVzdGlvbiBUaGUgSUQgb2YgdGhlIHF1ZXN0aW9uIHRoYXQgd2FzIGFuc3dlcmVkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5jaG9zZUFuc3dlciBUaGUgSUQgb2YgdGhlIG9wdGlvbiBjaG9zZW4gdG8gZmlsdGVyIHJlc3BvbnNlcyBvbi5cbiAgICogQHBhcmFtIHttb2R1bGU6bW9kZWwvU3RyaW5nfSBvcHRzLnJlc3BvbmRlbnRGYW1pbGlhcml0eUlzIEZpbHRlciBzdXJ2ZXkgcmVzcG9uc2VzIGJ5IGZhbWlsaWFyaXR5IG9mIHRoZSByZXNwb25kZW50cy5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvSW5saW5lUmVzcG9uc2UyMDAxNn1cbiAgICovXG4gIHRoaXMuZ2V0U3VydmV5UmVzcG9uc2VzQWxsID0gZnVuY3Rpb24ob3V0cmVhY2hJZCwgb3B0cykge1xuICAgIHJldHVybiB0aGlzLmdldFN1cnZleVJlc3BvbnNlc0FsbFdpdGhIdHRwSW5mbyhvdXRyZWFjaElkLCBvcHRzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VfYW5kX2RhdGEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlX2FuZF9kYXRhLmRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3VydmV5IHJlc3BvbnNlXG4gICAqIEdldCBhIHNpbmdsZSBzdXJ2ZXkgcmVzcG9uc2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvdXRyZWFjaElkIFRoZSBvdXRyZWFjaCBpZC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHJlc3BvbnNlSWQgVGhlIElEIG9mIHRoZSBzdXJ2ZXkgcmVzcG9uc2UuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL1N1cnZleVJlc3BvbnNlfSBhbmQgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy5nZXRTdXJ2ZXlSZXNwb25zZVdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKG91dHJlYWNoSWQsIHJlc3BvbnNlSWQpIHtcbiAgICB2YXIgcG9zdEJvZHkgPSBudWxsO1xuXG4gICAgLy8gdmVyaWZ5IHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ291dHJlYWNoSWQnIGlzIHNldFxuICAgIGlmIChvdXRyZWFjaElkID09PSB1bmRlZmluZWQgfHwgb3V0cmVhY2hJZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdvdXRyZWFjaElkJyB3aGVuIGNhbGxpbmcgXCIpO1xuICAgIH1cblxuICAgIC8vIHZlcmlmeSB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdyZXNwb25zZUlkJyBpcyBzZXRcbiAgICBpZiAocmVzcG9uc2VJZCA9PT0gdW5kZWZpbmVkIHx8IHJlc3BvbnNlSWQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAncmVzcG9uc2VJZCcgd2hlbiBjYWxsaW5nIFwiKTtcbiAgICB9XG5cbiAgICB2YXIgcGF0aFBhcmFtcyA9IHtcbiAgICAgICdvdXRyZWFjaF9pZCc6IG91dHJlYWNoSWQsXG4gICAgICAncmVzcG9uc2VfaWQnOiByZXNwb25zZUlkXG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgIH07XG4gICAgdmFyIGhlYWRlclBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGZvcm1QYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBhdXRoTmFtZXMgPSBbJ2Jhc2ljQXV0aCddO1xuICAgIHZhciBjb250ZW50VHlwZXMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICB2YXIgYWNjZXB0cyA9IFsnYXBwbGljYXRpb24vanNvbicsICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nXTtcbiAgICB2YXIgcmV0dXJuVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgIHJldHVybiB0aGlzLmFwaUNsaWVudC5jYWxsQXBpKFxuICAgICAgJy9yZXBvcnRpbmcvc3VydmV5cy97b3V0cmVhY2hfaWR9L3Jlc3BvbnNlcy97cmVzcG9uc2VfaWR9JywgJ0dFVCcsXG4gICAgICBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcywgaGVhZGVyUGFyYW1zLCBmb3JtUGFyYW1zLCBwb3N0Qm9keSxcbiAgICAgIGF1dGhOYW1lcywgY29udGVudFR5cGVzLCBhY2NlcHRzLCByZXR1cm5UeXBlXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHN1cnZleSByZXNwb25zZVxuICAgKiBHZXQgYSBzaW5nbGUgc3VydmV5IHJlc3BvbnNlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gb3V0cmVhY2hJZCBUaGUgb3V0cmVhY2ggaWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSByZXNwb25zZUlkIFRoZSBJRCBvZiB0aGUgc3VydmV5IHJlc3BvbnNlLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHtAbGluayBodHRwczovL3d3dy5wcm9taXNlanMub3JnL3xQcm9taXNlfSwgd2l0aCBkYXRhIG9mIHR5cGUge0BsaW5rIG1vZHVsZTptb2RlbC9TdXJ2ZXlSZXNwb25zZX1cbiAgICovXG4gIHRoaXMuZ2V0U3VydmV5UmVzcG9uc2UgPSBmdW5jdGlvbihvdXRyZWFjaElkLCByZXNwb25zZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3VydmV5UmVzcG9uc2VXaXRoSHR0cEluZm8ob3V0cmVhY2hJZCwgcmVzcG9uc2VJZClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlX2FuZF9kYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZV9hbmRfZGF0YS5kYXRhO1xuICAgICAgfSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportingApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Reports service.\n * @module api/ReportsApi\n */\n\n/**\n * Constructs a new ReportsApi. \n * @alias module:api/ReportsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List campaign reports\n   * Get campaign reports.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignReports1} and HTTP response\n   */\n  this.getAllCampaignReportsWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'before_send_time': ( opts['beforeSendTime'] ? opts['beforeSendTime'] : opts['before_send_time']),\n      'since_send_time': ( opts['sinceSendTime'] ? opts['sinceSendTime'] : opts['since_send_time'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign reports\n   * Get campaign reports.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.type The campaign type.\n   * @param {Date} opts.beforeSendTime Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {Date} opts.sinceSendTime Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignReports1}\n   */\n  this.getAllCampaignReports = function(opts) {\n    return this.getAllCampaignReportsWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign report\n   * Get report details for a specific sent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignReport} and HTTP response\n   */\n  this.getCampaignReportWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign report\n   * Get report details for a specific sent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignReport}\n   */\n  this.getCampaignReport = function(campaignId, opts) {\n    return this.getCampaignReportWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List abuse reports\n   * Get a list of abuse complaints for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaints1} and HTTP response\n   */\n  this.getCampaignAbuseReportsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/abuse-reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List abuse reports\n   * Get a list of abuse complaints for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaints1}\n   */\n  this.getCampaignAbuseReports = function(campaignId, opts) {\n    return this.getCampaignAbuseReportsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get abuse report\n   * Get information about a specific abuse report for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AbuseComplaint1} and HTTP response\n   */\n  this.getCampaignAbuseReportWithHttpInfo = function(campaignId, reportId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'reportId' is set\n    if (reportId === undefined || reportId === null) {\n      throw new Error(\"Missing the required parameter 'reportId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'report_id': reportId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/abuse-reports/{report_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get abuse report\n   * Get information about a specific abuse report for a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} reportId The id for the abuse report.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AbuseComplaint1}\n   */\n  this.getCampaignAbuseReport = function(campaignId, reportId, opts) {\n    return this.getCampaignAbuseReportWithHttpInfo(campaignId, reportId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign feedback\n   * Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignAdviceReport} and HTTP response\n   */\n  this.getCampaignAdviceWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/advice', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign feedback\n   * Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignAdviceReport}\n   */\n  this.getCampaignAdvice = function(campaignId, opts) {\n    return this.getCampaignAdviceWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign details\n   * Get information about clicks on specific links in your Mailchimp campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailReport} and HTTP response\n   */\n  this.getCampaignClickDetailsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign details\n   * Get information about clicks on specific links in your Mailchimp campaigns.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailReport}\n   */\n  this.getCampaignClickDetails = function(campaignId, opts) {\n    return this.getCampaignClickDetailsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign link details\n   * Get click details for a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailReport} and HTTP response\n   */\n  this.getCampaignClickDetailsForLinkWithHttpInfo = function(campaignId, linkId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'linkId' is set\n    if (linkId === undefined || linkId === null) {\n      throw new Error(\"Missing the required parameter 'linkId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'link_id': linkId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details/{link_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign link details\n   * Get click details for a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailReport}\n   */\n  this.getCampaignClickDetailsForLink = function(campaignId, linkId, opts) {\n    return this.getCampaignClickDetailsForLinkWithHttpInfo(campaignId, linkId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List clicked link subscribers\n   * Get information about list members who clicked on a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailMembers} and HTTP response\n   */\n  this.getSubscribersInfoWithHttpInfo = function(campaignId, linkId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'linkId' is set\n    if (linkId === undefined || linkId === null) {\n      throw new Error(\"Missing the required parameter 'linkId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'link_id': linkId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details/{link_id}/members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List clicked link subscribers\n   * Get information about list members who clicked on a specific link in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailMembers}\n   */\n  this.getSubscribersInfo = function(campaignId, linkId, opts) {\n    return this.getSubscribersInfoWithHttpInfo(campaignId, linkId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get clicked link subscriber\n   * Get information about a specific subscriber who clicked a link in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ClickDetailMember} and HTTP response\n   */\n  this.getSubscriberInfoWithHttpInfo = function(campaignId, linkId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'linkId' is set\n    if (linkId === undefined || linkId === null) {\n      throw new Error(\"Missing the required parameter 'linkId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'link_id': linkId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get clicked link subscriber\n   * Get information about a specific subscriber who clicked a link in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} linkId The id for the link.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ClickDetailMember}\n   */\n  this.getSubscriberInfo = function(campaignId, linkId, subscriberHash, opts) {\n    return this.getSubscriberInfoWithHttpInfo(campaignId, linkId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List domain performance stats\n   * Get statistics for the top-performing email domains in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DomainPerformance} and HTTP response\n   */\n  this.getDomainPerformanceForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/domain-performance', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List domain performance stats\n   * Get statistics for the top-performing email domains in a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DomainPerformance}\n   */\n  this.getDomainPerformanceForCampaign = function(campaignId, opts) {\n    return this.getDomainPerformanceForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign product activity\n   * Get breakdown of product activity for a campaign\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response\n   */\n  this.getEcommerceProductActivityForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/ecommerce-product-activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign product activity\n   * Get breakdown of product activity for a campaign\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {module:model/String} opts.sortField Returns files sorted by the specified field.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}\n   */\n  this.getEcommerceProductActivityForCampaign = function(campaignId, opts) {\n    return this.getEcommerceProductActivityForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List EepURL activity\n   * Get a summary of social activity for the campaign, tracked by EepURL.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EepurlActivity} and HTTP response\n   */\n  this.getEepurlActivityForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/eepurl', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List EepURL activity\n   * Get a summary of social activity for the campaign, tracked by EepURL.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EepurlActivity}\n   */\n  this.getEepurlActivityForCampaign = function(campaignId, opts) {\n    return this.getEepurlActivityForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List email activity\n   * Get a list of member's subscriber activity in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailActivity} and HTTP response\n   */\n  this.getEmailActivityForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'since': ( opts['since'] ? opts['since'] : opts['since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/email-activity', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List email activity\n   * Get a list of member's subscriber activity in a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailActivity}\n   */\n  this.getEmailActivityForCampaign = function(campaignId, opts) {\n    return this.getEmailActivityForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get subscriber email activity\n   * Get a specific list member's activity in a campaign including opens, clicks, and bounces.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailActivity} and HTTP response\n   */\n  this.getEmailActivityForSubscriberWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'since': ( opts['since'] ? opts['since'] : opts['since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/email-activity/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get subscriber email activity\n   * Get a specific list member's activity in a campaign including opens, clicks, and bounces.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.since Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailActivity}\n   */\n  this.getEmailActivityForSubscriber = function(campaignId, subscriberHash, opts) {\n    return this.getEmailActivityForSubscriberWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List top open activities\n   * Get top open locations for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenLocations} and HTTP response\n   */\n  this.getLocationsForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/locations', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List top open activities\n   * Get top open locations for a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenLocations}\n   */\n  this.getLocationsForCampaign = function(campaignId, opts) {\n    return this.getLocationsForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign open details\n   * Get detailed information about any campaign emails that were opened by a list member.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenDetailReport} and HTTP response\n   */\n  this.getCampaignOpenDetailsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'since': ( opts['since'] ? opts['since'] : opts['since'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/open-details', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign open details\n   * Get detailed information about any campaign emails that were opened by a list member.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.since Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenDetailReport}\n   */\n  this.getCampaignOpenDetails = function(campaignId, opts) {\n    return this.getCampaignOpenDetailsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get opened campaign subscriber\n   * Get information about a specific subscriber who opened a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenActivity} and HTTP response\n   */\n  this.getSubscriberInfoForOpenedCampaignWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/open-details/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get opened campaign subscriber\n   * Get information about a specific subscriber who opened a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenActivity}\n   */\n  this.getSubscriberInfoForOpenedCampaign = function(campaignId, subscriberHash, opts) {\n    return this.getSubscriberInfoForOpenedCampaignWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List campaign recipients\n   * Get information about campaign recipients.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SentTo} and HTTP response\n   */\n  this.getCampaignRecipientsWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/sent-to', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List campaign recipients\n   * Get information about campaign recipients.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SentTo}\n   */\n  this.getCampaignRecipients = function(campaignId, opts) {\n    return this.getCampaignRecipientsWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get campaign recipient info\n   * Get information about a specific campaign recipient.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SentTo} and HTTP response\n   */\n  this.getCampaignRecipientWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/sent-to/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get campaign recipient info\n   * Get information about a specific campaign recipient.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SentTo}\n   */\n  this.getCampaignRecipient = function(campaignId, subscriberHash, opts) {\n    return this.getCampaignRecipientWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List child campaign reports\n   * Get a list of reports with child campaigns for a specific parent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CampaignSubReports} and HTTP response\n   */\n  this.getSubReportsForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/sub-reports', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List child campaign reports\n   * Get a list of reports with child campaigns for a specific parent campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CampaignSubReports}\n   */\n  this.getSubReportsForCampaign = function(campaignId, opts) {\n    return this.getSubReportsForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List unsubscribed members\n   * Get information about members who have unsubscribed from a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unsubscribes} and HTTP response\n   */\n  this.getUnsubscribedListForCampaignWithHttpInfo = function(campaignId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/unsubscribed', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List unsubscribed members\n   * Get information about members who have unsubscribed from a specific campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unsubscribes}\n   */\n  this.getUnsubscribedListForCampaign = function(campaignId, opts) {\n    return this.getUnsubscribedListForCampaignWithHttpInfo(campaignId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get unsubscribed member\n   * Get information about a specific list member who unsubscribed from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Unsubscribes} and HTTP response\n   */\n  this.getUnsubscribedListMemberWithHttpInfo = function(campaignId, subscriberHash, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'campaignId' is set\n    if (campaignId === undefined || campaignId === null) {\n      throw new Error(\"Missing the required parameter 'campaignId' when calling \");\n    }\n\n    // verify the required parameter 'subscriberHash' is set\n    if (subscriberHash === undefined || subscriberHash === null) {\n      throw new Error(\"Missing the required parameter 'subscriberHash' when calling \");\n    }\n\n    var pathParams = {\n      'campaign_id': campaignId,\n      'subscriber_hash': subscriberHash\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/reports/{campaign_id}/unsubscribed/{subscriber_hash}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get unsubscribed member\n   * Get information about a specific list member who unsubscribed from a campaign.\n   * @param {String} campaignId The unique id for the campaign.\n   * @param {String} subscriberHash The MD5 hash of the lowercase version of the list member's email address.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Unsubscribes}\n   */\n  this.getUnsubscribedListMember = function(campaignId, subscriberHash, opts) {\n    return this.getUnsubscribedListMemberWithHttpInfo(campaignId, subscriberHash, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/ReportsApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js":
/*!************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Root service.\n * @module api/RootApi\n */\n\n/**\n * Constructs a new RootApi. \n * @alias module:api/RootApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * List api root resources\n   * Get links to all other resources available in the API.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/APIRoot} and HTTP response\n   */\n  this.getRootWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List api root resources\n   * Get links to all other resources available in the API.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/APIRoot}\n   */\n  this.getRoot = function(opts) {\n    return this.getRootWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9hcGkvUm9vdEFwaS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQSxnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBYzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QixlQUFlLGlDQUFpQztBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsZ0JBQWdCO0FBQzdCLGNBQWMsU0FBUyxHQUFHLHlDQUF5QywwQ0FBMEMsNEJBQTRCO0FBQ3pJO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsY0FBYyxTQUFTLEdBQUcseUNBQXlDLHFCQUFxQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FtdWVcXERlc2t0b3BcXEJlYXV0eVNvZnQtbGFuZGluZ3BhZ2VcXG5vZGVfbW9kdWxlc1xcQG1haWxjaGltcFxcbWFpbGNoaW1wX21hcmtldGluZ1xcc3JjXFxhcGlcXFJvb3RBcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1haWxjaGltcCBNYXJrZXRpbmcgQVBJXG4gKiBObyBkZXNjcmlwdGlvbiBwcm92aWRlZCAoZ2VuZXJhdGVkIGJ5IFN3YWdnZXIgQ29kZWdlbiBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb2RlZ2VuKVxuICpcbiAqIE9wZW5BUEkgc3BlYyB2ZXJzaW9uOiAzLjAuODBcbiAqIENvbnRhY3Q6IGFwaWhlbHBAbWFpbGNoaW1wLmNvbVxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgdGhlIHN3YWdnZXIgY29kZSBnZW5lcmF0b3IgcHJvZ3JhbS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4uZ2l0XG4gKlxuICogU3dhZ2dlciBDb2RlZ2VuIHZlcnNpb246IDIuNC4xMlxuICpcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqXG4gKi9cblxuXG5cbnZhciBBcGlDbGllbnQgPSByZXF1aXJlKCcuLi9BcGlDbGllbnQnKTtcblxuLyoqXG4gKiBSb290IHNlcnZpY2UuXG4gKiBAbW9kdWxlIGFwaS9Sb290QXBpXG4gKi9cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IFJvb3RBcGkuIFxuICogQGFsaWFzIG1vZHVsZTphcGkvUm9vdEFwaVxuICogQGNsYXNzXG4gKiBAcGFyYW0ge21vZHVsZTpBcGlDbGllbnR9IGFwaUNsaWVudCBPcHRpb25hbCBBUEkgY2xpZW50IGltcGxlbWVudGF0aW9uIHRvIHVzZSxcbiAqIGRlZmF1bHQgdG8ge0BsaW5rIG1vZHVsZTpBcGlDbGllbnQjaW5zdGFuY2V9IGlmIHVuc3BlY2lmaWVkLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFwaUNsaWVudCkge1xuICB0aGlzLmFwaUNsaWVudCA9IGFwaUNsaWVudCB8fCBBcGlDbGllbnQuaW5zdGFuY2U7XG5cbiAgLyoqXG4gICAqIExpc3QgYXBpIHJvb3QgcmVzb3VyY2VzXG4gICAqIEdldCBsaW5rcyB0byBhbGwgb3RoZXIgcmVzb3VyY2VzIGF2YWlsYWJsZSBpbiB0aGUgQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvQVBJUm9vdH0gYW5kIEhUVFAgcmVzcG9uc2VcbiAgICovXG4gIHRoaXMuZ2V0Um9vdFdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgcG9zdEJvZHkgPSBudWxsO1xuXG4gICAgdmFyIHBhdGhQYXJhbXMgPSB7XG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgJ2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2ZpZWxkcyddID8gb3B0c1snZmllbGRzJ10gOiBvcHRzWydmaWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2V4Y2x1ZGVfZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZXhjbHVkZUZpZWxkcyddID8gb3B0c1snZXhjbHVkZUZpZWxkcyddIDogb3B0c1snZXhjbHVkZV9maWVsZHMnXSwgJ2NzdicpXG4gICAgfTtcbiAgICB2YXIgaGVhZGVyUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgZm9ybVBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGF1dGhOYW1lcyA9IFsnYmFzaWNBdXRoJ107XG4gICAgdmFyIGNvbnRlbnRUeXBlcyA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuICAgIHZhciBhY2NlcHRzID0gWydhcHBsaWNhdGlvbi9qc29uJywgJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbiddO1xuICAgIHZhciByZXR1cm5UeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LmNhbGxBcGkoXG4gICAgICAnLycsICdHRVQnLFxuICAgICAgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMsIGhlYWRlclBhcmFtcywgZm9ybVBhcmFtcywgcG9zdEJvZHksXG4gICAgICBhdXRoTmFtZXMsIGNvbnRlbnRUeXBlcywgYWNjZXB0cywgcmV0dXJuVHlwZVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3QgYXBpIHJvb3QgcmVzb3VyY2VzXG4gICAqIEdldCBsaW5rcyB0byBhbGwgb3RoZXIgcmVzb3VyY2VzIGF2YWlsYWJsZSBpbiB0aGUgQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvQVBJUm9vdH1cbiAgICovXG4gIHRoaXMuZ2V0Um9vdCA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRSb290V2l0aEh0dHBJbmZvKG9wdHMpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZV9hbmRfZGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2VfYW5kX2RhdGEuZGF0YTtcbiAgICAgIH0pO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/RootApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * SearchCampaigns service.\n * @module api/SearchCampaignsApi\n */\n\n/**\n * Constructs a new SearchCampaignsApi. \n * @alias module:api/SearchCampaignsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Search campaigns\n   * Search all campaigns for the specified query terms.\n   * @param {String} query The search query used to filter results.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaigns} and HTTP response\n   */\n  this.searchWithHttpInfo = function(query, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'query' is set\n    if (query === undefined || query === null) {\n      throw new Error(\"Missing the required parameter 'query' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'query': query\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/search-campaigns', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Search campaigns\n   * Search all campaigns for the specified query terms.\n   * @param {String} query The search query used to filter results.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaigns}\n   */\n  this.search = function(query, opts) {\n    return this.searchWithHttpInfo(query, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9hcGkvU2VhcmNoQ2FtcGFpZ25zQXBpLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBLGdCQUFnQixtQkFBTyxDQUFDLDBGQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCLGVBQWUsaUNBQWlDO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsZ0JBQWdCO0FBQzdCLGNBQWMsU0FBUyxHQUFHLHlDQUF5QywwQ0FBMEMsOEJBQThCO0FBQzNJO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsY0FBYyxTQUFTLEdBQUcseUNBQXlDLHFCQUFxQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FtdWVcXERlc2t0b3BcXEJlYXV0eVNvZnQtbGFuZGluZ3BhZ2VcXG5vZGVfbW9kdWxlc1xcQG1haWxjaGltcFxcbWFpbGNoaW1wX21hcmtldGluZ1xcc3JjXFxhcGlcXFNlYXJjaENhbXBhaWduc0FwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWFpbGNoaW1wIE1hcmtldGluZyBBUElcbiAqIE5vIGRlc2NyaXB0aW9uIHByb3ZpZGVkIChnZW5lcmF0ZWQgYnkgU3dhZ2dlciBDb2RlZ2VuIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4pXG4gKlxuICogT3BlbkFQSSBzcGVjIHZlcnNpb246IDMuMC44MFxuICogQ29udGFjdDogYXBpaGVscEBtYWlsY2hpbXAuY29tXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSB0aGUgc3dhZ2dlciBjb2RlIGdlbmVyYXRvciBwcm9ncmFtLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbi5naXRcbiAqXG4gKiBTd2FnZ2VyIENvZGVnZW4gdmVyc2lvbjogMi40LjEyXG4gKlxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICpcbiAqL1xuXG5cblxudmFyIEFwaUNsaWVudCA9IHJlcXVpcmUoJy4uL0FwaUNsaWVudCcpO1xuXG4vKipcbiAqIFNlYXJjaENhbXBhaWducyBzZXJ2aWNlLlxuICogQG1vZHVsZSBhcGkvU2VhcmNoQ2FtcGFpZ25zQXBpXG4gKi9cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IFNlYXJjaENhbXBhaWduc0FwaS4gXG4gKiBAYWxpYXMgbW9kdWxlOmFwaS9TZWFyY2hDYW1wYWlnbnNBcGlcbiAqIEBjbGFzc1xuICogQHBhcmFtIHttb2R1bGU6QXBpQ2xpZW50fSBhcGlDbGllbnQgT3B0aW9uYWwgQVBJIGNsaWVudCBpbXBsZW1lbnRhdGlvbiB0byB1c2UsXG4gKiBkZWZhdWx0IHRvIHtAbGluayBtb2R1bGU6QXBpQ2xpZW50I2luc3RhbmNlfSBpZiB1bnNwZWNpZmllZC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcGlDbGllbnQpIHtcbiAgdGhpcy5hcGlDbGllbnQgPSBhcGlDbGllbnQgfHwgQXBpQ2xpZW50Lmluc3RhbmNlO1xuXG4gIC8qKlxuICAgKiBTZWFyY2ggY2FtcGFpZ25zXG4gICAqIFNlYXJjaCBhbGwgY2FtcGFpZ25zIGZvciB0aGUgc3BlY2lmaWVkIHF1ZXJ5IHRlcm1zLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlcnkgVGhlIHNlYXJjaCBxdWVyeSB1c2VkIHRvIGZpbHRlciByZXN1bHRzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvQ2FtcGFpZ25zfSBhbmQgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy5zZWFyY2hXaXRoSHR0cEluZm8gPSBmdW5jdGlvbihxdWVyeSwgb3B0cykge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIHZhciBwb3N0Qm9keSA9IG51bGw7XG5cbiAgICAvLyB2ZXJpZnkgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAncXVlcnknIGlzIHNldFxuICAgIGlmIChxdWVyeSA9PT0gdW5kZWZpbmVkIHx8IHF1ZXJ5ID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3F1ZXJ5JyB3aGVuIGNhbGxpbmcgXCIpO1xuICAgIH1cblxuICAgIHZhciBwYXRoUGFyYW1zID0ge1xuICAgIH07XG4gICAgXG4gICAgLypcbiAgICAgVGhlIGZvbGxvd2luZyBibG9jayBidWlsZGluZyBxdWVyeVBhcmFtcyBpcyBnb2luZyB0byBsb29rIGEgbGl0dGxlIG9kZCwgd2UncmUgZ29pbmcgbG9vayBmb3IgdmFsdWVzIGluICRvcHRzIHdpdGggYm90aFxuICAgICBjYW1lbENhc2UgYW5kIHNuYWtlX2Nhc2UgZm9ybWF0ICh3aGljaCB3aWxsIGJlIHRoZSBzYW1lIGlmIHNpbmd1bGFyIHdvcmQpLiBUaGlzIGlzIGJlY2F1c2UgdGhlIEFQSSBkb2NzIHVzZSBzbmFrZV9jYXNlXG4gICAgIGJ1dCBlYXJseSB2ZXJzaW9ucyBvZiB0aGVzZSBTREtzIHVzZWQgY2FtZWxDYXNlLiBTbyB0byBiZSBiYWNrd2FyZCBjb21wYXRpYmxlIHdlJ2xsIHVzZSBib3RoLiBcbiAgICAqL1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHtcbiAgICAgICdmaWVsZHMnOiB0aGlzLmFwaUNsaWVudC5idWlsZENvbGxlY3Rpb25QYXJhbShvcHRzWydmaWVsZHMnXSA/IG9wdHNbJ2ZpZWxkcyddIDogb3B0c1snZmllbGRzJ10sICdjc3YnKSxcbiAgICAgICdleGNsdWRlX2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2V4Y2x1ZGVGaWVsZHMnXSA/IG9wdHNbJ2V4Y2x1ZGVGaWVsZHMnXSA6IG9wdHNbJ2V4Y2x1ZGVfZmllbGRzJ10sICdjc3YnKSxcbiAgICAgICdxdWVyeSc6IHF1ZXJ5XG4gICAgfTtcbiAgICB2YXIgaGVhZGVyUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgZm9ybVBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGF1dGhOYW1lcyA9IFsnYmFzaWNBdXRoJ107XG4gICAgdmFyIGNvbnRlbnRUeXBlcyA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuICAgIHZhciBhY2NlcHRzID0gWydhcHBsaWNhdGlvbi9qc29uJywgJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbiddO1xuICAgIHZhciByZXR1cm5UeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LmNhbGxBcGkoXG4gICAgICAnL3NlYXJjaC1jYW1wYWlnbnMnLCAnR0VUJyxcbiAgICAgIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgYXV0aE5hbWVzLCBjb250ZW50VHlwZXMsIGFjY2VwdHMsIHJldHVyblR5cGVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBTZWFyY2ggY2FtcGFpZ25zXG4gICAqIFNlYXJjaCBhbGwgY2FtcGFpZ25zIGZvciB0aGUgc3BlY2lmaWVkIHF1ZXJ5IHRlcm1zLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlcnkgVGhlIHNlYXJjaCBxdWVyeSB1c2VkIHRvIGZpbHRlciByZXN1bHRzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvQ2FtcGFpZ25zfVxuICAgKi9cbiAgdGhpcy5zZWFyY2ggPSBmdW5jdGlvbihxdWVyeSwgb3B0cykge1xuICAgIHJldHVybiB0aGlzLnNlYXJjaFdpdGhIdHRwSW5mbyhxdWVyeSwgb3B0cylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlX2FuZF9kYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZV9hbmRfZGF0YS5kYXRhO1xuICAgICAgfSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchCampaignsApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * SearchMembers service.\n * @module api/SearchMembersApi\n */\n\n/**\n * Constructs a new SearchMembersApi. \n * @alias module:api/SearchMembersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Search members\n   * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.\n   * @param {String} query The search query used to filter results. Query should be a valid email, or a string representing a contact's first or last name.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.listId The unique id for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Members} and HTTP response\n   */\n  this.searchWithHttpInfo = function(query, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'query' is set\n    if (query === undefined || query === null) {\n      throw new Error(\"Missing the required parameter 'query' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'query': query,\n      'list_id': ( opts['listId'] ? opts['listId'] : opts['list_id'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/search-members', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Search members\n   * Search for list members. This search can be restricted to a specific list, or can be used to search across all lists in an account.\n   * @param {String} query The search query used to filter results. Query should be a valid email, or a string representing a contact's first or last name.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {String} opts.listId The unique id for the list.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Members}\n   */\n  this.search = function(query, opts) {\n    return this.searchWithHttpInfo(query, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9hcGkvU2VhcmNoTWVtYmVyc0FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQSxnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBYzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QixlQUFlLGlDQUFpQztBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLFFBQVE7QUFDckIsY0FBYyxTQUFTLEdBQUcseUNBQXlDLDBDQUEwQyw0QkFBNEI7QUFDekk7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsUUFBUTtBQUNyQixjQUFjLFNBQVMsR0FBRyx5Q0FBeUMscUJBQXFCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzYW11ZVxcRGVza3RvcFxcQmVhdXR5U29mdC1sYW5kaW5ncGFnZVxcbm9kZV9tb2R1bGVzXFxAbWFpbGNoaW1wXFxtYWlsY2hpbXBfbWFya2V0aW5nXFxzcmNcXGFwaVxcU2VhcmNoTWVtYmVyc0FwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWFpbGNoaW1wIE1hcmtldGluZyBBUElcbiAqIE5vIGRlc2NyaXB0aW9uIHByb3ZpZGVkIChnZW5lcmF0ZWQgYnkgU3dhZ2dlciBDb2RlZ2VuIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4pXG4gKlxuICogT3BlbkFQSSBzcGVjIHZlcnNpb246IDMuMC44MFxuICogQ29udGFjdDogYXBpaGVscEBtYWlsY2hpbXAuY29tXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSB0aGUgc3dhZ2dlciBjb2RlIGdlbmVyYXRvciBwcm9ncmFtLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbi5naXRcbiAqXG4gKiBTd2FnZ2VyIENvZGVnZW4gdmVyc2lvbjogMi40LjEyXG4gKlxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICpcbiAqL1xuXG5cblxudmFyIEFwaUNsaWVudCA9IHJlcXVpcmUoJy4uL0FwaUNsaWVudCcpO1xuXG4vKipcbiAqIFNlYXJjaE1lbWJlcnMgc2VydmljZS5cbiAqIEBtb2R1bGUgYXBpL1NlYXJjaE1lbWJlcnNBcGlcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgU2VhcmNoTWVtYmVyc0FwaS4gXG4gKiBAYWxpYXMgbW9kdWxlOmFwaS9TZWFyY2hNZW1iZXJzQXBpXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7bW9kdWxlOkFwaUNsaWVudH0gYXBpQ2xpZW50IE9wdGlvbmFsIEFQSSBjbGllbnQgaW1wbGVtZW50YXRpb24gdG8gdXNlLFxuICogZGVmYXVsdCB0byB7QGxpbmsgbW9kdWxlOkFwaUNsaWVudCNpbnN0YW5jZX0gaWYgdW5zcGVjaWZpZWQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXBpQ2xpZW50KSB7XG4gIHRoaXMuYXBpQ2xpZW50ID0gYXBpQ2xpZW50IHx8IEFwaUNsaWVudC5pbnN0YW5jZTtcblxuICAvKipcbiAgICogU2VhcmNoIG1lbWJlcnNcbiAgICogU2VhcmNoIGZvciBsaXN0IG1lbWJlcnMuIFRoaXMgc2VhcmNoIGNhbiBiZSByZXN0cmljdGVkIHRvIGEgc3BlY2lmaWMgbGlzdCwgb3IgY2FuIGJlIHVzZWQgdG8gc2VhcmNoIGFjcm9zcyBhbGwgbGlzdHMgaW4gYW4gYWNjb3VudC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHF1ZXJ5IFRoZSBzZWFyY2ggcXVlcnkgdXNlZCB0byBmaWx0ZXIgcmVzdWx0cy4gUXVlcnkgc2hvdWxkIGJlIGEgdmFsaWQgZW1haWwsIG9yIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhIGNvbnRhY3QncyBmaXJzdCBvciBsYXN0IG5hbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0cy5saXN0SWQgVGhlIHVuaXF1ZSBpZCBmb3IgdGhlIGxpc3QuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL01lbWJlcnN9IGFuZCBIVFRQIHJlc3BvbnNlXG4gICAqL1xuICB0aGlzLnNlYXJjaFdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKHF1ZXJ5LCBvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdmFyIHBvc3RCb2R5ID0gbnVsbDtcblxuICAgIC8vIHZlcmlmeSB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdxdWVyeScgaXMgc2V0XG4gICAgaWYgKHF1ZXJ5ID09PSB1bmRlZmluZWQgfHwgcXVlcnkgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAncXVlcnknIHdoZW4gY2FsbGluZyBcIik7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhQYXJhbXMgPSB7XG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgJ2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2ZpZWxkcyddID8gb3B0c1snZmllbGRzJ10gOiBvcHRzWydmaWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2V4Y2x1ZGVfZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZXhjbHVkZUZpZWxkcyddID8gb3B0c1snZXhjbHVkZUZpZWxkcyddIDogb3B0c1snZXhjbHVkZV9maWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ3F1ZXJ5JzogcXVlcnksXG4gICAgICAnbGlzdF9pZCc6ICggb3B0c1snbGlzdElkJ10gPyBvcHRzWydsaXN0SWQnXSA6IG9wdHNbJ2xpc3RfaWQnXSlcbiAgICB9O1xuICAgIHZhciBoZWFkZXJQYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBmb3JtUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgYXV0aE5hbWVzID0gWydiYXNpY0F1dGgnXTtcbiAgICB2YXIgY29udGVudFR5cGVzID0gWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgdmFyIGFjY2VwdHMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJ107XG4gICAgdmFyIHJldHVyblR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQuY2FsbEFwaShcbiAgICAgICcvc2VhcmNoLW1lbWJlcnMnLCAnR0VUJyxcbiAgICAgIHBhdGhQYXJhbXMsIHF1ZXJ5UGFyYW1zLCBoZWFkZXJQYXJhbXMsIGZvcm1QYXJhbXMsIHBvc3RCb2R5LFxuICAgICAgYXV0aE5hbWVzLCBjb250ZW50VHlwZXMsIGFjY2VwdHMsIHJldHVyblR5cGVcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBTZWFyY2ggbWVtYmVyc1xuICAgKiBTZWFyY2ggZm9yIGxpc3QgbWVtYmVycy4gVGhpcyBzZWFyY2ggY2FuIGJlIHJlc3RyaWN0ZWQgdG8gYSBzcGVjaWZpYyBsaXN0LCBvciBjYW4gYmUgdXNlZCB0byBzZWFyY2ggYWNyb3NzIGFsbCBsaXN0cyBpbiBhbiBhY2NvdW50LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlcnkgVGhlIHNlYXJjaCBxdWVyeSB1c2VkIHRvIGZpbHRlciByZXN1bHRzLiBRdWVyeSBzaG91bGQgYmUgYSB2YWxpZCBlbWFpbCwgb3IgYSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgY29udGFjdCdzIGZpcnN0IG9yIGxhc3QgbmFtZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byByZXR1cm4uIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmV4Y2x1ZGVGaWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gZXhjbHVkZS4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRzLmxpc3RJZCBUaGUgdW5pcXVlIGlkIGZvciB0aGUgbGlzdC5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvTWVtYmVyc31cbiAgICovXG4gIHRoaXMuc2VhcmNoID0gZnVuY3Rpb24ocXVlcnksIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hXaXRoSHR0cEluZm8ocXVlcnksIG9wdHMpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZV9hbmRfZGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2VfYW5kX2RhdGEuZGF0YTtcbiAgICAgIH0pO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/SearchMembersApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/SurveysApi.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/SurveysApi.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Surveys service.\n * @module api/SurveysApi\n */\n\n/**\n * Constructs a new SurveysApi. \n * @alias module:api/SurveysApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Publish a Survey\n   * Publish a survey that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.publishSurveyWithHttpInfo = function(listId, surveyId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'surveyId' is set\n    if (surveyId === undefined || surveyId === null) {\n      throw new Error(\"Missing the required parameter 'surveyId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'survey_id': surveyId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys/{survey_id}/actions/publish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Publish a Survey\n   * Publish a survey that is in draft, unpublished, or has been previously published and edited.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.publishSurvey = function(listId, surveyId) {\n    return this.publishSurveyWithHttpInfo(listId, surveyId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Unpublish a Survey\n   * Unpublish a survey that has been published.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.unpublishSurveyWithHttpInfo = function(listId, surveyId) {\n    var postBody = null;\n\n    // verify the required parameter 'listId' is set\n    if (listId === undefined || listId === null) {\n      throw new Error(\"Missing the required parameter 'listId' when calling \");\n    }\n\n    // verify the required parameter 'surveyId' is set\n    if (surveyId === undefined || surveyId === null) {\n      throw new Error(\"Missing the required parameter 'surveyId' when calling \");\n    }\n\n    var pathParams = {\n      'list_id': listId,\n      'survey_id': surveyId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/lists/{list_id}/surveys/{survey_id}/actions/unpublish', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Unpublish a Survey\n   * Unpublish a survey that has been published.\n   * @param {String} listId The unique ID for the list.\n   * @param {String} surveyId The ID of the survey.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.unpublishSurvey = function(listId, surveyId) {\n    return this.unpublishSurveyWithHttpInfo(listId, surveyId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9hcGkvU3VydmV5c0FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQSxnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBYzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGtCQUFrQjtBQUM3QixlQUFlLGlDQUFpQztBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjLFNBQVMsR0FBRyx5Q0FBeUM7QUFDbkU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUSxVQUFVLFVBQVU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsU0FBUyxHQUFHO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjLFNBQVMsR0FBRyx5Q0FBeUM7QUFDbkU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUSxVQUFVLFVBQVU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsU0FBUyxHQUFHO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzYW11ZVxcRGVza3RvcFxcQmVhdXR5U29mdC1sYW5kaW5ncGFnZVxcbm9kZV9tb2R1bGVzXFxAbWFpbGNoaW1wXFxtYWlsY2hpbXBfbWFya2V0aW5nXFxzcmNcXGFwaVxcU3VydmV5c0FwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogTWFpbGNoaW1wIE1hcmtldGluZyBBUElcbiAqIE5vIGRlc2NyaXB0aW9uIHByb3ZpZGVkIChnZW5lcmF0ZWQgYnkgU3dhZ2dlciBDb2RlZ2VuIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4pXG4gKlxuICogT3BlbkFQSSBzcGVjIHZlcnNpb246IDMuMC44MFxuICogQ29udGFjdDogYXBpaGVscEBtYWlsY2hpbXAuY29tXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSB0aGUgc3dhZ2dlciBjb2RlIGdlbmVyYXRvciBwcm9ncmFtLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbi5naXRcbiAqXG4gKiBTd2FnZ2VyIENvZGVnZW4gdmVyc2lvbjogMi40LjEyXG4gKlxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICpcbiAqL1xuXG5cblxudmFyIEFwaUNsaWVudCA9IHJlcXVpcmUoJy4uL0FwaUNsaWVudCcpO1xuXG4vKipcbiAqIFN1cnZleXMgc2VydmljZS5cbiAqIEBtb2R1bGUgYXBpL1N1cnZleXNBcGlcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgU3VydmV5c0FwaS4gXG4gKiBAYWxpYXMgbW9kdWxlOmFwaS9TdXJ2ZXlzQXBpXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7bW9kdWxlOkFwaUNsaWVudH0gYXBpQ2xpZW50IE9wdGlvbmFsIEFQSSBjbGllbnQgaW1wbGVtZW50YXRpb24gdG8gdXNlLFxuICogZGVmYXVsdCB0byB7QGxpbmsgbW9kdWxlOkFwaUNsaWVudCNpbnN0YW5jZX0gaWYgdW5zcGVjaWZpZWQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXBpQ2xpZW50KSB7XG4gIHRoaXMuYXBpQ2xpZW50ID0gYXBpQ2xpZW50IHx8IEFwaUNsaWVudC5pbnN0YW5jZTtcblxuICAvKipcbiAgICogUHVibGlzaCBhIFN1cnZleVxuICAgKiBQdWJsaXNoIGEgc3VydmV5IHRoYXQgaXMgaW4gZHJhZnQsIHVucHVibGlzaGVkLCBvciBoYXMgYmVlbiBwcmV2aW91c2x5IHB1Ymxpc2hlZCBhbmQgZWRpdGVkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbGlzdElkIFRoZSB1bmlxdWUgSUQgZm9yIHRoZSBsaXN0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3VydmV5SWQgVGhlIElEIG9mIHRoZSBzdXJ2ZXkuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIEhUVFAgcmVzcG9uc2VcbiAgICovXG4gIHRoaXMucHVibGlzaFN1cnZleVdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKGxpc3RJZCwgc3VydmV5SWQpIHtcbiAgICB2YXIgcG9zdEJvZHkgPSBudWxsO1xuXG4gICAgLy8gdmVyaWZ5IHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2xpc3RJZCcgaXMgc2V0XG4gICAgaWYgKGxpc3RJZCA9PT0gdW5kZWZpbmVkIHx8IGxpc3RJZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdsaXN0SWQnIHdoZW4gY2FsbGluZyBcIik7XG4gICAgfVxuXG4gICAgLy8gdmVyaWZ5IHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3N1cnZleUlkJyBpcyBzZXRcbiAgICBpZiAoc3VydmV5SWQgPT09IHVuZGVmaW5lZCB8fCBzdXJ2ZXlJZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdzdXJ2ZXlJZCcgd2hlbiBjYWxsaW5nIFwiKTtcbiAgICB9XG5cbiAgICB2YXIgcGF0aFBhcmFtcyA9IHtcbiAgICAgICdsaXN0X2lkJzogbGlzdElkLFxuICAgICAgJ3N1cnZleV9pZCc6IHN1cnZleUlkXG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgIH07XG4gICAgdmFyIGhlYWRlclBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGZvcm1QYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBhdXRoTmFtZXMgPSBbJ2Jhc2ljQXV0aCddO1xuICAgIHZhciBjb250ZW50VHlwZXMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICB2YXIgYWNjZXB0cyA9IFsnYXBwbGljYXRpb24vanNvbicsICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nXTtcbiAgICB2YXIgcmV0dXJuVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgIHJldHVybiB0aGlzLmFwaUNsaWVudC5jYWxsQXBpKFxuICAgICAgJy9saXN0cy97bGlzdF9pZH0vc3VydmV5cy97c3VydmV5X2lkfS9hY3Rpb25zL3B1Ymxpc2gnLCAnUE9TVCcsXG4gICAgICBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcywgaGVhZGVyUGFyYW1zLCBmb3JtUGFyYW1zLCBwb3N0Qm9keSxcbiAgICAgIGF1dGhOYW1lcywgY29udGVudFR5cGVzLCBhY2NlcHRzLCByZXR1cm5UeXBlXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogUHVibGlzaCBhIFN1cnZleVxuICAgKiBQdWJsaXNoIGEgc3VydmV5IHRoYXQgaXMgaW4gZHJhZnQsIHVucHVibGlzaGVkLCBvciBoYXMgYmVlbiBwcmV2aW91c2x5IHB1Ymxpc2hlZCBhbmQgZWRpdGVkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbGlzdElkIFRoZSB1bmlxdWUgSUQgZm9yIHRoZSBsaXN0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3VydmV5SWQgVGhlIElEIG9mIHRoZSBzdXJ2ZXkuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9XG4gICAqL1xuICB0aGlzLnB1Ymxpc2hTdXJ2ZXkgPSBmdW5jdGlvbihsaXN0SWQsIHN1cnZleUlkKSB7XG4gICAgcmV0dXJuIHRoaXMucHVibGlzaFN1cnZleVdpdGhIdHRwSW5mbyhsaXN0SWQsIHN1cnZleUlkKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VfYW5kX2RhdGEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlX2FuZF9kYXRhLmRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnB1Ymxpc2ggYSBTdXJ2ZXlcbiAgICogVW5wdWJsaXNoIGEgc3VydmV5IHRoYXQgaGFzIGJlZW4gcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbGlzdElkIFRoZSB1bmlxdWUgSUQgZm9yIHRoZSBsaXN0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc3VydmV5SWQgVGhlIElEIG9mIHRoZSBzdXJ2ZXkuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIEhUVFAgcmVzcG9uc2VcbiAgICovXG4gIHRoaXMudW5wdWJsaXNoU3VydmV5V2l0aEh0dHBJbmZvID0gZnVuY3Rpb24obGlzdElkLCBzdXJ2ZXlJZCkge1xuICAgIHZhciBwb3N0Qm9keSA9IG51bGw7XG5cbiAgICAvLyB2ZXJpZnkgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnbGlzdElkJyBpcyBzZXRcbiAgICBpZiAobGlzdElkID09PSB1bmRlZmluZWQgfHwgbGlzdElkID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2xpc3RJZCcgd2hlbiBjYWxsaW5nIFwiKTtcbiAgICB9XG5cbiAgICAvLyB2ZXJpZnkgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnc3VydmV5SWQnIGlzIHNldFxuICAgIGlmIChzdXJ2ZXlJZCA9PT0gdW5kZWZpbmVkIHx8IHN1cnZleUlkID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3N1cnZleUlkJyB3aGVuIGNhbGxpbmcgXCIpO1xuICAgIH1cblxuICAgIHZhciBwYXRoUGFyYW1zID0ge1xuICAgICAgJ2xpc3RfaWQnOiBsaXN0SWQsXG4gICAgICAnc3VydmV5X2lkJzogc3VydmV5SWRcbiAgICB9O1xuICAgIFxuICAgIC8qXG4gICAgIFRoZSBmb2xsb3dpbmcgYmxvY2sgYnVpbGRpbmcgcXVlcnlQYXJhbXMgaXMgZ29pbmcgdG8gbG9vayBhIGxpdHRsZSBvZGQsIHdlJ3JlIGdvaW5nIGxvb2sgZm9yIHZhbHVlcyBpbiAkb3B0cyB3aXRoIGJvdGhcbiAgICAgY2FtZWxDYXNlIGFuZCBzbmFrZV9jYXNlIGZvcm1hdCAod2hpY2ggd2lsbCBiZSB0aGUgc2FtZSBpZiBzaW5ndWxhciB3b3JkKS4gVGhpcyBpcyBiZWNhdXNlIHRoZSBBUEkgZG9jcyB1c2Ugc25ha2VfY2FzZVxuICAgICBidXQgZWFybHkgdmVyc2lvbnMgb2YgdGhlc2UgU0RLcyB1c2VkIGNhbWVsQ2FzZS4gU28gdG8gYmUgYmFja3dhcmQgY29tcGF0aWJsZSB3ZSdsbCB1c2UgYm90aC4gXG4gICAgKi9cbiAgICB2YXIgcXVlcnlQYXJhbXMgPSB7XG4gICAgfTtcbiAgICB2YXIgaGVhZGVyUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgZm9ybVBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGF1dGhOYW1lcyA9IFsnYmFzaWNBdXRoJ107XG4gICAgdmFyIGNvbnRlbnRUeXBlcyA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuICAgIHZhciBhY2NlcHRzID0gWydhcHBsaWNhdGlvbi9qc29uJywgJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbiddO1xuICAgIHZhciByZXR1cm5UeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LmNhbGxBcGkoXG4gICAgICAnL2xpc3RzL3tsaXN0X2lkfS9zdXJ2ZXlzL3tzdXJ2ZXlfaWR9L2FjdGlvbnMvdW5wdWJsaXNoJywgJ1BPU1QnLFxuICAgICAgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMsIGhlYWRlclBhcmFtcywgZm9ybVBhcmFtcywgcG9zdEJvZHksXG4gICAgICBhdXRoTmFtZXMsIGNvbnRlbnRUeXBlcywgYWNjZXB0cywgcmV0dXJuVHlwZVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFVucHVibGlzaCBhIFN1cnZleVxuICAgKiBVbnB1Ymxpc2ggYSBzdXJ2ZXkgdGhhdCBoYXMgYmVlbiBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBsaXN0SWQgVGhlIHVuaXF1ZSBJRCBmb3IgdGhlIGxpc3QuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdXJ2ZXlJZCBUaGUgSUQgb2YgdGhlIHN1cnZleS5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX1cbiAgICovXG4gIHRoaXMudW5wdWJsaXNoU3VydmV5ID0gZnVuY3Rpb24obGlzdElkLCBzdXJ2ZXlJZCkge1xuICAgIHJldHVybiB0aGlzLnVucHVibGlzaFN1cnZleVdpdGhIdHRwSW5mbyhsaXN0SWQsIHN1cnZleUlkKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VfYW5kX2RhdGEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlX2FuZF9kYXRhLmRhdGE7XG4gICAgICB9KTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/SurveysApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * TemplateFolders service.\n * @module api/TemplateFoldersApi\n */\n\n/**\n * Constructs a new TemplateFoldersApi. \n * @alias module:api/TemplateFoldersApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete template folder\n   * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the template folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.removeWithHttpInfo = function(folderId) {\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete template folder\n   * Delete a specific template folder, and mark all the templates in the folder as 'unfiled'.\n   * @param {String} folderId The unique id for the template folder.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.remove = function(folderId) {\n    return this.removeWithHttpInfo(folderId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List template folders\n   * Get all folders used to organize templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolders} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List template folders\n   * Get all folders used to organize templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolders}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get template folder\n   * Get information about a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.getWithHttpInfo = function(folderId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get template folder\n   * Get information about a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.get = function(folderId, opts) {\n    return this.getWithHttpInfo(folderId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update template folder\n   * Update a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {module:model/TemplateFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.updateWithHttpInfo = function(folderId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'folderId' is set\n    if (folderId === undefined || folderId === null) {\n      throw new Error(\"Missing the required parameter 'folderId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'folder_id': folderId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders/{folder_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update template folder\n   * Update a specific folder used to organize templates.\n   * @param {String} folderId The unique id for the template folder.\n   * @param {module:model/TemplateFolder2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.update = function(folderId, body) {\n    return this.updateWithHttpInfo(folderId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add template folder\n   * Create a new template folder.\n   * @param {module:model/TemplateFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateFolder} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/template-folders', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add template folder\n   * Create a new template folder.\n   * @param {module:model/TemplateFolder1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateFolder}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9hcGkvVGVtcGxhdGVGb2xkZXJzQXBpLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBLGdCQUFnQixtQkFBTyxDQUFDLDBGQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCLGVBQWUsaUNBQWlDO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYyxTQUFTLEdBQUcseUNBQXlDO0FBQ25FO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCLFVBQVU7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYyxTQUFTLEdBQUc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjLFNBQVMsR0FBRyx5Q0FBeUMsMENBQTBDLG9DQUFvQztBQUNqSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLGdCQUFnQjtBQUM3QixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsU0FBUyxHQUFHLHlDQUF5QyxxQkFBcUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsZ0JBQWdCO0FBQzdCLGNBQWMsU0FBUyxHQUFHLHlDQUF5QywwQ0FBMEMsbUNBQW1DO0FBQ2hKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCLFVBQVU7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsZ0JBQWdCO0FBQzdCLGNBQWMsU0FBUyxHQUFHLHlDQUF5QyxxQkFBcUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSw4QkFBOEI7QUFDM0MsY0FBYyxTQUFTLEdBQUcseUNBQXlDLDBDQUEwQyxtQ0FBbUM7QUFDaEo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEIsVUFBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLDhCQUE4QjtBQUMzQyxjQUFjLFNBQVMsR0FBRyx5Q0FBeUMscUJBQXFCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSw4QkFBOEI7QUFDM0MsY0FBYyxTQUFTLEdBQUcseUNBQXlDLDBDQUEwQyxtQ0FBbUM7QUFDaEo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOEJBQThCO0FBQzNDLGNBQWMsU0FBUyxHQUFHLHlDQUF5QyxxQkFBcUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXHNhbXVlXFxEZXNrdG9wXFxCZWF1dHlTb2Z0LWxhbmRpbmdwYWdlXFxub2RlX21vZHVsZXNcXEBtYWlsY2hpbXBcXG1haWxjaGltcF9tYXJrZXRpbmdcXHNyY1xcYXBpXFxUZW1wbGF0ZUZvbGRlcnNBcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIE1haWxjaGltcCBNYXJrZXRpbmcgQVBJXG4gKiBObyBkZXNjcmlwdGlvbiBwcm92aWRlZCAoZ2VuZXJhdGVkIGJ5IFN3YWdnZXIgQ29kZWdlbiBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb2RlZ2VuKVxuICpcbiAqIE9wZW5BUEkgc3BlYyB2ZXJzaW9uOiAzLjAuODBcbiAqIENvbnRhY3Q6IGFwaWhlbHBAbWFpbGNoaW1wLmNvbVxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgdGhlIHN3YWdnZXIgY29kZSBnZW5lcmF0b3IgcHJvZ3JhbS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4uZ2l0XG4gKlxuICogU3dhZ2dlciBDb2RlZ2VuIHZlcnNpb246IDIuNC4xMlxuICpcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqXG4gKi9cblxuXG5cbnZhciBBcGlDbGllbnQgPSByZXF1aXJlKCcuLi9BcGlDbGllbnQnKTtcblxuLyoqXG4gKiBUZW1wbGF0ZUZvbGRlcnMgc2VydmljZS5cbiAqIEBtb2R1bGUgYXBpL1RlbXBsYXRlRm9sZGVyc0FwaVxuICovXG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBUZW1wbGF0ZUZvbGRlcnNBcGkuIFxuICogQGFsaWFzIG1vZHVsZTphcGkvVGVtcGxhdGVGb2xkZXJzQXBpXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7bW9kdWxlOkFwaUNsaWVudH0gYXBpQ2xpZW50IE9wdGlvbmFsIEFQSSBjbGllbnQgaW1wbGVtZW50YXRpb24gdG8gdXNlLFxuICogZGVmYXVsdCB0byB7QGxpbmsgbW9kdWxlOkFwaUNsaWVudCNpbnN0YW5jZX0gaWYgdW5zcGVjaWZpZWQuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXBpQ2xpZW50KSB7XG4gIHRoaXMuYXBpQ2xpZW50ID0gYXBpQ2xpZW50IHx8IEFwaUNsaWVudC5pbnN0YW5jZTtcblxuICAvKipcbiAgICogRGVsZXRlIHRlbXBsYXRlIGZvbGRlclxuICAgKiBEZWxldGUgYSBzcGVjaWZpYyB0ZW1wbGF0ZSBmb2xkZXIsIGFuZCBtYXJrIGFsbCB0aGUgdGVtcGxhdGVzIGluIHRoZSBmb2xkZXIgYXMgJ3VuZmlsZWQnLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZm9sZGVySWQgVGhlIHVuaXF1ZSBpZCBmb3IgdGhlIHRlbXBsYXRlIGZvbGRlci5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy5yZW1vdmVXaXRoSHR0cEluZm8gPSBmdW5jdGlvbihmb2xkZXJJZCkge1xuICAgIHZhciBwb3N0Qm9keSA9IG51bGw7XG5cbiAgICAvLyB2ZXJpZnkgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnZm9sZGVySWQnIGlzIHNldFxuICAgIGlmIChmb2xkZXJJZCA9PT0gdW5kZWZpbmVkIHx8IGZvbGRlcklkID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZvbGRlcklkJyB3aGVuIGNhbGxpbmcgXCIpO1xuICAgIH1cblxuICAgIHZhciBwYXRoUGFyYW1zID0ge1xuICAgICAgJ2ZvbGRlcl9pZCc6IGZvbGRlcklkXG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgIH07XG4gICAgdmFyIGhlYWRlclBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGZvcm1QYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBhdXRoTmFtZXMgPSBbJ2Jhc2ljQXV0aCddO1xuICAgIHZhciBjb250ZW50VHlwZXMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICB2YXIgYWNjZXB0cyA9IFsnYXBwbGljYXRpb24vanNvbicsICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nXTtcbiAgICB2YXIgcmV0dXJuVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgIHJldHVybiB0aGlzLmFwaUNsaWVudC5jYWxsQXBpKFxuICAgICAgJy90ZW1wbGF0ZS1mb2xkZXJzL3tmb2xkZXJfaWR9JywgJ0RFTEVURScsXG4gICAgICBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcywgaGVhZGVyUGFyYW1zLCBmb3JtUGFyYW1zLCBwb3N0Qm9keSxcbiAgICAgIGF1dGhOYW1lcywgY29udGVudFR5cGVzLCBhY2NlcHRzLCByZXR1cm5UeXBlXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIHRlbXBsYXRlIGZvbGRlclxuICAgKiBEZWxldGUgYSBzcGVjaWZpYyB0ZW1wbGF0ZSBmb2xkZXIsIGFuZCBtYXJrIGFsbCB0aGUgdGVtcGxhdGVzIGluIHRoZSBmb2xkZXIgYXMgJ3VuZmlsZWQnLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZm9sZGVySWQgVGhlIHVuaXF1ZSBpZCBmb3IgdGhlIHRlbXBsYXRlIGZvbGRlci5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX1cbiAgICovXG4gIHRoaXMucmVtb3ZlID0gZnVuY3Rpb24oZm9sZGVySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVXaXRoSHR0cEluZm8oZm9sZGVySWQpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZV9hbmRfZGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2VfYW5kX2RhdGEuZGF0YTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgdGVtcGxhdGUgZm9sZGVyc1xuICAgKiBHZXQgYWxsIGZvbGRlcnMgdXNlZCB0byBvcmdhbml6ZSB0ZW1wbGF0ZXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5maWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gcmV0dXJuLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gb3B0cy5leGNsdWRlRmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIGV4Y2x1ZGUuIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0cy5jb3VudCBUaGUgbnVtYmVyIG9mIHJlY29yZHMgdG8gcmV0dXJuLiBEZWZhdWx0IHZhbHVlIGlzIDEwLiBNYXhpbXVtIHZhbHVlIGlzIDEwMDAgKGRlZmF1bHQgdG8gMTApXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLm9mZnNldCBVc2VkIGZvciBbcGFnaW5hdGlvbl0oaHR0cHM6Ly9tYWlsY2hpbXAuY29tL2RldmVsb3Blci9tYXJrZXRpbmcvZG9jcy9tZXRob2RzLXBhcmFtZXRlcnMvI3BhZ2luYXRpb24pLCB0aGlzIGl0IHRoZSBudW1iZXIgb2YgcmVjb3JkcyBmcm9tIGEgY29sbGVjdGlvbiB0byBza2lwLiBEZWZhdWx0IHZhbHVlIGlzIDAuIChkZWZhdWx0IHRvIDApXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL1RlbXBsYXRlRm9sZGVyc30gYW5kIEhUVFAgcmVzcG9uc2VcbiAgICovXG4gIHRoaXMubGlzdFdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB2YXIgcG9zdEJvZHkgPSBudWxsO1xuXG4gICAgdmFyIHBhdGhQYXJhbXMgPSB7XG4gICAgfTtcbiAgICBcbiAgICAvKlxuICAgICBUaGUgZm9sbG93aW5nIGJsb2NrIGJ1aWxkaW5nIHF1ZXJ5UGFyYW1zIGlzIGdvaW5nIHRvIGxvb2sgYSBsaXR0bGUgb2RkLCB3ZSdyZSBnb2luZyBsb29rIGZvciB2YWx1ZXMgaW4gJG9wdHMgd2l0aCBib3RoXG4gICAgIGNhbWVsQ2FzZSBhbmQgc25ha2VfY2FzZSBmb3JtYXQgKHdoaWNoIHdpbGwgYmUgdGhlIHNhbWUgaWYgc2luZ3VsYXIgd29yZCkuIFRoaXMgaXMgYmVjYXVzZSB0aGUgQVBJIGRvY3MgdXNlIHNuYWtlX2Nhc2VcbiAgICAgYnV0IGVhcmx5IHZlcnNpb25zIG9mIHRoZXNlIFNES3MgdXNlZCBjYW1lbENhc2UuIFNvIHRvIGJlIGJhY2t3YXJkIGNvbXBhdGlibGUgd2UnbGwgdXNlIGJvdGguIFxuICAgICovXG4gICAgdmFyIHF1ZXJ5UGFyYW1zID0ge1xuICAgICAgJ2ZpZWxkcyc6IHRoaXMuYXBpQ2xpZW50LmJ1aWxkQ29sbGVjdGlvblBhcmFtKG9wdHNbJ2ZpZWxkcyddID8gb3B0c1snZmllbGRzJ10gOiBvcHRzWydmaWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2V4Y2x1ZGVfZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZXhjbHVkZUZpZWxkcyddID8gb3B0c1snZXhjbHVkZUZpZWxkcyddIDogb3B0c1snZXhjbHVkZV9maWVsZHMnXSwgJ2NzdicpLFxuICAgICAgJ2NvdW50JzogKCBvcHRzWydjb3VudCddID8gb3B0c1snY291bnQnXSA6IG9wdHNbJ2NvdW50J10pLFxuICAgICAgJ29mZnNldCc6ICggb3B0c1snb2Zmc2V0J10gPyBvcHRzWydvZmZzZXQnXSA6IG9wdHNbJ29mZnNldCddKVxuICAgIH07XG4gICAgdmFyIGhlYWRlclBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGZvcm1QYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBhdXRoTmFtZXMgPSBbJ2Jhc2ljQXV0aCddO1xuICAgIHZhciBjb250ZW50VHlwZXMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nXTtcbiAgICB2YXIgYWNjZXB0cyA9IFsnYXBwbGljYXRpb24vanNvbicsICdhcHBsaWNhdGlvbi9wcm9ibGVtK2pzb24nXTtcbiAgICB2YXIgcmV0dXJuVHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgIHJldHVybiB0aGlzLmFwaUNsaWVudC5jYWxsQXBpKFxuICAgICAgJy90ZW1wbGF0ZS1mb2xkZXJzJywgJ0dFVCcsXG4gICAgICBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcywgaGVhZGVyUGFyYW1zLCBmb3JtUGFyYW1zLCBwb3N0Qm9keSxcbiAgICAgIGF1dGhOYW1lcywgY29udGVudFR5cGVzLCBhY2NlcHRzLCByZXR1cm5UeXBlXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogTGlzdCB0ZW1wbGF0ZSBmb2xkZXJzXG4gICAqIEdldCBhbGwgZm9sZGVycyB1c2VkIHRvIG9yZ2FuaXplIHRlbXBsYXRlcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byByZXR1cm4uIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmV4Y2x1ZGVGaWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gZXhjbHVkZS4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRzLmNvdW50IFRoZSBudW1iZXIgb2YgcmVjb3JkcyB0byByZXR1cm4uIERlZmF1bHQgdmFsdWUgaXMgMTAuIE1heGltdW0gdmFsdWUgaXMgMTAwMCAoZGVmYXVsdCB0byAxMClcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdHMub2Zmc2V0IFVzZWQgZm9yIFtwYWdpbmF0aW9uXShodHRwczovL21haWxjaGltcC5jb20vZGV2ZWxvcGVyL21hcmtldGluZy9kb2NzL21ldGhvZHMtcGFyYW1ldGVycy8jcGFnaW5hdGlvbiksIHRoaXMgaXQgdGhlIG51bWJlciBvZiByZWNvcmRzIGZyb20gYSBjb2xsZWN0aW9uIHRvIHNraXAuIERlZmF1bHQgdmFsdWUgaXMgMC4gKGRlZmF1bHQgdG8gMClcbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvVGVtcGxhdGVGb2xkZXJzfVxuICAgKi9cbiAgdGhpcy5saXN0ID0gZnVuY3Rpb24ob3B0cykge1xuICAgIHJldHVybiB0aGlzLmxpc3RXaXRoSHR0cEluZm8ob3B0cylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlX2FuZF9kYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZV9hbmRfZGF0YS5kYXRhO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRlbXBsYXRlIGZvbGRlclxuICAgKiBHZXQgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpYyBmb2xkZXIgdXNlZCB0byBvcmdhbml6ZSB0ZW1wbGF0ZXMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmb2xkZXJJZCBUaGUgdW5pcXVlIGlkIGZvciB0aGUgdGVtcGxhdGUgZm9sZGVyLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZmllbGRzIEEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmllbGRzIHRvIHJldHVybi4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IG9wdHMuZXhjbHVkZUZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byBleGNsdWRlLiBSZWZlcmVuY2UgcGFyYW1ldGVycyBvZiBzdWItb2JqZWN0cyB3aXRoIGRvdCBub3RhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSB7QGxpbmsgaHR0cHM6Ly93d3cucHJvbWlzZWpzLm9yZy98UHJvbWlzZX0sIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgZGF0YSBvZiB0eXBlIHtAbGluayBtb2R1bGU6bW9kZWwvVGVtcGxhdGVGb2xkZXJ9IGFuZCBIVFRQIHJlc3BvbnNlXG4gICAqL1xuICB0aGlzLmdldFdpdGhIdHRwSW5mbyA9IGZ1bmN0aW9uKGZvbGRlcklkLCBvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdmFyIHBvc3RCb2R5ID0gbnVsbDtcblxuICAgIC8vIHZlcmlmeSB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdmb2xkZXJJZCcgaXMgc2V0XG4gICAgaWYgKGZvbGRlcklkID09PSB1bmRlZmluZWQgfHwgZm9sZGVySWQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnZm9sZGVySWQnIHdoZW4gY2FsbGluZyBcIik7XG4gICAgfVxuXG4gICAgdmFyIHBhdGhQYXJhbXMgPSB7XG4gICAgICAnZm9sZGVyX2lkJzogZm9sZGVySWRcbiAgICB9O1xuICAgIFxuICAgIC8qXG4gICAgIFRoZSBmb2xsb3dpbmcgYmxvY2sgYnVpbGRpbmcgcXVlcnlQYXJhbXMgaXMgZ29pbmcgdG8gbG9vayBhIGxpdHRsZSBvZGQsIHdlJ3JlIGdvaW5nIGxvb2sgZm9yIHZhbHVlcyBpbiAkb3B0cyB3aXRoIGJvdGhcbiAgICAgY2FtZWxDYXNlIGFuZCBzbmFrZV9jYXNlIGZvcm1hdCAod2hpY2ggd2lsbCBiZSB0aGUgc2FtZSBpZiBzaW5ndWxhciB3b3JkKS4gVGhpcyBpcyBiZWNhdXNlIHRoZSBBUEkgZG9jcyB1c2Ugc25ha2VfY2FzZVxuICAgICBidXQgZWFybHkgdmVyc2lvbnMgb2YgdGhlc2UgU0RLcyB1c2VkIGNhbWVsQ2FzZS4gU28gdG8gYmUgYmFja3dhcmQgY29tcGF0aWJsZSB3ZSdsbCB1c2UgYm90aC4gXG4gICAgKi9cbiAgICB2YXIgcXVlcnlQYXJhbXMgPSB7XG4gICAgICAnZmllbGRzJzogdGhpcy5hcGlDbGllbnQuYnVpbGRDb2xsZWN0aW9uUGFyYW0ob3B0c1snZmllbGRzJ10gPyBvcHRzWydmaWVsZHMnXSA6IG9wdHNbJ2ZpZWxkcyddLCAnY3N2JyksXG4gICAgICAnZXhjbHVkZV9maWVsZHMnOiB0aGlzLmFwaUNsaWVudC5idWlsZENvbGxlY3Rpb25QYXJhbShvcHRzWydleGNsdWRlRmllbGRzJ10gPyBvcHRzWydleGNsdWRlRmllbGRzJ10gOiBvcHRzWydleGNsdWRlX2ZpZWxkcyddLCAnY3N2JylcbiAgICB9O1xuICAgIHZhciBoZWFkZXJQYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBmb3JtUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgYXV0aE5hbWVzID0gWydiYXNpY0F1dGgnXTtcbiAgICB2YXIgY29udGVudFR5cGVzID0gWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgdmFyIGFjY2VwdHMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJ107XG4gICAgdmFyIHJldHVyblR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQuY2FsbEFwaShcbiAgICAgICcvdGVtcGxhdGUtZm9sZGVycy97Zm9sZGVyX2lkfScsICdHRVQnLFxuICAgICAgcGF0aFBhcmFtcywgcXVlcnlQYXJhbXMsIGhlYWRlclBhcmFtcywgZm9ybVBhcmFtcywgcG9zdEJvZHksXG4gICAgICBhdXRoTmFtZXMsIGNvbnRlbnRUeXBlcywgYWNjZXB0cywgcmV0dXJuVHlwZVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0ZW1wbGF0ZSBmb2xkZXJcbiAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgZm9sZGVyIHVzZWQgdG8gb3JnYW5pemUgdGVtcGxhdGVzLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZm9sZGVySWQgVGhlIHVuaXF1ZSBpZCBmb3IgdGhlIHRlbXBsYXRlIGZvbGRlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmZpZWxkcyBBIGNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGZpZWxkcyB0byByZXR1cm4uIFJlZmVyZW5jZSBwYXJhbWV0ZXJzIG9mIHN1Yi1vYmplY3RzIHdpdGggZG90IG5vdGF0aW9uLlxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBvcHRzLmV4Y2x1ZGVGaWVsZHMgQSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBmaWVsZHMgdG8gZXhjbHVkZS4gUmVmZXJlbmNlIHBhcmFtZXRlcnMgb2Ygc3ViLW9iamVjdHMgd2l0aCBkb3Qgbm90YXRpb24uXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL1RlbXBsYXRlRm9sZGVyfVxuICAgKi9cbiAgdGhpcy5nZXQgPSBmdW5jdGlvbihmb2xkZXJJZCwgb3B0cykge1xuICAgIHJldHVybiB0aGlzLmdldFdpdGhIdHRwSW5mbyhmb2xkZXJJZCwgb3B0cylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlX2FuZF9kYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZV9hbmRfZGF0YS5kYXRhO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRlbXBsYXRlIGZvbGRlclxuICAgKiBVcGRhdGUgYSBzcGVjaWZpYyBmb2xkZXIgdXNlZCB0byBvcmdhbml6ZSB0ZW1wbGF0ZXMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmb2xkZXJJZCBUaGUgdW5pcXVlIGlkIGZvciB0aGUgdGVtcGxhdGUgZm9sZGVyLlxuICAgKiBAcGFyYW0ge21vZHVsZTptb2RlbC9UZW1wbGF0ZUZvbGRlcjJ9IGJvZHkgXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL1RlbXBsYXRlRm9sZGVyfSBhbmQgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy51cGRhdGVXaXRoSHR0cEluZm8gPSBmdW5jdGlvbihmb2xkZXJJZCwgYm9keSkge1xuICAgIHZhciBwb3N0Qm9keSA9IGJvZHk7XG5cbiAgICAvLyB2ZXJpZnkgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnZm9sZGVySWQnIGlzIHNldFxuICAgIGlmIChmb2xkZXJJZCA9PT0gdW5kZWZpbmVkIHx8IGZvbGRlcklkID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZvbGRlcklkJyB3aGVuIGNhbGxpbmcgXCIpO1xuICAgIH1cblxuICAgIC8vIHZlcmlmeSB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdib2R5JyBpcyBzZXRcbiAgICBpZiAoYm9keSA9PT0gdW5kZWZpbmVkIHx8IGJvZHkgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnYm9keScgd2hlbiBjYWxsaW5nIFwiKTtcbiAgICB9XG5cbiAgICB2YXIgcGF0aFBhcmFtcyA9IHtcbiAgICAgICdmb2xkZXJfaWQnOiBmb2xkZXJJZFxuICAgIH07XG4gICAgXG4gICAgLypcbiAgICAgVGhlIGZvbGxvd2luZyBibG9jayBidWlsZGluZyBxdWVyeVBhcmFtcyBpcyBnb2luZyB0byBsb29rIGEgbGl0dGxlIG9kZCwgd2UncmUgZ29pbmcgbG9vayBmb3IgdmFsdWVzIGluICRvcHRzIHdpdGggYm90aFxuICAgICBjYW1lbENhc2UgYW5kIHNuYWtlX2Nhc2UgZm9ybWF0ICh3aGljaCB3aWxsIGJlIHRoZSBzYW1lIGlmIHNpbmd1bGFyIHdvcmQpLiBUaGlzIGlzIGJlY2F1c2UgdGhlIEFQSSBkb2NzIHVzZSBzbmFrZV9jYXNlXG4gICAgIGJ1dCBlYXJseSB2ZXJzaW9ucyBvZiB0aGVzZSBTREtzIHVzZWQgY2FtZWxDYXNlLiBTbyB0byBiZSBiYWNrd2FyZCBjb21wYXRpYmxlIHdlJ2xsIHVzZSBib3RoLiBcbiAgICAqL1xuICAgIHZhciBxdWVyeVBhcmFtcyA9IHtcbiAgICB9O1xuICAgIHZhciBoZWFkZXJQYXJhbXMgPSB7XG4gICAgfTtcblxuICAgIHZhciBmb3JtUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgYXV0aE5hbWVzID0gWydiYXNpY0F1dGgnXTtcbiAgICB2YXIgY29udGVudFR5cGVzID0gWydhcHBsaWNhdGlvbi9qc29uJ107XG4gICAgdmFyIGFjY2VwdHMgPSBbJ2FwcGxpY2F0aW9uL2pzb24nLCAnYXBwbGljYXRpb24vcHJvYmxlbStqc29uJ107XG4gICAgdmFyIHJldHVyblR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICByZXR1cm4gdGhpcy5hcGlDbGllbnQuY2FsbEFwaShcbiAgICAgICcvdGVtcGxhdGUtZm9sZGVycy97Zm9sZGVyX2lkfScsICdQQVRDSCcsXG4gICAgICBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcywgaGVhZGVyUGFyYW1zLCBmb3JtUGFyYW1zLCBwb3N0Qm9keSxcbiAgICAgIGF1dGhOYW1lcywgY29udGVudFR5cGVzLCBhY2NlcHRzLCByZXR1cm5UeXBlXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIHRlbXBsYXRlIGZvbGRlclxuICAgKiBVcGRhdGUgYSBzcGVjaWZpYyBmb2xkZXIgdXNlZCB0byBvcmdhbml6ZSB0ZW1wbGF0ZXMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmb2xkZXJJZCBUaGUgdW5pcXVlIGlkIGZvciB0aGUgdGVtcGxhdGUgZm9sZGVyLlxuICAgKiBAcGFyYW0ge21vZHVsZTptb2RlbC9UZW1wbGF0ZUZvbGRlcjJ9IGJvZHkgXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL1RlbXBsYXRlRm9sZGVyfVxuICAgKi9cbiAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbihmb2xkZXJJZCwgYm9keSkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZVdpdGhIdHRwSW5mbyhmb2xkZXJJZCwgYm9keSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlX2FuZF9kYXRhKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZV9hbmRfZGF0YS5kYXRhO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIHRlbXBsYXRlIGZvbGRlclxuICAgKiBDcmVhdGUgYSBuZXcgdGVtcGxhdGUgZm9sZGVyLlxuICAgKiBAcGFyYW0ge21vZHVsZTptb2RlbC9UZW1wbGF0ZUZvbGRlcjF9IGJvZHkgXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL1RlbXBsYXRlRm9sZGVyfSBhbmQgSFRUUCByZXNwb25zZVxuICAgKi9cbiAgdGhpcy5jcmVhdGVXaXRoSHR0cEluZm8gPSBmdW5jdGlvbihib2R5KSB7XG4gICAgdmFyIHBvc3RCb2R5ID0gYm9keTtcblxuICAgIC8vIHZlcmlmeSB0aGUgcmVxdWlyZWQgcGFyYW1ldGVyICdib2R5JyBpcyBzZXRcbiAgICBpZiAoYm9keSA9PT0gdW5kZWZpbmVkIHx8IGJvZHkgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgdGhlIHJlcXVpcmVkIHBhcmFtZXRlciAnYm9keScgd2hlbiBjYWxsaW5nIFwiKTtcbiAgICB9XG5cbiAgICB2YXIgcGF0aFBhcmFtcyA9IHtcbiAgICB9O1xuICAgIFxuICAgIC8qXG4gICAgIFRoZSBmb2xsb3dpbmcgYmxvY2sgYnVpbGRpbmcgcXVlcnlQYXJhbXMgaXMgZ29pbmcgdG8gbG9vayBhIGxpdHRsZSBvZGQsIHdlJ3JlIGdvaW5nIGxvb2sgZm9yIHZhbHVlcyBpbiAkb3B0cyB3aXRoIGJvdGhcbiAgICAgY2FtZWxDYXNlIGFuZCBzbmFrZV9jYXNlIGZvcm1hdCAod2hpY2ggd2lsbCBiZSB0aGUgc2FtZSBpZiBzaW5ndWxhciB3b3JkKS4gVGhpcyBpcyBiZWNhdXNlIHRoZSBBUEkgZG9jcyB1c2Ugc25ha2VfY2FzZVxuICAgICBidXQgZWFybHkgdmVyc2lvbnMgb2YgdGhlc2UgU0RLcyB1c2VkIGNhbWVsQ2FzZS4gU28gdG8gYmUgYmFja3dhcmQgY29tcGF0aWJsZSB3ZSdsbCB1c2UgYm90aC4gXG4gICAgKi9cbiAgICB2YXIgcXVlcnlQYXJhbXMgPSB7XG4gICAgfTtcbiAgICB2YXIgaGVhZGVyUGFyYW1zID0ge1xuICAgIH07XG5cbiAgICB2YXIgZm9ybVBhcmFtcyA9IHtcbiAgICB9O1xuXG4gICAgdmFyIGF1dGhOYW1lcyA9IFsnYmFzaWNBdXRoJ107XG4gICAgdmFyIGNvbnRlbnRUeXBlcyA9IFsnYXBwbGljYXRpb24vanNvbiddO1xuICAgIHZhciBhY2NlcHRzID0gWydhcHBsaWNhdGlvbi9qc29uJywgJ2FwcGxpY2F0aW9uL3Byb2JsZW0ranNvbiddO1xuICAgIHZhciByZXR1cm5UeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgcmV0dXJuIHRoaXMuYXBpQ2xpZW50LmNhbGxBcGkoXG4gICAgICAnL3RlbXBsYXRlLWZvbGRlcnMnLCAnUE9TVCcsXG4gICAgICBwYXRoUGFyYW1zLCBxdWVyeVBhcmFtcywgaGVhZGVyUGFyYW1zLCBmb3JtUGFyYW1zLCBwb3N0Qm9keSxcbiAgICAgIGF1dGhOYW1lcywgY29udGVudFR5cGVzLCBhY2NlcHRzLCByZXR1cm5UeXBlXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogQWRkIHRlbXBsYXRlIGZvbGRlclxuICAgKiBDcmVhdGUgYSBuZXcgdGVtcGxhdGUgZm9sZGVyLlxuICAgKiBAcGFyYW0ge21vZHVsZTptb2RlbC9UZW1wbGF0ZUZvbGRlcjF9IGJvZHkgXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IGEge0BsaW5rIGh0dHBzOi8vd3d3LnByb21pc2Vqcy5vcmcvfFByb21pc2V9LCB3aXRoIGRhdGEgb2YgdHlwZSB7QGxpbmsgbW9kdWxlOm1vZGVsL1RlbXBsYXRlRm9sZGVyfVxuICAgKi9cbiAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlV2l0aEh0dHBJbmZvKGJvZHkpXG4gICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZV9hbmRfZGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2VfYW5kX2RhdGEuZGF0YTtcbiAgICAgIH0pO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplateFoldersApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * Templates service.\n * @module api/TemplatesApi\n */\n\n/**\n * Constructs a new TemplatesApi. \n * @alias module:api/TemplatesApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Delete template\n   * Delete a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteTemplateWithHttpInfo = function(templateId) {\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete template\n   * Delete a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteTemplate = function(templateId) {\n    return this.deleteTemplateWithHttpInfo(templateId)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List templates\n   * Get a list of an account's available templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the template.\n   * @param {String} opts.sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.type Limit results based on template type.\n   * @param {String} opts.category Limit results based on category.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {module:model/String} opts.sortField Returns user templates sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Templates} and HTTP response\n   */\n  this.listWithHttpInfo = function(opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv'),\n      'count': ( opts['count'] ? opts['count'] : opts['count']),\n      'offset': ( opts['offset'] ? opts['offset'] : opts['offset']),\n      'created_by': ( opts['createdBy'] ? opts['createdBy'] : opts['created_by']),\n      'since_date_created': ( opts['sinceDateCreated'] ? opts['sinceDateCreated'] : opts['since_date_created']),\n      'before_date_created': ( opts['beforeDateCreated'] ? opts['beforeDateCreated'] : opts['before_date_created']),\n      'type': ( opts['type'] ? opts['type'] : opts['type']),\n      'category': ( opts['category'] ? opts['category'] : opts['category']),\n      'folder_id': ( opts['folderId'] ? opts['folderId'] : opts['folder_id']),\n      'sort_field': ( opts['sortField'] ? opts['sortField'] : opts['sort_field']),\n      'sort_dir': ( opts['sortDir'] ? opts['sortDir'] : opts['sort_dir'])\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List templates\n   * Get a list of an account's available templates.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @param {Number} opts.count The number of records to return. Default value is 10. Maximum value is 1000 (default to 10)\n   * @param {Number} opts.offset Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. (default to 0)\n   * @param {String} opts.createdBy The Mailchimp account user who created the template.\n   * @param {String} opts.sinceDateCreated Restrict the response to templates created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.beforeDateCreated Restrict the response to templates created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.\n   * @param {String} opts.type Limit results based on template type.\n   * @param {String} opts.category Limit results based on category.\n   * @param {String} opts.folderId The unique folder id.\n   * @param {module:model/String} opts.sortField Returns user templates sorted by the specified field.\n   * @param {module:model/String} opts.sortDir Determines the order direction for sorted results.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Templates}\n   */\n  this.list = function(opts) {\n    return this.listWithHttpInfo(opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get template info\n   * Get information about a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.getTemplateWithHttpInfo = function(templateId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get template info\n   * Get information about a specific template.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.getTemplate = function(templateId, opts) {\n    return this.getTemplateWithHttpInfo(templateId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * View default content\n   * Get the sections that you can edit in a template, including each section's default content.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateDefaultContent} and HTTP response\n   */\n  this.getDefaultContentForTemplateWithHttpInfo = function(templateId, opts) {\n    opts = opts || {};\n    var postBody = null;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n      'fields': this.apiClient.buildCollectionParam(opts['fields'] ? opts['fields'] : opts['fields'], 'csv'),\n      'exclude_fields': this.apiClient.buildCollectionParam(opts['excludeFields'] ? opts['excludeFields'] : opts['exclude_fields'], 'csv')\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}/default-content', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * View default content\n   * Get the sections that you can edit in a template, including each section's default content.\n   * @param {String} templateId The unique id for the template.\n   * @param {Object} opts Optional parameters\n   * @param {Array.<String>} opts.fields A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.\n   * @param {Array.<String>} opts.excludeFields A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateDefaultContent}\n   */\n  this.getDefaultContentForTemplate = function(templateId, opts) {\n    return this.getDefaultContentForTemplateWithHttpInfo(templateId, opts)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Update template\n   * Update the name, HTML, or `folder_id` of an existing template.\n   * @param {String} templateId The unique id for the template.\n   * @param {module:model/TemplateInstance2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.updateTemplateWithHttpInfo = function(templateId, body) {\n    var postBody = body;\n\n    // verify the required parameter 'templateId' is set\n    if (templateId === undefined || templateId === null) {\n      throw new Error(\"Missing the required parameter 'templateId' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'template_id': templateId\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates/{template_id}', 'PATCH',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Update template\n   * Update the name, HTML, or `folder_id` of an existing template.\n   * @param {String} templateId The unique id for the template.\n   * @param {module:model/TemplateInstance2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.updateTemplate = function(templateId, body) {\n    return this.updateTemplateWithHttpInfo(templateId, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Add template\n   * Create a new template for the account. Only Classic templates are supported.\n   * @param {module:model/TemplateInstance1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateInstance} and HTTP response\n   */\n  this.createWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/templates', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add template\n   * Create a new template for the account. Only Classic templates are supported.\n   * @param {module:model/TemplateInstance1} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateInstance}\n   */\n  this.create = function(body) {\n    return this.createWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/TemplatesApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Mailchimp Marketing API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.80\n * Contact: apihelp@mailchimp.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n *\n * Swagger Codegen version: 2.4.12\n *\n * Do not edit the class manually.\n *\n */\n\n\n\nvar ApiClient = __webpack_require__(/*! ../ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\n/**\n * VerifiedDomains service.\n * @module api/VerifiedDomainsApi\n */\n\n/**\n * Constructs a new VerifiedDomainsApi. \n * @alias module:api/VerifiedDomainsApi\n * @class\n * @param {module:ApiClient} apiClient Optional API client implementation to use,\n * default to {@link module:ApiClient#instance} if unspecified.\n */\nmodule.exports = function(apiClient) {\n  this.apiClient = apiClient || ApiClient.instance;\n\n  /**\n   * Add domain to account\n   * Add a domain to the account.\n   * @param {module:model/VerifiedDomains2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains} and HTTP response\n   */\n  this.createVerifiedDomainWithHttpInfo = function(body) {\n    var postBody = body;\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Add domain to account\n   * Add a domain to the account.\n   * @param {module:model/VerifiedDomains2} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains}\n   */\n  this.createVerifiedDomain = function(body) {\n    return this.createVerifiedDomainWithHttpInfo(body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Delete domain\n   * Delete a verified domain from the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n  this.deleteDomainWithHttpInfo = function(domainName) {\n    var postBody = null;\n\n    // verify the required parameter 'domainName' is set\n    if (domainName === undefined || domainName === null) {\n      throw new Error(\"Missing the required parameter 'domainName' when calling \");\n    }\n\n    var pathParams = {\n      'domain_name': domainName\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains/{domain_name}', 'DELETE',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Delete domain\n   * Delete a verified domain from the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n   */\n  this.deleteDomain = function(domainName) {\n    return this.deleteDomainWithHttpInfo(domainName)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Get domain info\n   * Get the details for a single domain on the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains} and HTTP response\n   */\n  this.getDomainWithHttpInfo = function(domainName) {\n    var postBody = null;\n\n    // verify the required parameter 'domainName' is set\n    if (domainName === undefined || domainName === null) {\n      throw new Error(\"Missing the required parameter 'domainName' when calling \");\n    }\n\n    var pathParams = {\n      'domain_name': domainName\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains/{domain_name}', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Get domain info\n   * Get the details for a single domain on the account.\n   * @param {String} domainName The domain name.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains}\n   */\n  this.getDomain = function(domainName) {\n    return this.getDomainWithHttpInfo(domainName)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * List sending domains\n   * Get all of the sending domains on the account.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains1} and HTTP response\n   */\n  this.getVerifiedDomainsAllWithHttpInfo = function() {\n    var postBody = null;\n\n    var pathParams = {\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains', 'GET',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * List sending domains\n   * Get all of the sending domains on the account.\n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains1}\n   */\n  this.getVerifiedDomainsAll = function() {\n    return this.getVerifiedDomainsAllWithHttpInfo()\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n\n  /**\n   * Verify domain\n   * Verify a domain for sending.\n   * @param {String} domainName The domain name.\n   * @param {module:model/VerifyADomainForSending_} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifiedDomains} and HTTP response\n   */\n  this.submitDomainVerificationWithHttpInfo = function(domainName, body) {\n    var postBody = body;\n\n    // verify the required parameter 'domainName' is set\n    if (domainName === undefined || domainName === null) {\n      throw new Error(\"Missing the required parameter 'domainName' when calling \");\n    }\n\n    // verify the required parameter 'body' is set\n    if (body === undefined || body === null) {\n      throw new Error(\"Missing the required parameter 'body' when calling \");\n    }\n\n    var pathParams = {\n      'domain_name': domainName\n    };\n    \n    /*\n     The following block building queryParams is going to look a little odd, we're going look for values in $opts with both\n     camelCase and snake_case format (which will be the same if singular word). This is because the API docs use snake_case\n     but early versions of these SDKs used camelCase. So to be backward compatible we'll use both. \n    */\n    var queryParams = {\n    };\n    var headerParams = {\n    };\n\n    var formParams = {\n    };\n\n    var authNames = ['basicAuth'];\n    var contentTypes = ['application/json'];\n    var accepts = ['application/json', 'application/problem+json'];\n    var returnType = 'application/json';\n\n    return this.apiClient.callApi(\n      '/verified-domains/{domain_name}/actions/verify', 'POST',\n      pathParams, queryParams, headerParams, formParams, postBody,\n      authNames, contentTypes, accepts, returnType\n    );\n  }\n  /**\n   * Verify domain\n   * Verify a domain for sending.\n   * @param {String} domainName The domain name.\n   * @param {module:model/VerifyADomainForSending_} body \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifiedDomains}\n   */\n  this.submitDomainVerification = function(domainName, body) {\n    return this.submitDomainVerificationWithHttpInfo(domainName, body)\n      .then(function(response_and_data) {\n        return response_and_data.data;\n      });\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/api/VerifiedDomainsApi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mailchimp/mailchimp_marketing/src/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var ApiClient = __webpack_require__(/*! ./ApiClient */ \"(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/ApiClient.js\");\n\nmodule.exports = ApiClient.instance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1haWxjaGltcC9tYWlsY2hpbXBfbWFya2V0aW5nL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQU8sQ0FBQyx5RkFBYTs7QUFFckMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2FtdWVcXERlc2t0b3BcXEJlYXV0eVNvZnQtbGFuZGluZ3BhZ2VcXG5vZGVfbW9kdWxlc1xcQG1haWxjaGltcFxcbWFpbGNoaW1wX21hcmtldGluZ1xcc3JjXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQXBpQ2xpZW50ID0gcmVxdWlyZSgnLi9BcGlDbGllbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcGlDbGllbnQuaW5zdGFuY2U7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@mailchimp/mailchimp_marketing/src/index.js\n");

/***/ })

};
;